<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rahul Nath]]></title>
  <link href="http://rahulpnath.com/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2017-06-16T00:01:59+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Spigen - Awesome Phone Cases]]></title>
    <link href="http://rahulpnath.com/blog/spigen-awesome-phone-cases/"/>
    <updated>2017-06-15T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/spigen-awesome-phone-cases</id>
    <content type="html"><![CDATA[<p>If you are looking to get a case for your phone, then check out cases by <a href="https://www.spigen.com/">Spigen</a>. I have been using Spigen cases for over three years, and I totally recommend it.</p>

<p>Spigen cases are made with premium materials and are slim, sleek and simple. Spigen provides various models that match different needs. The cases provide <a href="https://www.spigen.com/pages/military-grade">Military Grade Protection</a> and protect the phone from most falls. It fits</p>

<p>The first Spigen cases I got was for my <a href="http://www.rahulpnath.com/blog/review-two-months-and-counting-android-and-nexus-5/">Nexus 5</a>. The Neo Hybrid lasted for over three years. With the Spigen cases, the Nexus was well protected. It did fall from my hands many times, and every time the case protected it well enough. A couple of months back the Spigen case broke, and I had been using the phone without a cover since then. Unfortunately, during one of my <a href="http://www.rahulpnath.com/blog/three_months_to_a_half_marathon/">morning runs</a> the phone fell from my hands while slipping it into the armband. Without the Spigen to protect it, the Nexus screen broke at the corners.</p>

<p><img src="http://rahulpnath.com/images/spigen_pixel.png" alt="Spigen Neo Hybrid for Pixel" class="center" /></p>

<p>A month back I switched over to Google Pixel as the Nexus was becoming unusable with the broken screen. I got the <a href="https://www.spigen.com/collections/pixel/products/google-pixel-case-neo-hybrid?variant=29248762049">Spigen NeoHybrid for Pixel</a>. The case provides dual layer protection with TCU and PC bumper and comes with fingerprint resistance. The precise cutouts give easy access to all buttons and fingerprint sensor.</p>

<p>If you are looking to a get a case, check out if <a href="https://www.spigen.com/">Spigen</a> has one for your model!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Key Vault From Node.js]]></title>
    <link href="http://rahulpnath.com/blog/azure-key-vault-from-node-dot-js/"/>
    <updated>2017-06-12T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/azure-key-vault-from-node-dot-js</id>
    <content type="html"><![CDATA[<p><img src="http://rahulpnath.com/images/nodejs_keyvault.png" alt="Azure Key Vault from Node js" class="center" /></p>

<p>If you develop on Node.js, you can use the <a href="https://github.com/Azure/azure-sdk-for-node">Azure SDK for Node</a> that makes it easy to consume and manage Microsoft Azure Services. In this post let&rsquo;s explore how to use the node SDK to connect to Azure Key Vault and interact with the vault objects. If you are new to key vault check out my <a href="http://www.rahulpnath.com/blog/category/azure-key-vault/">other posts here to get started</a>.</p>

<p>The <a href="https://www.npmjs.com/package/azure-keyvault">azure-keyvault</a> npm (node package manager) package allows accessing keys, secrets, and certificates on Azure Key Vault. It required Node.js version 6.x.x or higher. You can get the <a href="https://nodejs.org/en/">latest Node.js version here</a>.</p>

<blockquote><p><strong>Package Features</strong></p>

<ul>
<li><p><em>Manage keys: create, import, update, delete, backup, restore, list and get.</em></p></li>
<li><p><em>Key operations: sign, verify, encrypt, decrypt, wrap, unwrap.</em></p></li>
<li><p><em>Secret operations: set, get, update and list.</em></p></li>
<li><p><em>Certificate operations: create, get, update, import, list, and manage contacts and issuers.</em></p></li>
</ul>
</blockquote>

<p>It is easy to setup a new project and execute code using Node. The ease of setup is one of the things that I liked about node. To try out the Key Vault package, you can start fresh in a new folder and create a javascript file - <em>main.js</em> (you can name it anything you want).</p>

<p>The following packages are <em>required</em> to connect to the vault and authenticate. The <em><a href="https://www.npmjs.com/package/azure-keyvault">azure-keyvault</a></em> package as we saw above provides capabilities to interact with the vault. The <a href="https://www.npmjs.com/package/adal-node"><em>adal-node</em></a> is the Windows Active Directory Authentication Library for Node. The package makes it easy to authenticate to AAD to access AAD protected web resources. Applications using key vault need to <a href="http://www.rahulpnath.com/blog/authenticating-a-client-application-with-azure-key-vault/">authenticate using a token from an Azure AD Application</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">KeyVault</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;azure-keyvault&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="p">{</span> <span class="nx">AuthenticationContext</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;adal-node&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4><strong>Authenticate Using ClientId and Secret</strong></h4>

<p>Create the Azure AD application and the Secret key as shown in <a href="http://www.rahulpnath.com/blog/authenticating-a-client-application-with-azure-key-vault/">this post</a>. Grab the ClientId and Secret for authentication from the node application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">clientId</span> <span class="o">=</span> <span class="s2">&quot;CLIENT ID&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">secret</span> <span class="o">=</span> <span class="s2">&quot;SECRET&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">secretAuthenticator</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">challenge</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AuthenticationContext</span><span class="p">(</span><span class="nx">challenge</span><span class="p">.</span><span class="nx">authorization</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">context</span><span class="p">.</span><span class="nx">acquireTokenWithClientCredentials</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">challenge</span><span class="p">.</span><span class="nx">resource</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">clientId</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">secret</span><span class="p">,</span>
</span><span class='line'>        <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">tokenResponse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">authorizationValue</span> <span class="o">=</span> <span class="nx">tokenResponse</span><span class="p">.</span><span class="nx">tokenType</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">tokenResponse</span><span class="p">.</span><span class="nx">accessToken</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">authorizationValue</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>To access the vault, we need to create an instance of the KeyVaultClient object which taken in a Credentials as shown below. The KeyVaultClient has different methods exposes to interact with keys, secrets, and certificates in the vault. For e.g. To retrieve a secret from the vault the <em>getSecret</em> method is used passing in the secret identifier.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">secretUrl</span> <span class="o">=</span> <span class="s2">&quot;https://rahulkeyvault.vault.azure.net/secrets/ApiKey/b56396d7a46f4f848481de2e149ef069&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">credentials</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">KeyVault</span><span class="p">.</span><span class="nx">KeyVaultCredentials</span><span class="p">(</span><span class="nx">secretAuthenticator</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">KeyVault</span><span class="p">.</span><span class="nx">KeyVaultClient</span><span class="p">(</span><span class="nx">credentials</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">client</span><span class="p">.</span><span class="nx">getSecret</span><span class="p">(</span><span class="nx">secretUrl</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4><strong>Authenticate Using ClientId and Certificate</strong></h4>

<p>To authenticate using ClientId and Certificate the AuthenticationContext exposes a function <em>acquireTokenWithClientCertificate</em> which takes in the certificate (pem format) and the certificate thumbprint. If you already have a certificate go ahead and use that. If not create a new test certificate as shown below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>makecert -sv mykey.pvk -n <span class="s2">&quot;cn=AD Test Vault Application&quot;</span> ADTestVaultApplication.cer -b 03/03/2017 -e 06/05/2018 -r
</span><span class='line'>pvk2pfx -pvk mykey.pvk -spc ADTestVaultApplication.cer -pfx ADTestVaultApplication.pfx -po <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create a new AD application and set it to use certificate authentication. Assign the application permissions to access the key vault.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$certificateFilePath</span> <span class="p">=</span> <span class="s2">&quot;C:\certificates\ADTestVaultApplication.cer&quot;</span>
</span><span class='line'><span class="nv">$certificate</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">Security</span><span class="p">.</span><span class="n">Cryptography</span><span class="p">.</span><span class="n">X509Certificates</span><span class="p">.</span><span class="n">X509Certificate2</span>
</span><span class='line'><span class="nv">$certificate</span><span class="p">.</span><span class="n">Import</span><span class="p">(</span><span class="nv">$certificateFilePath</span><span class="p">)</span>
</span><span class='line'><span class="nv">$rawCertificateData</span> <span class="p">=</span> <span class="nv">$certificate</span><span class="p">.</span><span class="n">GetRawCertData</span><span class="p">()</span>
</span><span class='line'><span class="nv">$credential</span> <span class="p">=</span> <span class="no">[System.Convert]</span><span class="p">::</span><span class="n">ToBase64String</span><span class="p">(</span><span class="nv">$rawCertificateData</span><span class="p">)</span>
</span><span class='line'><span class="nv">$startDate</span><span class="p">=</span> <span class="no">[System.DateTime]</span><span class="p">::</span><span class="n">Now</span>
</span><span class='line'><span class="nv">$endDate</span> <span class="p">=</span> <span class="nv">$startDate</span><span class="p">.</span><span class="n">AddYears</span><span class="p">(</span><span class="n">1</span><span class="p">)</span>
</span><span class='line'><span class="nv">$adApplication</span> <span class="p">=</span> <span class="nb">New-AzureRmADApplication</span> <span class="n">-DisplayName</span> <span class="s2">&quot;CertAdApplication&quot;</span> <span class="n">-HomePage</span>  <span class="s2">&quot;http://www.test.com&quot;</span> <span class="n">-IdentifierUris</span> <span class="s2">&quot;http://www.test.com&quot;</span> <span class="n">-CertValue</span> <span class="nv">$credential</span>  <span class="n">-StartDate</span> <span class="nv">$startDate</span> <span class="n">-EndDate</span> <span class="nv">$endDate</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$servicePrincipal</span> <span class="p">=</span> <span class="nb">New-AzureRmADServicePrincipal</span> <span class="n">-ApplicationId</span> <span class="nv">$adApplication</span><span class="p">.</span><span class="n">ApplicationId</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Set-AzureRmKeyVaultAccessPolicy</span> <span class="n">-VaultName</span> <span class="s1">&#39;RahulKeyVault&#39;</span> <span class="n">-ServicePrincipalName</span> <span class="nv">$servicePrincipal</span><span class="p">.</span><span class="n">ServicePrincipalNames</span><span class="p">[</span><span class="n">0</span><span class="p">]</span> <span class="n">-PermissionsToSecrets</span> <span class="n">all</span> <span class="n">-PermissionToKeys</span> <span class="n">all</span>
</span></code></pre></td></tr></table></div></figure>


<p>To convert the pvk file into the pem format that is required by adal-node to authenticate with the AD application use the below command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl rsa -inform pvk -in mykey.pvk -outform pem -out mykey.pem
</span></code></pre></td></tr></table></div></figure>


<p>Using the pem encoded certificate private key, we can authenticate with the vault as shown below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">getPrivateKey</span><span class="p">(</span><span class="nx">filename</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">privatePem</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="p">{</span> <span class="nx">encoding</span><span class="o">:</span> <span class="s1">&#39;utf8&#39;</span> <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">privatePem</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">certificateAuthenticator</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">challenge</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AuthenticationContext</span><span class="p">(</span><span class="nx">challenge</span><span class="p">.</span><span class="nx">authorization</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">context</span><span class="p">.</span><span class="nx">acquireTokenWithClientCertificate</span><span class="p">(</span>
</span><span class='line'>        <span class="nx">challenge</span><span class="p">.</span><span class="nx">resource</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">clientId</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">getPrivateKey</span><span class="p">(</span><span class="s2">&quot;mykey.pem&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="s2">&quot;CERTIFICATE THUMBPRINT&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">tokenResponse</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">authorizationValue</span> <span class="o">=</span> <span class="nx">tokenResponse</span><span class="p">.</span><span class="nx">tokenType</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">tokenResponse</span><span class="p">.</span><span class="nx">accessToken</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">authorizationValue</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using the <em>certificateAuthenticator</em> is the same as using the <em>secretAuthenticator</em>, by passing it to <em>KeyVaultCredentials</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">credentials</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">KeyVault</span><span class="p">.</span><span class="nx">KeyVaultCredentials</span><span class="p">(</span><span class="nx">certificateAuthenticator</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">KeyVault</span><span class="p">.</span><span class="nx">KeyVaultClient</span><span class="p">(</span><span class="nx">credentials</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">client</span><span class="p">.</span><span class="nx">getSecret</span><span class="p">(</span><span class="nx">secretUrl</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>To run the application first run <em>npm install</em> to install all the required packages and then execute the js file using <em>node main.js</em>. It fetches the secret value from the key vault using the certificate or secret authenticator. Hope this helps you to get started with Azure Key Vault from Node.js.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: PNGGauntlet - Smash PNGs for Faster Sites]]></title>
    <link href="http://rahulpnath.com/blog/pnggauntlet-smash-pngs-for-faster-sites/"/>
    <updated>2017-06-07T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/pnggauntlet-smash-pngs-for-faster-sites</id>
    <content type="html"><![CDATA[<p>When I upload images to my blog, I try to keep the file size as small as possible. Reducing image size helps improve the site load time. To grab screenshots I use <a href="http://www.rahulpnath.com/blog/screenshots-with-snagit/">Snagit</a> and use <a href="http://www.rahulpnath.com/blog/paint-dot-net/">Paint.net</a> for any editing and resizing the images.</p>

<p>To further optimize images and compress them I use <a href="">PNGGauntlet</a><a href="https://pnggauntlet.com/.">https://pnggauntlet.com/.</a> PNGGauntlet combines <a href="http://advsys.net/ken/util/pngout.htm">PNGOUT</a>, <a href="http://optipng.sourceforge.net/">OptiPNG</a> and DeflOpt and helps smash PNG&rsquo;s to the smallest size.</p>

<p><img src="http://rahulpnath.com/images/pnggauntlet.png" alt="PNG Gauntlet" class="center" /></p>

<p>PNGGauntlet provides options to configure the PNG output. You can play around with the options for the best output. I use the default options and has been working fine for me.</p>

<p>Check out <a href="https://pnggauntlet.com/">PNGGauntlet</a> to optimize images for the web.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up Git Credential Manager for Windows with Cmder]]></title>
    <link href="http://rahulpnath.com/blog/setting-up-git-credential-manager-for-windows-with-cmder/"/>
    <updated>2017-06-05T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/setting-up-git-credential-manager-for-windows-with-cmder</id>
    <content type="html"><![CDATA[<p>If you are wondering what Git Credential Manager (GCM) is, then possibly you see the below screen very often when you are interacting with your git repositories.</p>

<p><img src="http://rahulpnath.com/images/git_gcm.png" alt="Enter your Credentials, git" class="center" /></p>

<p>On Windows, you can use <a href="https://github.com/Microsoft/Git-Credential-Manager-for-Windows">Git Credential Manager for Windows</a> which integrates with git and provides the credentials whenever required. GCM removes the need for you to enter the credentials when using the git repositories.</p>

<p><a href="http://www.rahulpnath.com/blog/cmder-portable-console-emulator-for-windows/">Cmder</a> is a portable console emulator for Windows. I prefer to use git from the command line and find the cmder experience good. Check out the <a href="https://www.youtube.com/watch?v=fpxx8hlNTzc">youtube video</a> for more details.</p>

<p>To set up GCM with Cmder download the <a href="https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases">latest release of GCM</a> in the zip format. Unzip the package under the <em>vendor</em> folder in cmder. Run the <em>install.cmd</em> from within the unzipped GCM package.</p>

<p><img src="http://rahulpnath.com/images/git_gcm_location.png" alt="Vendor folder under cmder" class="center" /></p>

<p>Once you run the install script, the git config will be updated to use the credential manager. Running <em>git config &ndash;list</em> will show the <em>credential.helper</em> set to <em>manager</em>. If this is not automatically set you can set it manually by running</p>

<figure class='code'><figcaption><span>Set GCM as git credential manager</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config --global credential.helper manager
</span></code></pre></td></tr></table></div></figure>


<p>For GUI prompts for entering credentials use</p>

<figure class='code'><figcaption><span>Enable Gui prompt for passwords</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git config --global credential.modalprompt <span class="nb">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hope that saves you some time if you were entering the credentials every time you push/pull from a git repository.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Tests As A Feedback Tool To Improve Code]]></title>
    <link href="http://rahulpnath.com/blog/tests-as-a-feedback-tool/"/>
    <updated>2017-06-01T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/tests-as-a-feedback-tool</id>
    <content type="html"><![CDATA[<p>A unit test suite provides immediate feedback when you make a change. A passing test suite gives the confidence on the changes made. It&rsquo;s the confidence that the team has on the tests suite that matters more than the <a href="http://www.rahulpnath.com/blog/is-code-coverage-a-lie/">code coverage number</a>. Tests also provide feedback about the code. It suggests how easy or difficult it is to use the code just written since tests are the first consumers of the code. Different kinds of <a href="http://xunitpatterns.com/Test%20Smells.html">Test Smells</a> indicates a problem with the code that is getting tested or the test code itself and provides feedback to improve it.</p>

<p><img alt = "Test Feedback" src="http://rahulpnath.com/images/test_feedback.png" class = "center" /></p>

<p>Let&rsquo;s take a look at a couple of Test Smells and see what changes can be made to improve the code.</p>

<h3>Multiple Asserts on Class Properties</h3>

<p>Tests should ideally follow the Single Responsibility Principle (SRP). It should test one thing and try to limit that to one <em>Assert</em> statement. Often I come across tests that assert multiple things. At times this could just be that we are testing all side-effects of the method that is getting tested. Such tests can be broken down into separate tests which test just one thing each. In certain other cases, the effects of the method that is getting tested itself are spread across multiple properties. Let&rsquo;s see a simple example of one such case. Below is a DateRange class which takes in a StartDate and EndDate and creates a DateRange class if the endDate is greater than startDate.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">DateRange</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">readonly</span> <span class="n">DateTime</span> <span class="n">StartDate</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">readonly</span> <span class="n">DateTime</span> <span class="n">EndDate</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">DateRange</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">startDate</span><span class="p">,</span> <span class="n">DateTime</span> <span class="n">endDate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">endDate</span> <span class="p">&lt;</span> <span class="n">startDate</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="s">&quot;End date cannot be less than start Date&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">StartDate</span> <span class="p">=</span> <span class="n">startDate</span><span class="p">;</span>
</span><span class='line'>        <span class="n">EndDate</span> <span class="p">=</span> <span class="n">endDate</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">DateRange</span> <span class="nf">MonthsFromDate</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">date</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numOfMonths</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">DateRange</span><span class="p">(</span><span class="n">date</span>   <span class="p">,</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Today</span><span class="p">.</span><span class="n">AddMonths</span><span class="p">(</span><span class="n">numOfMonths</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">bool</span> <span class="nf">IsInRange</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">theDateTime</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">theDateTime</span> <span class="p">&gt;=</span> <span class="n">StartDate</span> <span class="p">&amp;&amp;</span> <span class="n">theDateTime</span> <span class="p">&lt;=</span> <span class="n">EndDate</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s take a look at one of the tests that check for the successful creation of a DateRange object using the MonthsFromDate function. In the tests below you can see that there are two statements to assert that the DateRange object is created successfully. In this particular case, the assertions are limited to two, but could often be more than that.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Theory]</span>
</span><span class='line'><span class="na">[InlineData(&quot;01-Jan-2017&quot;, 2, &quot;01-Mar-2017&quot;)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;01-Jan-2017&quot;, 0, &quot;01-Jan-2017&quot;)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;01-Jan-2017&quot;, 27, &quot;01-Apr-2019&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">MonthsFromDateReturnsExpected</span><span class="p">(</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">startDateString</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">monthsFromNow</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">endDateString</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">startDate</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">startDateString</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">endDate</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">endDateString</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">actual</span> <span class="p">=</span> <span class="n">DateRange</span><span class="p">.</span><span class="n">MonthsFromDate</span><span class="p">(</span><span class="n">startDate</span><span class="p">,</span> <span class="n">monthsFromNow</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="n">startDate</span><span class="p">,</span> <span class="n">actual</span><span class="p">.</span><span class="n">StartDate</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="n">endDate</span><span class="p">,</span> <span class="n">actual</span><span class="p">.</span><span class="n">EndDate</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I can think if two ways to solve the above problem. One is to refactor the test code and the other to refactor the DateRange class itself. Both methods involve creating the expected DateRange object upfront and then comparing against it for equality. The tests can be refactored using <a href="https://www.nuget.org/packages/SemanticComparison">SemanticComparison</a> library.</p>

<figure class='code'><figcaption><span>Refactor Test using SemanticComparison</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Theory]</span>
</span><span class='line'><span class="na">[InlineData(&quot;01-Jan-2017&quot;, 2, &quot;01-Mar-2017&quot;)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;01-Jan-2017&quot;, 0, &quot;01-Jan-2017&quot;)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;01-Jan-2017&quot;, 27, &quot;01-Apr-2019&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">MonthsFromDateReturnsExpectedUsingSemanticComparison</span><span class="p">(</span>
</span><span class='line'>   <span class="kt">string</span> <span class="n">startDateString</span><span class="p">,</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">monthsFromNow</span><span class="p">,</span>
</span><span class='line'>   <span class="kt">string</span> <span class="n">endDateString</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">startDate</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">startDateString</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">endDate</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">endDateString</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">expected</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DateRange</span><span class="p">(</span><span class="n">startDate</span><span class="p">,</span> <span class="n">endDate</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">actual</span> <span class="p">=</span> <span class="n">DateRange</span><span class="p">.</span><span class="n">MonthsFromDate</span><span class="p">(</span><span class="n">startDate</span><span class="p">,</span> <span class="n">monthsFromNow</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">expected</span>
</span><span class='line'>        <span class="p">.</span><span class="n">AsSource</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">OfLikeness</span><span class="p">&lt;</span><span class="n">DateRange</span><span class="p">&gt;()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">ShouldEqual</span><span class="p">(</span><span class="n">actual</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this particular case looking closely at the <a href="http://xunitpatterns.com/SUT.html">system under test (SUT)</a>, the DateRange class, we understand that it can be a <a href="http://www.rahulpnath.com/blog/thinking-beyond-primitive-values-value-objects/">Value Object</a>. Any two instances of DateRange with the same start and end date can be considered equal. Equality is based on the value contained and not on any other identity. Though in all cases that you observe this behavior it might not be possible for you to convert it into a value object. In those case use the approach mentioned below. But in cases where you have control over it, override <a href="http://www.rahulpnath.com/blog/thinking-beyond-primitive-values-value-objects/">Equals and GetHashCode</a> to implement value equality. The test is much simpler and had less code</p>

<figure class='code'><figcaption><span>Refactor DateRange to ValueObject</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Theory]</span>
</span><span class='line'><span class="na">[InlineData(&quot;01-Jan-2017&quot;, 2, &quot;01-Mar-2017&quot;)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;01-Jan-2017&quot;, 0, &quot;01-Jan-2017&quot;)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;01-Jan-2017&quot;, 27, &quot;01-Apr-2019&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">MonthsFromDateReturnsExpectedUsingValueObject</span><span class="p">(</span>
</span><span class='line'>   <span class="kt">string</span> <span class="n">startDateString</span><span class="p">,</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">monthsFromNow</span><span class="p">,</span>
</span><span class='line'>   <span class="kt">string</span> <span class="n">endDateString</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">startDate</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">startDateString</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">endDate</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">endDateString</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">expected</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DateRange</span><span class="p">(</span><span class="n">startDate</span><span class="p">,</span> <span class="n">endDate</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">actual</span> <span class="p">=</span> <span class="n">DateRange</span><span class="p">.</span><span class="n">MonthsFromDate</span><span class="p">(</span><span class="n">startDate</span><span class="p">,</span> <span class="n">monthsFromNow</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">actual</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Complicated Test Setup and Test Code Duplication</h3>

<p>At times we run into cases where setting up the sut is complicated and is a lot of code. Complicated setup often leads to <a href="http://xunitpatterns.com/Test%20Code%20Duplication.html">Test code duplication</a>.</p>

<blockquote><p><em>A complicated test setup warrants &lsquo;</em>cut-copy-paste<em>&rsquo; to test different aspects of the sut.</em></p></blockquote>

<p>From my experience, I have seen this happen more for the test setup phase. The test setup phase is identical across a set of tests with only the assertions being different. Let us look into some common reasons why test setup can becoming complicated leading to test code duplication as well.</p>

<h4><strong>Violating Single Responsibility Principle (SRP)</strong></h4>

<p>The test setup can get complicated when the sut violates Single Responsibility Principle (SRP). When there are too many things that are getting affected by the sut, the setup and the verification phases become complex. In these cases extracting the responsibilities as injected dependencies help reduce complexity. The tests can then use mocks to test the sut in isolation. The post, <a href="http://www.rahulpnath.com/blog/refactoring-to-improve-testability-extracting-dependencies/">Refactoring to Improve Testability: Extracting Dependencies</a> looks into an end to end scenario of this case and how it can be improved.</p>

<p>Violating SRP also leads to test code duplication as multiple aspects need testing and the setup looks almost similar. Refactoring the sut and the test code are ways that test code can be made more robust in these cases.</p>

<h4><strong>SUT Constraints</strong></h4>

<p>Test Code Duplication can occur when there are constraints on a constructor, and the test needs to construct it. Let&rsquo;s take the example of DateRange class we saw above. The DateRange constructor takes in two dates, startDate and endDate. But the constructor has a rule enforced that endDate must be greater than startDate. In such cases, I often see tests that have DateRange as a property directly or indirectly (as properties on other objects) creating them explicitly.</p>

<figure class='code'><figcaption><span>Explicitly create objects with Constraints</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Theory]</span>
</span><span class='line'><span class="na">[InlineData(&quot;1 Jan 2016&quot;, &quot;1 Mar 2016&quot;, &quot;20 Feb 2016&quot;)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;11 Apr 2016&quot;, &quot;30 Mar 2017&quot;, &quot;26 Dec 2016&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">DateInBetweenStartAndEndDateIsInRangeManualSetup</span><span class="p">(</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">startDateString</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">endDateString</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">dateInBetween</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">startDate</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">startDateString</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">endDate</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">endDateString</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">date</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">dateInBetween</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">sut</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DateRange</span><span class="p">(</span><span class="n">startDate</span><span class="p">,</span> <span class="n">endDate</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">actual</span> <span class="p">=</span> <span class="n">sut</span><span class="p">.</span><span class="n">IsInRange</span><span class="p">(</span><span class="n">date</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">True</span><span class="p">(</span><span class="n">actual</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We cannot depend on the default behavior of AutoFixture to generate a DateRange object for us, as it does not know about this constraint and will always pass two random dates to the constructor. The below test is not repeatable and can fail at times if AutoFixture sends the endDate less than the start date.</p>

<figure class='code'><figcaption><span>Using AutoFixture on classes that have constraints can lead to tests that are not repeatable</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Theory]</span>
</span><span class='line'><span class="na">[InlineAutoData]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">DateInBetweenStartAndEndDateIsInRange</span><span class="p">(</span><span class="n">DateRange</span> <span class="n">sut</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">rand</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Random</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">date</span> <span class="p">=</span> <span class="n">sut</span><span class="p">.</span><span class="n">StartDate</span><span class="p">.</span><span class="n">AddDays</span><span class="p">(</span><span class="n">rand</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="p">(</span><span class="n">sut</span><span class="p">.</span><span class="n">EndDate</span> <span class="p">-</span> <span class="n">sut</span><span class="p">.</span><span class="n">StartDate</span><span class="p">).</span><span class="n">Days</span> <span class="p">-</span> <span class="m">1</span><span class="p">));</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">actual</span> <span class="p">=</span> <span class="n">sut</span><span class="p">.</span><span class="n">IsInRange</span><span class="p">(</span><span class="n">date</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">True</span><span class="p">(</span><span class="n">actual</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To make the test repeatable, we must be able to generate a DateRange class successfully every time we ask AutoFixture for one. For this, we add a DateRange <a href="https://github.com/AutoFixture/AutoFixture/wiki/Internal-Architecture">customization and plug it into the Fixture creation pipeline</a>. The customization makes sure that the DateRange class constructor parameters match the constraints.</p>

<figure class='code'><figcaption><span>DateRange AutoFixture Customization</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">InlineCustomizedAutoDataAttribute</span> <span class="p">:</span> <span class="n">AutoDataAttribute</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">InlineCustomizedAutoDataAttribute</span><span class="p">()</span>
</span><span class='line'>        <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="k">new</span> <span class="n">Fixture</span><span class="p">().</span><span class="n">Customize</span><span class="p">(</span><span class="k">new</span> <span class="n">DateRangeCustomization</span><span class="p">()))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">DateRangeCustomization</span> <span class="p">:</span> <span class="n">ICustomization</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Customize</span><span class="p">(</span><span class="n">IFixture</span> <span class="n">fixture</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">fixture</span><span class="p">.</span><span class="n">Customizations</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">DateRangeSpecimenBuilder</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">DateRangeSpecimenBuilder</span> <span class="p">:</span> <span class="n">ISpecimenBuilder</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">object</span> <span class="nf">Create</span><span class="p">(</span><span class="kt">object</span> <span class="n">request</span><span class="p">,</span> <span class="n">ISpecimenContext</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">requestAsType</span> <span class="p">=</span> <span class="n">request</span> <span class="k">as</span> <span class="n">Type</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">DateRange</span><span class="p">).</span><span class="n">Equals</span><span class="p">(</span><span class="n">requestAsType</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">startTime</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">Create</span><span class="p">&lt;</span><span class="n">DateTime</span><span class="p">&gt;();</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">range</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">Create</span><span class="p">&lt;</span><span class="kt">uint</span><span class="p">&gt;();</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">DateRange</span><span class="p">(</span><span class="n">startTime</span><span class="p">,</span> <span class="n">startTime</span><span class="p">.</span><span class="n">AddDays</span><span class="p">(</span><span class="n">range</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">NoSpecimen</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The tests can now be updated to use the <em>InlineCustomizedAutoDataAttribute</em> instead of the default <em>InlineAutoDataAttribute</em>. The tests are repeatable now as we can be sure that AutoFixture will always generate a valid DateRange object.</p>

<h3>Public vs. Private for Tests</h3>

<p>It often happens that we get into discussions on whether a function should be private or public. We think it is a bad idea to write production code in a way to suit tests. To test private methods, you can employ techniques of reflection or use <a href="https://msdn.microsoft.com/en-us/library/system.runtime.compilerservices.internalsvisibletoattribute">InternalsVisibleTo attribute</a>. But this is a smell in itself.</p>

<p>Tests should be through public API of the class. If it gets difficult to test through the API, it hints that the code is dealing with different responsibilities or has too many dependencies.</p>

<blockquote><p><em>There are valid use cases for the private and internal access modifiers, but the majority of the time I see private and internal code, it merely smells of poor design. If you change the design, you could make types and members public, and feel good about it.</em></p>

<p>-<a href="http://blog.ploeh.dk/2015/09/22/unit-testing-internals/"><em>Unit Testing Internals, Mark Seemann</em></a></p></blockquote>

<p>Consider refactoring your code so that it is easier to test. Tests are the first consumers of code, and it helps shape the public API and the way it gets consumed. It is fine to have tests affect the way you write code. What is not fine is to have explicit loops within the production code, just for test code. The problem with having such code is that the other code loop never gets tested.</p>

<p>Tests act as a feedback tool and it is important that you listen to it. If you decide to bear the pain of writing tests ignoring the feedback just to meet some <a href="http://www.rahulpnath.com/blog/is-code-coverage-a-lie/">code coverage numbers</a> then you are doing it wrong. Most of the cases you will end up with hard to maintain code and fragile tests. Listen to the feedback and incorporate it into the code you write.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Paint.net - A Layman's Photoshop]]></title>
    <link href="http://rahulpnath.com/blog/paint-dot-net/"/>
    <updated>2017-05-31T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/paint-dot-net</id>
    <content type="html"><![CDATA[<p>For my blog&rsquo;s I often have to edit, resize, modify images often. The default paint application with Windows lacks a lot of features while <a href="http://www.adobe.com/au/products/photoshop.html">Photoshop</a> is too advanced for my needs. <a href="https://www.getpaint.net/index.html">Paint.net</a> is a freely available tool with many advanced features and is lightweight.</p>

<blockquote><p><em>Paint.NET is free image and photo editing software for PCs that run Windows. It features an intuitive and innovative user interface with support for layers, unlimited undo, special effects, and a wide variety of useful and powerful tools</em></p></blockquote>

<p><a href="https://www.getpaint.net/screenshots.html">
<img src= "http://rahulpnath.com/images/pain_net_screen.png" alt="Paint.Net" class="center" />
</a></p>

<p>In addition to the basic features expected off an image editing tool, paint.net supports layers, create special effects with unlimited history/undo. It also includes gradient tool, Magic Wand, Clone Stamp, etc. for advanced editing. Every action performed on the image is recorded in the History window and allows undoing.</p>

<p><a href="https://www.getpaint.net/download.html">Download</a> the latest version of paint.net for free.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Key Vault From Azure Functions - Certificate Based Authentication]]></title>
    <link href="http://rahulpnath.com/blog/azure-key-vault-from-azure-functions-certificate-based-authentication/"/>
    <updated>2017-05-25T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/azure-key-vault-from-azure-functions-certificate-based-authentication</id>
    <content type="html"><![CDATA[<p>In the previous post we saw how to connect to <a href="http://rahulpnath.com/blog/azure-key-vault-from-azure-functions/">Azure Key Vault from Azure Functions</a>. We used the <a href="http://www.rahulpnath.com/blog/authenticating-a-client-application-with-azure-key-vault/">Application Id and Secret to authenticate with the Azure AD Application</a>. Since the general recommendation is to use certificate-based authentication, in this post, we will see how we can use certificates to authenticate from within an Azure Function.</p>

<p>First, we need to create an Azure AD application and set it up to use certificate-based authentication. Create a new service principal for the AD application and associate that with the Azure Key Vault. Authorize the AD application with the permissions required. In this case, I am providing all access to keys and secrets.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$certificateFilePath</span> <span class="p">=</span> <span class="s2">&quot;C:\certificates\ADTestVaultApplication.cer&quot;</span>
</span><span class='line'><span class="nv">$certificate</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">Security</span><span class="p">.</span><span class="n">Cryptography</span><span class="p">.</span><span class="n">X509Certificates</span><span class="p">.</span><span class="n">X509Certificate2</span>
</span><span class='line'><span class="nv">$certificate</span><span class="p">.</span><span class="n">Import</span><span class="p">(</span><span class="nv">$certificateFilePath</span><span class="p">)</span>
</span><span class='line'><span class="nv">$rawCertificateData</span> <span class="p">=</span> <span class="nv">$certificate</span><span class="p">.</span><span class="n">GetRawCertData</span><span class="p">()</span>
</span><span class='line'><span class="nv">$credential</span> <span class="p">=</span> <span class="no">[System.Convert]</span><span class="p">::</span><span class="n">ToBase64String</span><span class="p">(</span><span class="nv">$rawCertificateData</span><span class="p">)</span>
</span><span class='line'><span class="nv">$startDate</span><span class="p">=</span> <span class="no">[System.DateTime]</span><span class="p">::</span><span class="n">Now</span>
</span><span class='line'><span class="nv">$endDate</span> <span class="p">=</span> <span class="nv">$startDate</span><span class="p">.</span><span class="n">AddYears</span><span class="p">(</span><span class="n">1</span><span class="p">)</span>
</span><span class='line'><span class="nv">$adApplication</span> <span class="p">=</span> <span class="nb">New-AzureRmADApplication</span> <span class="n">-DisplayName</span> <span class="s2">&quot;CertAdApplication&quot;</span> <span class="n">-HomePage</span>  <span class="s2">&quot;http://www.test.com&quot;</span> <span class="n">-IdentifierUris</span> <span class="s2">&quot;http://www.test.com&quot;</span> <span class="n">-CertValue</span> <span class="nv">$credential</span>  <span class="n">-StartDate</span> <span class="nv">$startDate</span> <span class="n">-EndDate</span> <span class="nv">$endDate</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$servicePrincipal</span> <span class="p">=</span> <span class="nb">New-AzureRmADServicePrincipal</span> <span class="n">-ApplicationId</span> <span class="nv">$adApplication</span><span class="p">.</span><span class="n">ApplicationId</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Set-AzureRmKeyVaultAccessPolicy</span> <span class="n">-VaultName</span> <span class="s1">&#39;RahulKeyVault&#39;</span> <span class="n">-ServicePrincipalName</span> <span class="nv">$servicePrincipal</span><span class="p">.</span><span class="n">ServicePrincipalNames</span><span class="p">[</span><span class="n">0</span><span class="p">]</span> <span class="n">-PermissionsToSecrets</span> <span class="n">all</span> <span class="n">-PermissionToKeys</span> <span class="n">all</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create an Azure Function App under your subscription as shown below. You can also use the same application created in the previous post (if you did create one).</p>

<p><img src="http://rahulpnath.com/images/azureFunction_newFunctionApp.png" alt="Azure Function New App" class="center" /></p>

<p>In the Function Apps page, select the app just created. Add a new function like in the last post. Selecting the Function App shows the available set of actions. Under the <em>Platform Features</em> tab we can upload the SSL certificates first and then update the Application Certificates to make the certificate available for the function.</p>

<p><img src="http://rahulpnath.com/images/azureFunction_PlatformFeatures.png" alt="Azure Function Platform Features" class="center" /></p>

<p>Upload the certificate by selecting it from your folder system.</p>

<p><img src="http://rahulpnath.com/images/azureFunction_addCertificate.png" alt="Azure Function Upload Certificate" class="center" /></p>

<p>For the certificate to be available for use in the Azure Functions an entry should be present in Application Settings. Under <em>Application Settings</em> in the <em>Platform Features</em> tab add App settings key and value - <em>WEBSITE_LOAD_CERTIFICATES</em> and the certificate thumbprint This makes the certificate available for consumption within the function. Multiple thumbprints can be specified comma separated if required.</p>

<p><img src="http://rahulpnath.com/images/azureFunction_AppSetting.png" alt="Azure Function Certificates App Settings" class="center" /></p>

<p>Using a certificate to authenticate with the Key Vault is the same as we have <a href="http://www.rahulpnath.com/blog/authenticating-a-client-application-with-azure-key-vault/">seen before</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Microsoft.Azure.KeyVault</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Microsoft.IdentityModel.Clients.ActiveDirectory</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Security.Cryptography</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">System.Security.Cryptography.X509Certificates</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">applicationId</span> <span class="p">=</span> <span class="s">&quot;AD Application ID&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">certificateThumbprint</span> <span class="p">=</span> <span class="s">&quot;Certificate Thumbprint&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">async</span> <span class="k">static</span> <span class="n">Task</span> <span class="nf">Run</span><span class="p">(</span><span class="n">TimerInfo</span> <span class="n">myTimer</span><span class="p">,</span> <span class="n">TraceWriter</span> <span class="n">log</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">keyClient</span> <span class="p">=</span> <span class="k">new</span> <span class="n">KeyVaultClient</span><span class="p">(</span><span class="k">async</span> <span class="p">(</span><span class="n">authority</span><span class="p">,</span> <span class="n">resource</span><span class="p">,</span> <span class="n">scope</span><span class="p">)</span> <span class="p">=&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">authenticationContext</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AuthenticationContext</span><span class="p">(</span><span class="n">authority</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'>    <span class="n">X509Certificate2</span> <span class="n">certificate</span><span class="p">;</span>
</span><span class='line'>    <span class="n">X509Store</span> <span class="n">store</span> <span class="p">=</span> <span class="k">new</span> <span class="n">X509Store</span><span class="p">(</span><span class="n">StoreName</span><span class="p">.</span><span class="n">My</span><span class="p">,</span> <span class="n">StoreLocation</span><span class="p">.</span><span class="n">CurrentUser</span><span class="p">);</span>
</span><span class='line'>    <span class="k">try</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">store</span><span class="p">.</span><span class="n">Open</span><span class="p">(</span><span class="n">OpenFlags</span><span class="p">.</span><span class="n">ReadOnly</span><span class="p">);</span>
</span><span class='line'>        <span class="n">X509Certificate2Collection</span> <span class="n">certificateCollection</span> <span class="p">=</span> <span class="n">store</span><span class="p">.</span><span class="n">Certificates</span><span class="p">.</span><span class="n">Find</span><span class="p">(</span><span class="n">X509FindType</span><span class="p">.</span><span class="n">FindByThumbprint</span><span class="p">,</span> <span class="n">certificateThumbprint</span><span class="p">,</span> <span class="k">false</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">certificateCollection</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span> <span class="n">certificateCollection</span><span class="p">.</span><span class="n">Count</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">&quot;Certificate not installed in the store&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">certificate</span> <span class="p">=</span> <span class="n">certificateCollection</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">finally</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">store</span><span class="p">.</span><span class="n">Close</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">clientAssertionCertificate</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ClientAssertionCertificate</span><span class="p">(</span><span class="n">applicationId</span><span class="p">,</span> <span class="n">certificate</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">authenticationContext</span><span class="p">.</span><span class="n">AcquireTokenAsync</span><span class="p">(</span><span class="n">resource</span><span class="p">,</span> <span class="n">clientAssertionCertificate</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">AccessToken</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">secretIdentifier</span> <span class="p">=</span> <span class="s">&quot;https://rahulkeyvault.vault.azure.net/secrets/mySecretName&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">secret</span> <span class="p">=</span> <span class="k">await</span> <span class="n">keyClient</span><span class="p">.</span><span class="n">GetSecretAsync</span><span class="p">(</span><span class="n">secretIdentifier</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">log</span><span class="p">.</span><span class="n">Info</span><span class="p">(</span><span class="err">$</span><span class="s">&quot;Secret Value: {secret}&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make sure you add in the <em>project.json</em> as seen in the <a href="http://rahulpnath.com/blog/azure-key-vault-from-azure-functions/">previous post</a> to enable the required NuGet packages. The Azure function now uses the certificate to authenticate with Key Vault and retrieve the secret.</p>

<p>Hope this helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Pocket - Don't Miss Out on the Articles That You Want to Read Later]]></title>
    <link href="http://rahulpnath.com/blog/pocket-offline-reading-made-easy/"/>
    <updated>2017-05-24T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/pocket-offline-reading-made-easy</id>
    <content type="html"><![CDATA[<p><img src="http://rahulpnath.com/images/pocket.jpg" alt="Pocket" class="center" /></p>

<p>I try to stay offline for fixed times during the day and often <a href="http://www.rahulpnath.com/blog/staying-productive-offline/">prepare myself up for it</a>. Having things to read is one of the important things to it. <a href="http://www.rahulpnath.com/blog/feedly-one-stop-reading-place/">Feedly</a> allows to keep track of all the reading sources that I have, while I am online. Some articles need more time and focus to be well understood, and I often end up &lsquo;Saving them for Later.&rsquo;</p>

<p><a href="https://getpocket.com">Pocket</a> is an app that helps manage articles that you wish to read later. You can save articles, videos or pretty much anything into Pocket and view them later. The best thing about Pocket is that on mobile devices, it allows offline reading - i.e., without the need for an internet connection.</p>

<p>Pocket has <a href="https://getpocket.com/add/?ep=1">apps and browser extensions</a> for a variety of platforms making it easy to save articles that you find interesting. You can save to pocket while on your laptop or your mobile devices and have it available for later reading. Feedly integrates with Pocket and allows to save articles for future reading straight to Pocket. I am using the free version of Pocketand it works perfectly for me. But if you are interested in more advanced features you can upgrade to the <a href="https://getpocket.com/premium?ep=1">Premium version</a>.</p>

<p>Don&rsquo;t miss out on that article that you want to read (later), <a href="https://getpocket.com">Get Pocket</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Start New Habits That Stick]]></title>
    <link href="http://rahulpnath.com/blog/start_new_habits_that_stick/"/>
    <updated>2017-05-16T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/start_new_habits_that_stick</id>
    <content type="html"><![CDATA[<blockquote><p><em>The beginning of a good habit is the elimination of an excuse.</em>   <br/>
<em>And The beginning of a bad habit is the finding of an excuse</em></p></blockquote>

<p>The ability to pick on something and to make a habit of it is something that is always helpful. This skill helps to create new habits and also let go off old ones that are not doing any good to you. Part of letting of bad old habits might be creating new ones. When I wrote about <a href="http://www.rahulpnath.com/blog/three_months_to_a_half_marathon/">Couch to Half Marathon</a>, some of my readers asked how to keep up with the plan. How to do &lsquo;Couch to Street&rsquo;; just getting out there.</p>

<p><a href= "https://quotefancy.com/quote/20375/Jim-Rohn-Motivation-is-what-gets-you-started-Habit-is-what-keeps-you-going">
    <img alt="Motivation is what gets you started. Habit is what keeps you going" src="http://rahulpnath.com/images/habit.jpg" class="center" />
</a></p>

<h3>How Habits Work</h3>

<p>To form new habits, it is important that we understand <a href="http://charlesduhigg.com/how-habits-work/">how habits work</a>.</p>

<blockquote><p><em>a simple neurological loop at the core of every habit, a loop that consists of three parts: <strong>A cue, a routine and a reward.</strong></em></p></blockquote>

<p>As Charles Duhigg points out in his book, Power Of Habits (<a href="http://amzn.to/2gOYluc">recommended read</a>) the formula for changing habits differs from habit and persons. So it is more about using a framework to understand how habits work and experimenting on changing it. Changing a habit does take time and is not an easy one, but with a process in place, it is doable with time and effort.</p>

<p><img src="http://rahulpnath.com/images/habit_loop.jpg" class="center" alt="Cue-Routine-Reward Habit Loop" /></p>

<p>To break a bad habit one needs to identify it first. It could be anything from spending too much time on social media, eating unhealthy food, smoking, drinking, etc. Identifying that you have a habit and it&rsquo;s not good for you to continue with it is important. You can only change something once you identify it.</p>

<p>Once you recognize the habit, find out what is the trigger for the habit. Is it a particular place, people, time, etc. It might be hard to find the specific cue that triggers the habit, so note down everything that you find applicable. Then work on to isolate the cue by monitoring the habit over a couple of days. Wire up the cue that triggers the habit to perform some other action. Create that plan in advance and have some way to remind yourself of it. If your cue is time-based or location based, then you can use your smartphone to pop-up a reminder. If not try to find ways to keep yourself reminded to perform the new plan. It feels hard in the beginning but stick to the plan, and in time you will be able to change your habit. I recommend you to read the book <a href="http://amzn.to/2gOYluc">Power of Habits</a> to understand this subject better.</p>

<h3>Mini Habits and Short Term Goals</h3>

<p>To start creating new habits, I have found setting smaller goals to target daily works better. I began writing at least one line every day to be <a href="http://www.rahulpnath.com/blog/maintaining-a-blogging-schedule/">consistent in blogging</a>, running at least once a week to establish an exercise routine, eat at least one meal healthy, etc. Time-based cues help to enforce such new behavior. Setting aside a specific time as per the desired frequency to perform the activity makes sure that you do not skip doing it. Also, remember to keep the action as simple as possible so that you do not procrastinate when the time comes.</p>

<p>Like if it is running that you are planning to start it could be -  <em>Every Saturday at 6 am I will wear my running shoes and get out of my house</em>. When the time comes, this is such a simple task that you have set for yourself, and you are more likely to do it. Once you have taken the pain of putting the shoes and getting out of the couch, you are more likely to run for at least five minutes.</p>

<p>Break your goals into small and achievable mini goals. These mini goals are often referred to as <a href="http://www.rahulpnath.com/blog/morning_routine/">Most Important Tasks (MIT)</a>, <a href="http://www.rahulpnath.com/blog/experimenting-with-pomodoro-technique/">Big Rocks</a> etc. The key is to break them down into smaller achievable mini-goals and setting a cue to trigger the activity.</p>

<h3>Motivation and Its Role</h3>

<p>Very often we get motivated to start new activities and begin with great enthusiasm. In the beginning, we feel a spike in energy and see things happening. But soon you hit a point where you feel nothing is moving and you feel it a burden to continue. This stage is referred to as <em>plateau - a state of little or no change following a period of activity or progress.</em> You soon see your motivation levels dropping and justifying to yourself how little or no benefit your actions have. Eventually, you find yourself losing entire interest in the activity and start looking for new motivation spikes. This has happened to me many times.</p>

<blockquote><p><em>Motivation is what gets you started.Habit is what keeps you going.</em></p></blockquote>

<p>I have found this to be entirely true. We need the motivation to help us to get started with new activities and set new goals. But motivation alone cannot help us go all the way and achieve what we want. Before jump-starting with the idea give it a good thought to check if it is worth your time spent. If not park the idea to your <a href="http://gettingthingsdone.com/2010/10/what-goes-on-a-someday-maybe-list/">Someday Maybe list</a> (as referred to in <a href="http://amzn.to/2gsJaed">GTD</a>).</p>

<p>Once you have decided to pursue the idea, break it into smaller pieces and set achievable &lsquo;mini goals.&rsquo; Set dedicated time at regular intervals for achieving these mini-goals. Most important is in having some &lsquo;me time&rsquo; to get towards these goals. Like for me I have found that <a href="http://www.rahulpnath.com/blog/waking-up-early-is-all-about-waking-up-to-an-alarm/">mornings work best for me</a> and created a <a href="http://www.rahulpnath.com/blog/morning_routine/">Morning Routine</a>. To make sure that I make the best of my time I try to work in <a href="http://www.rahulpnath.com/blog/experimenting-with-pomodoro-technique/">Pomodoro&rsquo;s and inspect and adapt the process</a> often.</p>

<h3>Tracking and Feedback</h3>

<p>Tracking is an important part of habit formation. Once you have set your goals and mini habits also find ways to track your progress. <a href="http://www.rahulpnath.com/blog/psm-learnings/">Inspect and Adapt</a> is the fundamental principle behind Agile Processes. Habit formation is nothing but being agile, keeping the end goal in mind, adjusting the way you reach there. Find ways and tools to track progress on the habits that you are trying to form.</p>

<p>I prefer automatic tracking with least manual entry, so the tracking happens in the background. But at times you will have to resort to manual methods as well. Make sure you have a time set aside daily to capture the information. Having a review of the data obtained once every week or two and taking adjustment actions is equally important. Some of the tracking tools that I use are <a href="http://www.rahulpnath.com/blog/rescue-time-track-your-time/">Rescue Time</a>, <a href="http://www.rahulpnath.com/blog/three_months_to_a_half_marathon/">Garmin Forerunner 630</a> and a few manual ones. I [review my progress every week] and try to incorporate feedback into the upcoming week.</p>

<blockquote><p><em>All it takes to start a new habit is a moment - The moment where you decide on the new habit. The rest is process!</em></p></blockquote>

<p><a href="http://www.rahulpnath.com/blog/how-i-lost-13-kilos-in-one-and-half-months/">Eating Healthy, Exercise</a>, <a href="http://www.rahulpnath.com/blog/maintaining-a-blogging-schedule/">Blogging</a>, <a href="http://www.rahulpnath.com/blog/waking-up-early-is-all-about-waking-up-to-an-alarm/">Waking up Early</a>, <a href="http://www.rahulpnath.com/blog/experimenting-with-pomodoro-technique/">Reducing time spent on Social Media, Reading</a> and <strike><a href="http://www.rahulpnath.com/blog/recording-my-first-screencast/">Creating Videos</a></strike> (looking to give this up) are some of the habits that I have formed following these techniques. The ability to decide on something and getting it to done is the most important of all. Once you have mastered the skill of forming new habits, it boils down to choosing good habits and wiring that into your life. I have heard about the <a href="https://www.forbes.com/sites/jasonselk/2013/04/15/habit-formation-the-21-day-myth/">21-Day rule of habit formation</a> and similar myths. But I think all it takes to start a new habit is a moment - The moment where you decide on the new habit. The rest is process!</p>

<p><strong>References:</strong></p>

<div>
   <div class="row">
      <div class="col-sm-6 col-md-3">
         <div class="thumbnail">
            <a href="http://amzn.to/2gOYluc" >
            <img alt="Power Of Habit" src="http://rahulpnath.com/images/books_powerofhabit.jpg" data-holder-rendered="true" style="display: block;">
            </a>
         </div>
      </div>
      <div class="col-sm-6 col-md-3">
         <div class="thumbnail">
            <a href="http://amzn.to/2hmeokB">
            <img alt="Superhuman by Habit" src="http://rahulpnath.com/images/books_superhumanbyhabit.jpg" data-holder-rendered="true" style="display: block;" >
            </a>
         </div>
      </div>
   </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Feedly - One Stop Reading Place]]></title>
    <link href="http://rahulpnath.com/blog/feedly-one-stop-reading-place/"/>
    <updated>2017-05-16T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/feedly-one-stop-reading-place</id>
    <content type="html"><![CDATA[<p>Do you want a one stop reading place to stay current and updated with posts from various blogs of your interest?</p>

<blockquote><p><em>Feedly is a news aggregator application that compiles news feeds from a variety of online sources</em></p></blockquote>

<p> <a href="https://feedly.com/">Feedly</a> is what you are looking for. You can subscribe to the sites and news sources that you want to follow and Feedly shows that as a combined list for you.</p>

<p>News sources can be grouped into custom collections to group similar categories of information. Feedly offers a clean and minimalist reading experience, removing all the ads and other elements that create clutter. You can save articles to be read later, mark as favorite, share articles and a lot more.</p>

<p><img src="http://rahulpnath.com/images/feedly_site.png" class="center" alt="Feedly" /></p>

<p>Feedly has <a href="https://feedly.com/apps.html">apps and browser plugins</a> for a broad range of platforms and provides a uniform experience across devices. Currently, I am on the free version of the application, and it has a limit of 100 feeds. The <a href="https://feedly.com/i/pro/">pro version</a> provides a lot more features if you are interested.</p>

<p>Get a one stop reading place, Get <a href="https://feedly.com/">Feedly</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Password Manager - Get One If you Haven't Already]]></title>
    <link href="http://rahulpnath.com/blog/password-manager-get-one-if-you-havent-already/"/>
    <updated>2017-05-11T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/password-manager-get-one-if-you-havent-already</id>
    <content type="html"><![CDATA[<p><img src="http://rahulpnath.com/images/password_manager.jpg" alt ="https://pixabay.com/en/data-security-keyboard-computer-1590455/" class="center" /></p>

<p>First things first; <strong>Check if any of your accounts on the web has been compromised in the various data breaches</strong>. All you need is enter your email address in <a href="https://haveibeenpwned.com/">haveibeenpwned</a>, and it tells you the rest.</p>

<p>My email did show up on multiple breaches, and there is nothing much that you can do about it anyways. The problem with data breaches is not confined just to the site that got breached but also with other sites if you have reused your passwords. The best that we can do is to use different passwords for each account that we create and never reuse them across sites. Also, remember to use &lsquo;stronger&rsquo; passwords. So what makes a password stronger? - <a href="https://www.troyhunt.com/only-secure-password-is-one-you-cant/">The one that you cannot remember</a>.</p>

<blockquote><p><em>A <a href="https://en.wikipedia.org/wiki/Password_manager">Password manager</a> assists in generating, storing, and retrieving complex passwords from an encrypted database</em></p></blockquote>

<p>Password Managers allows keeping all your passwords in a single strongly encrypted location. This manager itself is protected by a password - the master password!. The master password is the only password that you need to remember, so make sure you <a href="https://support.1password.com/strong-master-password/">get this really strong</a>!</p>

<p>There are different <a href="http://au.pcmag.com/password-managers-products/4524/guide/the-best-password-managers-of-2017">password managers</a> out there, both paid and free. Personally, I use <a href="https://1password.com/">1Password</a> and love the experience that it has across all my devices. Initially, I was worried to have my passwords (password since I was mostly reusing the same one) on a cloud store with an external service. But with all these data breaches that I was part of and having realized that not having one is worse than having it in the cloud. <em><a href="https://www.troyhunt.com/password-managers-dont-have-to-be-perfect-they-just-have-to-be-better-than-not-having-one/">Password managers don&rsquo;t have to be perfect, they just have to be better than not having one</a></em>. Having a password manager does not prevent your from being part of data breaches, but at least it protects your accounts elsewhere as you have not reused the password.</p>

<p>So if you still remember your passwords or reuse them, go set yourself up with a password manager!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Todoist Template Transformer - Transform Tasks to 'X' Days From Now]]></title>
    <link href="http://rahulpnath.com/blog/todoist-template-transformer-transform-tasks-to-x-days-from-now/"/>
    <updated>2017-05-09T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/todoist-template-transformer-transform-tasks-to-x-days-from-now</id>
    <content type="html"><![CDATA[<p><img src="http://rahulpnath.com/images/todoist_templates.png" alt="Todoist Templates" class="center" /></p>

<p><a href="https://blog.todoist.com/2015/11/19/new-way-to-create-todoist-templates/">Todoist Templates</a> is a simple way to create tasks for any of your recurring activities. Be it blogging, cooking, or any of your activities. With Todoist Templates, you can turn any project into a checklist that you can easily duplicate later. I have been using <a href="http://www.rahulpnath.com/blog/todoist-manage-your-todo-list/">Todoist</a> for a long time and find it useful to keep track of tasks (both personal and at work)</p>

<h4><strong>Problem</strong></h4>

<p>I <a href="http://www.rahulpnath.com/blog/experimenting-with-pomodoro-technique/">plan my tasks</a> for the upcoming week on Sunday morning. I pull in tasks for the upcoming week, and some of these tasks are template based. For e.g. for writing a blog post, I have the below template</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>TYPE,CONTENT,PRIORITY,INDENT,AUTHOR,RESPONSIBLE,DATE,DATE_LANG,TIMEZONE
</span><span class='line'>task,Blog: BlogTopic,4,1,Rahul (3565260),,,en,Australia/Melbourne
</span><span class='line'>task,BlogTopic: Draft Body,4,2,Rahul (3565260),,today,en,Australia/Melbourne
</span><span class='line'>task,BlogTopic: Refine Body,4,2,Rahul (3565260),,today,en,Australia/Melbourne
</span><span class='line'>task,BlogTopic: Intro and Conclusion,4,2,Rahul (3565260),,tomorrow,en,Australia/Melbourne
</span><span class='line'>task,&quot;BlogTopic: Images, Proof Read and Publish&quot;,4,2,Rahul (3565260),,tomorrow,en,Australia/Melbourne
</span></code></pre></td></tr></table></div></figure>


<p>The dates on the template are relative to the day that you import the template in Todoist. So if I pull in the template on a Sunday, the tasks will start on Sunday. This is not something that I want; I want them to start on a Monday. Alternatively, I can update the template to start from tomorrow. Even in that case, I will always have to know the exact start day relative to the day that I intend to pull in. I usually plan for the tasks on a Sunday but still, like the flexibility to pull in tasks any day of the week.</p>

<h3>Todoist Template Transformer</h3>

<p>The Todoist Template Transformer takes in a date and template path and adjusts all tasks in the template to start relative to the passed in date. In the above example, if I want to blog on Wednesday, I will input the Wednesday date and the template file path. The first two tasks will start on Wednesday and the third and fourth on Thursday. Running the transformer on a Sunday (07-May-2017) with the next Wednesday (10-May-2017) below is the new template</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'>TodoistTemplateTransformer.exe -startDate <span class="s2">&quot;10-May-2017&quot;</span> -templateFile <span class="s2">&quot;Blog Template.csv&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>TYPE,CONTENT,PRIORITY,INDENT,AUTHOR,RESPONSIBLE,DATE,DATE_LANG,TIMEZONE
</span><span class='line'>task,Blog: BlogTopic,4,1,Rahul (3565260),,,en,Australia/Melbourne
</span><span class='line'>task,BlogTopic: Draft Body,4,2,Rahul (3565260),,in 3 days,en,Australia/Melbourne
</span><span class='line'>task,BlogTopic: Refine Body,4,2,Rahul (3565260),,in 3 days,en,Australia/Melbourne
</span><span class='line'>task,BlogTopic: Intro and Conclusion,4,2,Rahul (3565260),,in 4 days,en,Australia/Melbourne
</span><span class='line'>task,&quot;BlogTopic: Images, Proof Read and Publish&quot;,4,2,Rahul (3565260),,in 4 days,en,Australia/Melbourne
</span></code></pre></td></tr></table></div></figure>


<p>This utility is written in FSharp the <a href="https://github.com/rahulpnath/todoisttemplatetransformer">source code is available here</a> if you are interested. I am still in the initial stages of learning FSharp, so if you have any suggestions to improve the code, please raise a Pull Request or drop in a comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Visual Studio Task List - Keep Track of Your TODO Comments]]></title>
    <link href="http://rahulpnath.com/blog/visual-studio-task-list-keep-track-of-your-todo-comments/"/>
    <updated>2017-05-03T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/visual-studio-task-list-keep-track-of-your-todo-comments</id>
    <content type="html"><![CDATA[<p>It often happens when coding that I skip over some part and want to come back to it at a later point in time. I leave some comments in the code so that I do not miss it. It can be a bit tricky to keep track of these comments themselves. Before pushing up the changes to <a href="https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell">master branch</a> or creating a <a href="https://help.github.com/articles/about-pull-requests/">Pull Request</a>, I make sure that all such comments are addressed.</p>

<p>Visual Studio comes with a <a href="https://msdn.microsoft.com/en-us/library/txtwdysk(v=vs.120).aspx">Task List</a> that is handy to track such unfinished work in code. It helps track your pending work items in one place and easily navigate to it. To have a comment appear in the task list, it has to start with a defined token (TODO, HACK, UNDONE, etc.) followed by the comment.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="nf">IsInRange</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">theDateTime</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">//TODO: Implement this function</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotImplementedException</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://rahulpnath.com/images/taskList.png" class="center" alt="Visual Studio Task List" /></p>

<blockquote><p><em>A comment in your code preceded by a comment marker and a predefined token will appear in the Task List window. For example, the above comment has three distinct parts:</em></p>

<ul>
<li><em>The comment marker (//)</em></li>
<li><em>The token (TODO)</em></li>
<li><em>The comment (the rest of the text)</em></li>
</ul>
</blockquote>

<p>Visual Studio by default has TODO, HACK and UNDONE as tokens. You can modify this under Options -> Task List. New custom tokens can be added as required and used instead of the default ones.</p>

<p><img src="http://rahulpnath.com/images/taskList_customize.png" class="center" alt="Visual Studio, Customize Task List" /></p>

<p>When in a multi-member team you can either use custom tokens per member or append the comment with your name or feature name. The Task List provides Search feature with which you can filter the tasks created by you or for the feature you are working.</p>

<p>I try to remove all TODO comments before merging to the master branch. For tasks that need to be tracked even after a merge, I create separate work items to the project backlog (VSTS, GitHub Tasks, Jira whatever the team is using). I might still leave the TODO comment with the relevant ticket details as well for tracking.</p>

<p>The next time you leave some unfinished work for later make sure you have it tracked. Hope it helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Key Vault From Azure Functions]]></title>
    <link href="http://rahulpnath.com/blog/azure-key-vault-from-azure-functions/"/>
    <updated>2017-05-01T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/azure-key-vault-from-azure-functions</id>
    <content type="html"><![CDATA[<p><em><a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-overview">Azure Functions</a> is a solution for easily running small pieces of code, or &ldquo;functions,&rdquo; in the cloud. You can write just the code you need for the problem at hand, without worrying about a whole application or the infrastructure to run it. Functions can make development even more productive, and you can use your development language of choice, such as C#, F#, Node.js, Python or PHP. Pay only for the time your code runs and trust Azure to scale as needed. Azure Functions lets you develop serverless applications on Microsoft Azure.</em></p>

<p>Even when developing with Azure Functions you want to keep your sensitive data protected. Like for example if the function needs to connect to a database you might want to get the connection string from <a href="http://www.rahulpnath.com/blog/getting-started-with-azure-key-vault/">Azure Key Vault</a>. If you are new to Azure Key Vault check out <a href="http://www.rahulpnath.com/blog/category/azure-key-vault/">these posts to get started</a>. In this post, we will explore how we can consume objects in Azure Key Vault from an Azure Function.</p>

<p><strong>Create Azure Function App</strong>: Let&rsquo;s first create an Azure Function App from the Azure portal. Under <em>New - Compute - Function App</em> you can create a new Azure Function.</p>

<p><img src="http://rahulpnath.com/images/azureFunction_new.png" alt="" class="center" /></p>

<p>Enter the details of the new function app and press Create. Each function app has an associated storage account. You can choose an existing one or create a new one.</p>

<p><img src="http://rahulpnath.com/images/azureFunction_create.png" alt="" class="center" /></p>

<p>You can view all Azure Functions Apps in the subscription under <em>More services - Function Apps</em></p>

<p><img src="http://rahulpnath.com/images/azureFunction_all.png" alt="" class="center" /></p>

<p><strong>Create Function</strong>: To create a function you can create from an existing template or create a custom function. In this example, I will use a timer based function in C#.</p>

<p><img src="http://rahulpnath.com/images/azureFunction_createFunction.png" alt="" class="center" /></p>

<p>In the <em>run.csx</em> file add in the code for the function. The below code fetches the secret value from the Key Vault and logs it. You need to provide the <a href="http://www.rahulpnath.com/blog/authenticating-a-client-application-with-azure-key-vault/">Azure AD Application Id and secret</a> to authenticate with it. Make sure you add in the relevant <em>using</em> statements for the KeyVault client Azure Active Directory Authentication libraries (ADAL).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Microsoft.Azure.KeyVault</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="nn">Microsoft.IdentityModel.Clients.ActiveDirectory</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">applicationId</span> <span class="p">=</span> <span class="s">&quot;AD Application Id&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">applicationSecret</span> <span class="p">=</span> <span class="s">&quot;AD Application Secret&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">async</span> <span class="k">static</span> <span class="n">Task</span> <span class="nf">Run</span><span class="p">(</span><span class="n">TimerInfo</span> <span class="n">myTimer</span><span class="p">,</span> <span class="n">TraceWriter</span> <span class="n">log</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">keyClient</span> <span class="p">=</span> <span class="k">new</span> <span class="n">KeyVaultClient</span><span class="p">(</span><span class="k">async</span> <span class="p">(</span><span class="n">authority</span><span class="p">,</span> <span class="n">resource</span><span class="p">,</span> <span class="n">scope</span><span class="p">)</span> <span class="p">=&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">adCredential</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ClientCredential</span><span class="p">(</span><span class="n">applicationId</span><span class="p">,</span> <span class="n">applicationSecret</span><span class="p">);</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">authenticationContext</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AuthenticationContext</span><span class="p">(</span><span class="n">authority</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="n">authenticationContext</span><span class="p">.</span><span class="n">AcquireTokenAsync</span><span class="p">(</span><span class="n">resource</span><span class="p">,</span> <span class="n">adCredential</span><span class="p">)).</span><span class="n">AccessToken</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">secretIdentifier</span> <span class="p">=</span> <span class="s">&quot;https://rahulkeyvault.vault.azure.net/secrets/mySecretName&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">secret</span> <span class="p">=</span> <span class="k">await</span> <span class="n">keyClient</span><span class="p">.</span><span class="n">GetSecretAsync</span><span class="p">(</span><span class="n">secretIdentifier</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">log</span><span class="p">.</span><span class="n">Info</span><span class="p">(</span><span class="err">$</span><span class="s">&quot;C# Timer trigger function executed at: {secret}&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://rahulpnath.com/images/azureFunction_code.png" alt="" class="center" /></p>

<p>Since the KeyVaultClient and the ADAL libraries are NuGet packages, we need to specify these as dependencies for the Azure Function. To use NuGet packages, create a <em>project.json</em> file in the functions folder. Add in both the NuGet packages name and required version.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;frameworks&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;net46&quot;</span><span class="p">:{</span>
</span><span class='line'>      <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;Microsoft.Azure.KeyVault&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;Microsoft.IdentityModel.Clients.ActiveDirectory&quot;</span><span class="p">:</span> <span class="s2">&quot;2.14.201151115&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://rahulpnath.com/images/azureFunction_nuget.png" alt="" class="center" /></p>

<p>Executing the function, retrieves the secret details from the Key Vault and logs it as shown below.</p>

<p><img src="http://rahulpnath.com/images/azureFunction_run.png" alt="" class="center" /></p>

<p>Hope this helps you to get started with Key Vault in Azure Functions and keep your sensitive data secure.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: IF This Then That (IFTTT) - Connect Your Services]]></title>
    <link href="http://rahulpnath.com/blog/if-this-then-that-ifttt-connect-your-services/"/>
    <updated>2017-04-24T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/if-this-then-that-ifttt-connect-your-services</id>
    <content type="html"><![CDATA[<p><em><a href="https://en.wikipedia.org/wiki/IFTTT">IFTTT</a> is a free web-based service that people use to create chains of simple conditional statements, called applets. An applet is triggered by changes that occur within other web services such as Gmail, Facebook, Instagram, or Pinterest. An applet may send an e-mail message if the user tweets using a hashtag or to copy a photo on Facebook to a user&rsquo;s archive if someone tags a user in a photo</em></p>

<p>IFTTT helps you connect the services in your life. Most of the things that you use on the web is a service. There are a <a href="https://ifttt.com/search">broad range of services</a> that are available on IFTTT that you can start using right away. Each service has a set of triggers and actions. We can create applets which wire up triggers (if this) of one service to actions (then that) of another service.</p>

<p><img alt="IFTTT" src="http://rahulpnath.com/images/ifttt_recipe.png" class="center" /></p>

<p>There are a lot of <a href="https://ifttt.com/discover">pre-created applets</a> available for immediate use. You can also create custom applets that wire up the triggers and actions of services of your choice. For e.g. Whenever a new item is available on my blog <a href="https://ifttt.com/feed">RSS feed</a> I <a href="https://ifttt.com/gmail">send an email</a> to <a href="http://www.rahulpnath.com/blog/buffer-smarter-social-sharing/">Buffer</a>. The email to Buffer triggers it to share the post to all my connected social media accounts.</p>

<p><img alt="IFTTT Recommended" src="http://rahulpnath.com/images/ifttt_popular.png" class="center" /></p>

<p>If you are consuming the services of IFTTT, then it is free to use. <a href="https://platform.ifttt.com/pricing">Paid plans</a> are for publishing your service and making it available for others to consume.
IFTTT also has apps for <a href="https://itunes.apple.com/app/apple-store/id660944635?mt=8">iOS</a> and <a href="https://play.google.com/store/apps/details?id=com.ifttt.ifttt&amp;utm_source=/about&amp;utm_medium=web">Android</a>. With the apps you can also use the mobile capabilities like location, messages, etc. to trigger actions.</p>

<p>Start connecting the dots between your services and get the web to work for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: f.lux - Make it Easy For Your Eyes]]></title>
    <link href="http://rahulpnath.com/blog/flux-make-it-easy-for-your-eyes/"/>
    <updated>2017-04-20T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/flux-make-it-easy-for-your-eyes</id>
    <content type="html"><![CDATA[<p>If you spent a lot of time in front of a computer then <a href="https://justgetflux.com/">f.lux</a> is for you. You would have heard that using laptop or mobile just before sleep is bad. It is because of the <a href="http://www.bluelightexposed.com/">blue light</a> that digital screens emit.</p>

<blockquote><p><em>During the day, computer screens look good—they&rsquo;re designed to look like the sun. But, at 9PM, 10PM, or 3AM, you probably shouldn&rsquo;t be looking at the sun.</em></p>

<p><em>f.lux fixes this: it makes the color of your computer&rsquo;s display adapt to the time of day, warm at night and like sunlight during the day.</em></p></blockquote>

<p><img class="center" alt="Flux Current Setting" src="http://rahulpnath.com/images//flux_current.png" /></p>

<p><em>Tell f.lux what kind of lighting you have, and where you live. Then forget about it. f.lux will do the rest, automatically.</em> <br/>
f.lux adjusts the screen to the room you are in and the time of the day. You can set the lighting that the room has, and it will adjust the screen for it.</p>

<p><img class="center" alt="Flux Settings" src="http://rahulpnath.com/images//flux_settings.png" /></p>

<p>I have been using f.lux for a couple of years and had it always on(except occasionally when <a href="http://www.rahulpnath.com/blog/photography-learning-to-click/">processing photos</a>). <a href="https://fluxometer.com/">f.luxometer</a> tells how much blue light f.lux removes if you are interested.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Included Scrum and Pomodoro Technique in My Morning Routine]]></title>
    <link href="http://rahulpnath.com/blog/experimenting-with-pomodoro-technique/"/>
    <updated>2017-04-18T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/experimenting-with-pomodoro-technique</id>
    <content type="html"><![CDATA[<p>A while back I had blogged about my <a href="http://www.rahulpnath.com/blog/morning_routine/">Morning Routine</a>. The routine helps set the pace for the day and in getting things done that matters to me most. During mid of December 2016, I started running once a week to get some exercise into my routine. I got interested in running and soon was running thrice a week along with some free body exercises another three days. Since this was new and exciting naturally my concentration was more on getting these done. I struggled to keep up with my <a href="http://www.rahulpnath.com/blog/maintaining-a-blogging-schedule/">blogging schedule</a>, failed to get a video out in the month of February and lost track of <a href="http://www.rahulpnath.com/blog/2016-recap/">everything else</a> (FSharp, Reading, etc.). Though I continued to wake up <a href="http://www.rahulpnath.com/blog/waking-up-early-is-all-about-waking-up-to-an-alarm/">early in the morning</a>, I could not get much done. I badly wanted to fix things up and here is what I have come up with</p>

<blockquote><p><strong>TLDR;</strong></p>

<ul>
<li>One-week sprints and setting weekly goals</li>
<li>Break the Big Rocks (or MIT&rsquo;s) into smaller tasks</li>
<li>Improve Focus using Pomodoro Technique</li>
<li>Daily Review and Weekly Review</li>
</ul>
</blockquote>

<h3>One Week Sprints</h3>

<p>The <a href="http://www.rahulpnath.com/blog/psm-learnings/">PSM course</a> I attended in January made me realize the importance is sticking to a process. I decided to do weekly sprints for managing my personal work. I have a better estimate of how much I can get done with a shorter interval. I have blocked time on Sunday morning for my weekly planning and processing the &lsquo;In-Basket.&rsquo; The In-Basket is where anything that comes up during the week goes. Todoist has an Inbox Project to which any uncategorized items go by default. I process the inbox and move them to various categories that I have setup in Todoist. Depending on the priority things make their way into the coming week or get set to &lsquo;tentative&rsquo; dates and appropriate categories.</p>

<p><img alt = "Todoist Inbox" src="http://rahulpnath.com/images/pomodoro_todoist_inbox.png" /></p>

<p><em>Big Rocks</em> are tasks that matter to you the most. Identifying them is important so that you do not miss out on them. The idea is to fill your time available over the week with the Big Rocks. The rest will find its way through, just like if you were to <a href="https://www.youtube.com/watch?v=0VNmIxkyHd8">fill a bottle with stones first and then fill it with water, sand as opposed to the other way round</a>. Big Rocks are the same as the <a href="http://www.rahulpnath.com/blog/morning_routine/">Most Important Tasks (MIT&rsquo;s)</a> that we saw earlier.</p>

<p>For me the biggest rock is family, and I have all of my evenings and weekends (rather any time they are awake, and I am home) blocked out for them. Over the past year, since I have written about my <a href="http://www.rahulpnath.com/blog/morning_routine/">Morning Routine</a> one of the MIT&rsquo;s has changed. Blogging and FSharp still stay on, but I swapped in producing videos for Github contribution. Exercise is something I have set as a <a href="http://www.rahulpnath.com/blog/2016-recap/">goal for 2017</a>. To keep up with my exercise goal, I <a href="http://www.rahulpnath.com/blog/how-i-lost-13-kilos-in-one-and-half-months/">run three times a week and body weight exercises for another three days</a>.</p>

<p>Every day I have roughly three hours of &lsquo;me time&rsquo; from morning 4 am - 7 am. Waking up was difficult for a while but then I realized it&rsquo;s all about <a href="http://www.rahulpnath.com/blog/waking-up-early-is-all-about-waking-up-to-an-alarm/">waking up to an alarm</a>. The &lsquo;me time&rsquo; acts as the bottle into which I have to fit the Big Rocks into (if you watched the <a href="https://www.youtube.com/watch?v=0VNmIxkyHd8">video above</a>). I need to optimize the things in the best way possible to fit it all in there.</p>

<h3>Pomodoro Sized Tasks</h3>

<p><a href="https://en.wikipedia.org/wiki/Pomodoro_Technique">The Pomodoro Technique</a> is a time management technique that uses a timer to break down work into intervals, traditionally 25 minutes in length, separated by short breaks. These intervals are named Pomodoro.</p>

<p>Many times in the past I have tried Pomodoro Technique on and off but was never able to stick with it. From my previous <a href="http://www.rahulpnath.com/blog/morning_routine/">Morning Routine</a> you can easily tell that I had a high-level plan on what my MIT&rsquo;s are, but did not have any specific plans or goals on what to do about them. I also left room for flexibility to choose each day to pick up things randomly. Often it happened that I took more time to blog and got a bit of time for the other MIT&rsquo;s. Though I have <a href="https://www.youtube.com/watch?v=1YTjHWjepag">automated a lot of blogging activities</a>, writing a post often took more time. And since I was not tracking this I was always happy that I achieved some of my MIT&rsquo;s daily.</p>

<p>Once I started running things changed drastically. I struggled to keep up the with everything and concentrated on just blogging. It was because I started losing focus and started getting the feeling that it&rsquo;s too hard to fit in everything. I let this happen for over a month but was not very happy with it. Mid of February I sat down and dumped all my available time onto a paper and broke them up into Pomodoro sized intervals. So now I know how much time I have in a week for getting stuff done. I then broke down my big rocks s into smaller measurable pieces. For, e.g., with blogging, I have 4 Pomodoro of work - Creating a draft (high level), Refining the post body, Writing the introduction and conclusion and finally Adding in images, proofreading, and publishing. Similarly, I broke down publishing videos (happens throughout a month) and learning F#.</p>

<blockquote><p><em>Plans are nothing; Planning is everything</em></p></blockquote>

<p>I blocked out the time for running and exercise first, then I filled in with blogging tasks, followed by videos and then with FSharp learning. I also have a <a href="https://www.goodreads.com/user_challenges/8539430">reading goal for 2017</a> and found that I can best do that during my commute to work. Though this is not a full sized pomodoro interval, I have this tracked. Weekly Planning and Daily Review are two other activities that I have started following religiously. I do my daily planning right after my <a href="http://www.rahulpnath.com/blog/psm-learnings/">Daily Scrum</a> at work so that I get to capture anything work related as well.</p>

<p><img alt = "Pomodoro Plan" src="http://rahulpnath.com/images/pomodoro_plan.png" /></p>

<p>I was surprised how easily I could fit all of these into the time I have. Since the task breakdown above is guesstimates, I have some buffer time in my plan so that I can accommodate tasks that take more time or urgent tasks that come up during the week or the laziness that kicks in at times.</p>

<h3>Increasing Focus and Removing Distractions</h3>

<p>Social Media and emails were one of the biggest distractions for me. Even though I try to reduce the amount of time I spent for these, I often ended up taking a glance at those sites now and then. It often ended distracting and taking me completely off course from the task. I decided to stick to checking personal email only once a day and work emails twice a day. As for social networks (especially Facebook), I decided to keep that to one as well. I wanted to track this as well and see how well I was with it. I use <a href="https://play.google.com/store/apps/details?id=org.isoron.uhabits&amp;hl=en">Loop Habit Tracker</a> app on my phone for tracking these habits.</p>

<p><img class="center" alt="Loop Habit Tracker" src="http://rahulpnath.com/images/pomodoro_habit_tracker.png" /></p>

<p>For tracking pomodoro I use <a href="http://www.rahulpnath.com/blog/tomighty-a-pomodoro-timer/">Tomighty, a simple Pomodoro tool</a>. It just tracks the interval and does that thing well. The Pomodoro Technique lists down different techniques to manage interruptions and distractions. Managing interruptions is particularly useful when working out of an office and using pomodoro. During the short intervals, I usually take a walk around, fill water, stretch, etc.</p>

<p>I have only been following this for three weeks. But I find this effective and hope to stick on with it for a longer time. I no longer have to spend time deciding what to do as that&rsquo;s already decided. The only thing is to do it. Having taken the reasoning part of what to do out, I find doing things is easy and I procrastinate less.  The important thing is sticking with the process and believing in it. I am sure this is going to pass as well, but for now I happy and it works for me. How do you keep yourself productive? Sound off in the comments</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring to Composite Pattern]]></title>
    <link href="http://rahulpnath.com/blog/refactoring-to-composite-pattern/"/>
    <updated>2017-04-13T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/refactoring-to-composite-pattern</id>
    <content type="html"><![CDATA[<p>I often come across functions that do multiple things. Many times such functions have a common pattern where multiple sections within the function use the same parameters for calculations. The results from these different code sections within the function are either separated by conditionals (if, switch, etc.) or combined using various arithmetic operators. The most obvious refactoring in such scenarios is to move the code sections into different functions within the same class. Having it in separate functions keeps the code readable. But on closer observation, such functions can be moved into different classes, keeping each of these code sections as the only responsibility.</p>

<h3>Identifying the Refactoring</h3>

<p>Within a function when a similar pattern of code repeats, it could be refactored into multiple classes and composed to give the same functionality. Let us take a simple example of a function where we are validating an Account object based on different criteria. The various criteria end up as conditionals within the function. This function can soon get big and difficult to manage. It also makes it harder to test. If you are adding more validations to this class over a period you are violating the Open-Closed Principle (OCP), the O in <a href="http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod">SOLID</a>. Depending on the level of abstraction that we are looking at, the class also violates the Single Responsibility Principle(SRP), the S in SOLID. The function handles validations based on different criteria.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Validate</span><span class="p">(</span><span class="n">Account</span> <span class="n">account</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">account</span><span class="p">.</span><span class="n">Email</span><span class="p">))</span>
</span><span class='line'>        <span class="n">result</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;No email&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span> <span class="nf">if</span> <span class="p">(!</span><span class="n">IsValidEmailFormat</span><span class="p">(</span><span class="n">account</span><span class="p">.</span><span class="n">Email</span><span class="p">))</span>
</span><span class='line'>        <span class="n">result</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;Email not valid&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">account</span><span class="p">.</span><span class="n">BillingDetails</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="n">result</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;Billing Details does not exists&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The Composite Pattern</h3>

<p><a href="https://en.wikipedia.org/wiki/Composite_pattern">Composite pattern</a> is appropriate when the client ignores the difference between the composition of objects and individual objects. The pattern helps developers to maintain the complexity of the code and also separate out class responsibilities.</p>

<blockquote><p><em>Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly</em></p></blockquote>

<p><img alt="Composite Pattern" src="http://rahulpnath.com/images/composite_pattern.png" /></p>

<h3>Refactoring</h3>

<p>In the Account validation above, the function checks for an email and validates the format, checks for valid billing details, etc. The validations could also extend on to users attached to the account and check if there is at least one user, the user has email, phone number, etc. Each of these validations can be moved into separate classes and composed together in one class so that they are all executed when an account needs to be validated. You can see a tree like hierarchy forming here, and the actual validation is composed of all these validations</p>

<p><img alt="Account Validation hierarchy" src="http://rahulpnath.com/images/composite_pattern_validation.png" /></p>

<p>The actual C# code looks like this after the refactoring.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IValidateAccount</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Validate</span><span class="p">(</span><span class="n">Account</span> <span class="n">account</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">AccountValidators</span> <span class="p">:</span> <span class="n">IValidateAccount</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">readonly</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IValidateAccount</span><span class="p">&gt;</span> <span class="n">Validators</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">AccountValidators</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Validators</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">IValidateAccount</span><span class="p">&gt;()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="k">new</span> <span class="nf">AccountHasEmailValidator</span><span class="p">(),</span>
</span><span class='line'>          <span class="k">new</span> <span class="nf">AccountEmailIsValidValidator</span><span class="p">(),</span>
</span><span class='line'>          <span class="k">new</span> <span class="nf">AccountHasBillingDetailsValidator</span><span class="p">()</span>
</span><span class='line'>          <span class="p">...</span> <span class="c1">// Add more validators</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Validate</span><span class="p">(</span><span class="n">Account</span> <span class="n">account</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Validators</span><span class="p">.</span><span class="n">SelectMany</span><span class="p">(</span><span class="n">validator</span> <span class="p">=&gt;</span> <span class="n">validator</span><span class="p">.</span><span class="n">Validate</span><span class="p">(</span><span class="n">account</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">AccountHasEmailValidator</span> <span class="p">:</span> <span class="n">IValidateAccount</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Validate</span><span class="p">(</span><span class="n">Account</span> <span class="n">account</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">account</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">account</span><span class="p">.</span><span class="n">Email</span><span class="p">))</span>
</span><span class='line'>            <span class="k">yield</span> <span class="k">return</span> <span class="s">&quot;No email&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">AccountEmailIsValidValidator</span> <span class="p">:</span> <span class="n">IValidateAccount</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Validate</span><span class="p">(</span><span class="n">Account</span> <span class="n">account</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">account</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">account</span><span class="p">.</span><span class="n">Email</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="p">!</span><span class="n">IsValidEmail</span><span class="p">(</span><span class="n">account</span><span class="p">.</span><span class="n">Email</span><span class="p">))</span>
</span><span class='line'>            <span class="k">yield</span> <span class="k">return</span> <span class="s">&quot;Email not valid&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After the refactoring, we have separate classes for each of the validation rules. The <em>AccountValidators</em> class composes all the other validators and provides the same uniform interface for the consumers to validate an account. It calls on to all the Validators iteratively and invokes the Validate method on them. You can use Dependency Injection to inject in all validators to this class if you are not comfortable hard-wiring them. The IoC container can be setup using <a href="http://www.rahulpnath.com/blog/ioc-registration-by-convention/">registration by convention</a>, which prevents the needs for explicit registration for any new validators.</p>

<p>One other worry that I have seen common when moving to such a pattern is that - <em>We now have a lot more classes. Does that not affect the performance?</em>. If you are following SOLID principles to the core and want to maintain loose coupling in your code then creating more classes is something you cannot avoid. We do not want any
<a href="http://wiki.c2.com/?GodClass">God Classes</a> in our code and the first step towards it is to split them into different classes.</p>

<blockquote><p><em>If an Object Oriented language cannot handle the creation of many classes and objects then why should we be using it in the first place?</em></p>

<p>-<em><a href="https://vimeo.com/68378923">Big Object Graphs Up Front, Mark Seemann</a></em></p></blockquote>

<p>The composition can be complex conditions as in the case below. For, e.g., let&rsquo;s say we need to execute a different kind of algorithm to calculate based on a property.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">AccountCalculator</span> <span class="p">:</span> <span class="n">ICalculate</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">AccountCalculator</span><span class="p">(</span><span class="n">ICalculate</span> <span class="n">calculate1</span><span class="p">,</span> <span class="n">ICalculate</span> <span class="n">calculate2</span><span class="p">,</span> <span class="n">ICalculate</span> <span class="n">calculate3</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="nf">Calculate</span><span class="p">(</span><span class="n">Account</span> <span class="n">account</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">account</span><span class="p">.</span><span class="n">PropertyExists</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">calculate1</span><span class="p">.</span><span class="n">Calculate</span><span class="p">();</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">calculate2</span><span class="p">.</span><span class="n">Calculate</span><span class="p">()</span> <span class="p">+</span> <span class="n">calculate3</span><span class="p">.</span><span class="n">Calculate</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above composition makes it easy to test the composed parts and the composition separately. It also helps keep the tests simple and easy to understand. The code is separated into maintainable classes and each criteria can be modified independently.</p>

<p>Composite Pattern is a useful technique to keep code maintainable and readable. Identifying the pattern is a bit of a challenge, but the more you see it the more familiar you will be. Hope this helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Buffer - Smarter Social Sharing]]></title>
    <link href="http://rahulpnath.com/blog/buffer-smarter-social-sharing/"/>
    <updated>2017-04-11T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/buffer-smarter-social-sharing</id>
    <content type="html"><![CDATA[<p>Posts on this blog are published automatically on preset dates. I have created a custom workflow for this in Octopress, my blogging framework. If you are interested in the end to end workflow check out my <a href="https://www.youtube.com/watch?v=1YTjHWjepag">video on it</a>. Publishing to different social media was also one of the things that I wanted to automate in the whole workflow. So whenever a post is published to my blog, it also posts to the different social media (Twitter, Facebook, and LinkedIn).</p>

<p><a href="https://buffer.com/">Buffer</a> is a tool to manage all your social media networks and publish content to it at one. It is a &lsquo;<em>Write Once, Publish Everywhere</em>&rsquo; kind of service and works best for me. From the Buffer website or using <a href="https://buffer.com/extensions">browser extensions</a> posts can be manually buffered. A buffered post can be published immediately, scheduled to be shared next or scheduled for a particular date and time. You can have custom messages for each of the social network that you are sharing.</p>

<p><img src="http://rahulpnath.com/images/buffer_share.png" alt="Buffer Share" class="center" /></p>

<p>For automatic updates from my blog, I use <a href="https://buffer.com/guides/email">Buffer via Email</a>. With every buffer account, there is an associated email address. A post can be buffered by sending an email to this address in a specific format. So every time a new blog is published I send an email to my buffer account to publish immediately (@postnow). Automatic sharing posts also helps me reduce the time I spend on social networks; <a href="http://www.rahulpnath.com/blog/life-learnings-after-being-a-parent/">learning to disconnect</a></p>

<p>I am on their <a href="https://buffer.com/pricing">Free plan</a> at present. I have only less than ten posts scheduled at any point in time, and the plan provides all the features I need.</p>

<p>Hope this helps you manage your social media content.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Type in Your Native Indian Language - Setting up Indic Keyboard on Your Android Phone]]></title>
    <link href="http://rahulpnath.com/blog/how-to-setup-google-indic-keyboard-on-your-android-phone/"/>
    <updated>2017-04-06T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/how-to-setup-google-indic-keyboard-on-your-android-phone</id>
    <content type="html"><![CDATA[<p>I came across the <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.inputmethod.hindi&amp;hl=en">Google Indic Keyboard</a> recently and now enjoy writing in my native language. If you want to write in an Indian language on your Android device, then this post is for you</p>

<p>Google Indic Keyboard allows you to type messages, update on social networks or compose emails in your native language on your Android phone. At the time of writing the keyboard supports the following languages:</p>

<ul>
<li>English keyboard</li>
<li>Assamese keyboard (অসমীয়া)</li>
<li>Bengali keyboard (বাংলা)</li>
<li>Gujarati keyboard (ગુજરાતી)</li>
<li>Hindi keyboard (हिंदी)</li>
<li>Kannada keyboard (ಕನ್ನಡ)</li>
<li>Malayalam keyboard (മലയാളം)</li>
<li>Marathi keyboard (मराठी)</li>
<li>Odia keyboard (ଓଡ଼ିଆ)</li>
<li>Punjabi keyboard (ਪੰਜਾਬੀ)</li>
<li>Tamil keyboard (தமிழ்)</li>
<li>Telugu keyboard (తెలుగు)</li>
</ul>


<p>Setting up the keyboard could be a bit confusing as changing keyboards is not something that we often do. I ended up spending some time walking through the setup for some of friends and family.</p>

<h3>Setting Up</h3>

<ol>
<li><p>In Google Play Store search for [Google Indic Keyboard]. If you have not installed/updated before, tap on Install or Update to get the latest application version.</p>

<p> <img alt="Play Store" src="http://rahulpnath.com/images/indicKeyboard_playstore.png"/></p></li>
<li><p>Once installed go to any of the apps where you can open the keyboard. On the bottom right corner tap the icon to change the keyboard.</p>

<p> <img src="http://rahulpnath.com/images/indicKeyboard_changeKeyboard.png" alt="Change Keyboard Icon" /></p></li>
<li><p>From the window that pops up select &ldquo;Choose Keyboards.&rdquo;</p>

<p> <img src="http://rahulpnath.com/images/indicKeyboard_switch.png" alt ="Choose Keyboards" /></p></li>
<li><p>Enable <em>Google Indic Keyboard (English and Indic Languages)</em> listed in the list of available keyboards.</p>

<p> <img src="http://rahulpnath.com/images/indicKeyboard_enableIndicKeyboard.png" alt="Enable Google Indic Keyboard" /></p></li>
<li><p>Repeat step 2 and open up the Change Keyboard window. Select Google Indic Keyboard from the list.</p>

<p> <img src="http://rahulpnath.com/images/indicKeyboard_selected.png" alt="Select Indic Keyboard" /></p></li>
<li><p>The keyboard is now set as Google Indic Keyboard with its default language. To choose a language of your choice, select the Indian Language icon on top left.</p>

<p> <img src="http://rahulpnath.com/images/indicKeyboard_default.png" alt="Google Indic Keyboard Default" /></p></li>
<li><p>From the window that pops up select the language of your choice. For me, it&rsquo;s <a href="https://en.wikipedia.org/wiki/Malayalam">Malayalam</a>.</p>

<p> <img src="http://rahulpnath.com/images/indicKeyboard_selectLanguage.png" alt="Indic Keyboard Choose Language" /></p></li>
<li><p>Google Indic Keyboard supports different layout.</p>

<ul>
<li>Native Keyboard: Type directly in your native language.</li>
<li>Transliteration Mode: Get output in your native language by spelling out the pronunciation using English letters(For, e.g., Malayalam -> മലയാളം)</li>
<li>Handwriting mode (currently available for Hindi only) - Write directly on your phone screen.</li>
<li>Hinglish mode - If you choose “Hindi” as an input language, the English keyboard will suggest both English and Hinglish terms.</li>
</ul>


<p> <img src="http://rahulpnath.com/images/indicKeyboard_chooseLanguageMode.png" alt="Indic Keyboard Layout" /></p></li>
<li><p>Type away in your native language :)</p>

<p> <img src="http://rahulpnath.com/images/indicKeyboard_malayalam.png" alt="Indic Keyboard Native Language" /></p></li>
</ol>


<p>The transliteration mode is impressive and intuitive. Its fits in perfectly with how I was earlier using my messaging apps; native language spelled out using English letters. The better thing now is that it automatically converts into my mother tongue. The Indic keyboard brings back the forgotten love to my language. Thank you, Google!.</p>
]]></content>
  </entry>
  
</feed>
