<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rahul Nath]]></title>
  <link href="http://rahulpnath.com/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2017-03-24T00:02:32+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Rescue Time - Track Your Time]]></title>
    <link href="http://rahulpnath.com/blog/rescue-time-track-your-time/"/>
    <updated>2017-03-23T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/rescue-time-track-your-time</id>
    <content type="html"><![CDATA[<p><img alt="Rescue Time - My dashboard for March,2017" src="http://rahulpnath.com/images/rescuetime.png" /></p>

<p>Tracking is essential for measuring progress. Depending on your area of focus tracking tools differ. If it is a time-based activity that you are tracking a simple watch can suffice the need. But this can soon become an overhead. <a href="https://www.rescuetime.com/">Rescue Time</a> helps track time spent on a computer or mobile devices.</p>

<blockquote><p><em>Rescue Time is a  personal analytics service that shows you how you spend your time and provides tools to help you be more productive.</em></p></blockquote>

<p>Rescue time runs in the background and helps you track the applications and websites that you use. Most of the applications are categorized automatically; However, it also allows manual categorization. Rescue Time lets you edit an activity and assign it to various categories and set productivity levels. So if you are spending more time on an application configured as <em>very productive</em> then your overall productivity pulse is higher for the day.</p>

<p><img alt="Rescue Time - Edit Activity" src="http://rahulpnath.com/images/rescuetime_edit_activity.png" /></p>

<p>Once you have your time tracked you can then adapt yourself to be more productive. Various reports are provided to visualize the data collected. The <a href="https://www.rescuetime.com/rescuetime-pro">premium version</a> offers a lot more features to help improve productivity. I am currently on the Free Plan. Rescue Time helps inspect your current behaviors and patterns at work. Once you have the details, you can understand where your time is spent and improve on it as required. Rescue Time is available for <a href="https://www.rescuetime.com/get_rescuetime">computer and mobile devices</a>. Hope this helps track your time and become more productive!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Problems with Known Exceptions and Ignoring It]]></title>
    <link href="http://rahulpnath.com/blog/the-problems-with-known-exception-and-ignoring-it/"/>
    <updated>2017-03-21T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/the-problems-with-known-exception-and-ignoring-it</id>
    <content type="html"><![CDATA[<p>&ldquo;<em>Oh yes! That is an expected error. It is because…</em>&rdquo;.</p>

<p>How many times have you given that explanation yourself or heard the other developer tell that? Known errors or exceptions are common in applications and us developers find ways to live with such errors. At times when the number of such errors grows it becomes a problem directly or indirectly to the business. These known errors could either be exceptions in application logs, failed messages (commands/events) in a <a href="https://en.wikipedia.org/wiki/Event-driven_architecture">message based architecture</a>, alert popups in Windows client applications, etc.</p>

<p><img alt="Known Errors" src="http://rahulpnath.com/images/known_errors.png" /></p>

<p>We should try and keep known errors and exception count close to zero. Below are some of the problems that can happen by ignoring it over a period.</p>

<h4><strong>Business Value</strong></h4>

<p>Since the errors are known to us, we train ourselves or even the users to ignore them. It is easy to justify that fixing them does not have any business value as there is no direct impact. This assumption need not be true. If a piece of code has no value then why is it there in the first place? Possibly it is not having any visible effects at present but might be having an impact at a later point in time. It could also be that it is not affecting the data consistency of your system, but is a problem for an external system. There can be business flows that are written at a later point of time not being aware of this known error. Some developer time gets lost when glancing over such errors or messages in the log which directly equates to money for the business.</p>

<h4><strong>Important Errors Missed</strong></h4>

<p>If there are a lot of such known errors, it is easy for new or important ones to get missed or ignored. Depending on the frequency of the known error, it can end up flooding the logs. The logs start to get overwhelming to monitor or trace for other issues with lots of such known errors. The natural tendency for people when they find something overwhelming is to ignore it. I worked on a system which had over 250 failed messages coming to the error queue daily. It was overwhelming to monitor them and was soon getting ignored. Important errors were getting missed and often ended up as support requests for the application. Such errors otherwise could have been proactively handled, giving the end user more confidence.</p>

<h4><strong>Lower Perceived Stability</strong></h4>

<p>The overall perceived stability of the system comes down as more and more such errors happen. It is applicable both for the users and developers. When errors no longer get monitored or tracked, critical errors gets ignored. Users have to resort to other means like support requests for the errors they face. For users who are new to the system, it might take a while to get used to the known errors. These errors decrease the trust they have in the system and soon starts suspecting everything as an issue or a problem.</p>

<p>Seeing more and more of such errors does not leave a positive impact on the developers. It&rsquo;s possible that developers loose interest to work on an unstable system and start looking for a change. It is also a challenge when new members join the team. It takes time for them to get used to errors and exceptions and to learn to ignore them.</p>

<h4><strong>Stereotyping Exceptions</strong></h4>

<p>Errors of a particular type can get stereotyped together, and get ignored mistaking it for one that is already known. It is easy for different &lsquo;<em>object null reference exception</em>&rsquo; error messages to be treated as a particular error whereas it could be failing for various reasons. At one of my clients, we had a specific message type failing with the null reference error. We had identified the reason for one such message and found that it is not causing &lsquo;<em>any direct business impact</em>&rsquo; and can be ignored. The message was failing as one of the properties on the message was alphanumeric while the code expected numeric. The simple fix in the code would be to validate it, but since this was not causing any business impact it was ignored, and messages of that type kept piling up. Until later where we found that there were other message formats of the same message type failing which was for a different reason. And those messages were causing a loss of revenue to the business. But since we were stereotyping the error messages of the particular type to the one that we found invalid and not having a business impact all of such messages were ignored. The stereotyping resulted in the important message getting ignored.</p>

<h4><strong>Maintaining a Known Bugs Database</strong></h4>

<p>When having a large number of such errors, it is important to document a list of such errors.It forces us to a new document and also comes with the responsibility of maintaining it. For any new developers or users joining the system, they need to go through the documentation to verify if it is a known error or not. Internalizing these errors might take some time, and critical errors can get missed during this time. Any such document needs to be kept current and up to date as and when new errors are found or more details found for older ones. This is not the best of places where a developers time is spent.</p>

<h4><strong>Count Keeps Increasing</strong></h4>

<p>If the count of such errors is not monitored and not valued for the probability of the number of error messages increasing is higher. New errors getting introduced will not be noticed, and even when noticed it becomes acceptable. <em>We already have a lot of them, so it is fine.</em> It sets a wrong goal for the team and can soon become unmanageable.</p>

<h4><strong>New Business Flow Assuming Exception</strong>s</h4>

<p>Since the exceptions are so used to, it is highly possible that we set that as an expectation. New business flows come up expecting a certain kind of exception to be thrown or assuming a particular type of message will not get processed. Since we are so used to the fact that it happens, we take it for granted and start coding against it. It might be the last thing that happens on a project, but believe me, it happens!. Such code becomes harder to maintain and might not work once the actual exception gets fixed.</p>

<p>Ignoring exceptions and getting around to live with it can be more costly over a longer period. The further we delay action on such errors the higher the cost involved. Even though there is no immediate or direct business value seen from fixing such errors, we saw that on a longer run it could have a great impact. So try not to live with such errors but instead prioritize them with the work your team is doing and get it fixed. A fix might not always be an extra null check or a conditional to avoid the error. It might seem the easier approach to reducing the errors but will soon become a different problem. Understand the business and explore into what is causing the error. Do you have any known exceptions in the application you are working? What are you doing about it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Tomighty - A Pomodoro Timer]]></title>
    <link href="http://rahulpnath.com/blog/tomighty-a-pomodoro-timer/"/>
    <updated>2017-03-16T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/tomighty-a-pomodoro-timer</id>
    <content type="html"><![CDATA[<p><a href="http://tomighty.org/"><img alt="Tomighty, Pomodoro Timer" src="http://rahulpnath.com/images/tomighty.png" /></a></p>

<p>Over the past couple of weeks, I have been trying to improve my focus while working. With <a href="http://www.rahulpnath.com/blog/how-i-lost-13-kilos-in-one-and-half-months/">running (3 * 1.5 hours a week) and bodyweight training (3 * 30 minutes a week)</a> taking a significant part of my <a href="http://www.rahulpnath.com/blog/morning_routine/">morning routine</a>, I have less time for <a href="http://www.rahulpnath.com/blog/2016-recap/">blogging, learning, and videos</a>. Though I have known <a href="https://en.wikipedia.org/wiki/Pomodoro_Technique">The Pomodoro Technique</a> for a long time, I never practiced it regularly. With less time and more things to get done, I badly had to do something to get back on track with everything and thought of giving it a try.</p>

<blockquote><p><em>The Pomodoro Technique is a time management technique that uses a timer to break down work into intervals, traditionally 25 minutes in length, separated by short breaks. These intervals are named Pomodoro</em></p></blockquote>

<p>Initially, I was looking at apps that can integrate with <a href="http://www.rahulpnath.com/blog/todoist-manage-your-todo-list/">Todoist</a>, my task management tool. There are a lot of <a href="https://support.todoist.com/hc/en-us/articles/210762349-Pomodoro-with-Todoist">pomodoro apps that integrate with Todoist</a>, but I found all of them an overkill.
<a href="http://tomighty.org/"><strong>Tomighty</strong></a> is a simple Pomodoro timer that just tracks time and settings for the Pomodoro interval and long and short breaks. It hides away well in the Notification area of the taskbar and shows the amount of time left in the current interval. It plays sounds when an interval starts and ends. You can interrupt a Pomodoro session and restart it if required. That is all that you need from a timer to keep up with the Pomodoro technique.</p>

<p><em>If you are on a high DPI machine running Windows, the UI might not scale well. There is a <a href="https://github.com/tomighty/tomighty/issues/115">workaround</a> for this.</em></p>

<p>Sticking to the Pomodoro Technique has been working well for me, and I am able to focus better on the task at hand. I am still exploring the technique and trying to improve on it. Do you use Pomodoro Technique? If you are new to Pomodoro Technique and want to learn more check out the book, <a href="http://amzn.to/2nCSZW1">The Pomodoro Technique</a>, by Francesco Cirillo, the creator of the technique.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learnings from The Professional Scrum Master (PSM) Course]]></title>
    <link href="http://rahulpnath.com/blog/psm-learnings/"/>
    <updated>2017-03-15T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/psm-learnings</id>
    <content type="html"><![CDATA[<p>Last month I attended the Professional Scrum Master (PSM) training. <a href="https://twitter.com/rbanks54">Richard Banks</a> was the training instructor who also happens to be my <a href="http://www.rahulpnath.com/blog/finding-a-job-abroad/">colleague at Readify</a>. It is a two days training and was a great experience for me. It changed my perception towards Scrum. Before the training, I was not that fascinated about Scrum and often argued against it citing that it&rsquo;s development practices that we need to uphold more and not Scrum. After the training, I have still not changed on the latter part but have changed my perception towards Scrum. Here are some of the key takeaways for me from the training.</p>

<blockquote><p><strong>TLDR;</strong></p>

<ul>
<li>Stick to the Process</li>
<li>Make Daily Scrum (a.k.a Standup) effective by setting mini goals</li>
<li>Understand the different Roles and imbibe the responsibilities</li>
<li>Have a well-defined Definition for Done</li>
<li>Deliver value in every sprint</li>
<li>Foster team collaboration and openness</li>
<li>Scrum is not the Silver Bullet. Other development practices must be followed in parallel.</li>
</ul>
</blockquote>

<p>If you are completely new to Scrum or not so familiar with the different terms used I recommend that you read <a href="http://www.scrumguides.org/scrum-guide.html">The Scrum Guide</a>. Don&rsquo;t refrain from clicking that link thinking it is a long book. It is a short one, and you can finish it in less than an hour. It is an hour well spent!</p>

<p><img alt="Scrum Framework" src="http://rahulpnath.com/images/scrum_framework.png" /></p>

<h3>Sticking to the Process</h3>

<p>Everyone who was attending the training was already using Scrum, <em>but..</em> This is one of the common things with mostly everything and specifically with Scrum. People take parts of it and change the system to suit their needs. This is fine as long as you have tried the original process long enough to understand the pros and cons of it.</p>

<blockquote><p><em>Tweaking the process to suit existing practices as soon as you start with a new process is just <strong>resistance to change</strong></em></p></blockquote>

<p>Like Uncle Bob Martin says in clean code, dedicate yourself to the process and follow it religiously until you have mastered the process. You can start modifying the process or finding new ways once you have reached that state. But till then follow it religiously if you want to see any benefit.</p>

<blockquote><p><em>Martial artists do not all agree about the best martial art, or the best technique within a martial art. Often master martial artists will form their own schools of thought and gather students to learn from them. So we see Gracie Jiu Jistu, founded and taught by the Gracie family in Brazil. We see Hakkoryu Jiu Jistu, founded and taught by Okuyama Ryuho in Tokyo. We see Jeet Kune Do, founded and taught by Bruce Lee in the United States.</em></p>

<p><em>Students of these approaches immerse themselves in the teachings of the founder.They dedicate themselves to learn what that particular master teaches, often to the exclusion of any other master’s teaching. Later, as the students grow in their art, they may become the student of a different master so they can broaden their knowledge and practice. Some eventually go on to refine their skills, discovering new techniques and founding their own schools. None of these different schools is absolutely right. Yet within a particular school we act as though the teachings and techniques are right. After all, there is a right way to practice Hakkoryu Jiu Jitsu, or Jeet Kune Do. But this rightness within a school does not invalidate the teachings of a different school.</em></p>

<p><em>-Uncle Bob Martin, <a href="http://amzn.to/2kCHgVz">Clean Code</a></em></p></blockquote>

<h3>Effectiveness of Daily Scrum</h3>

<p>Daily Scrum or otherwise popular as Standup meetings are <strong>not about standing up to give status updates</strong>. The intent of the Daily Scrum is for the development team to get together and work out whatever is required to get closer to the goal set for the sprint. Standing up improves your activity levels and interaction levels. So it&rsquo;s recommended to stand up. The primary intent of the fifteen minutes time-boxed event (it can take no more than the allotted time) is to look at how we tracked on with our &lsquo;mini goals&rsquo; from last daily scrum and setting new &lsquo;mini goals&rsquo; till next stand up. Also, capture any impediments or blockers and make sure that there are assigned people following up on it. The daily scrum necessarily needs not be the first thing in the morning but is usually preferred. Currently, I am on an evening 4 pm daily scrum.</p>

<h3>Roles and Their Importance</h3>

<p>Understanding of the different roles in Scrum is necessary. A scrum team consists of</p>

<ul>
<li>The Product Owner</li>
<li>Scrum Master</li>
<li>Development team</li>
</ul>


<blockquote><p><em>Scrum Teams are self-organizing and cross-functional. Self-organizing teams choose how best to accomplish their work, rather than being directed by others outside the team. Cross-functional teams have all competencies needed to accomplish the work without depending on others not part of the team. The team model in Scrum is designed to optimize flexibility, creativity, and productivity.</em></p></blockquote>

<p>Most important is to understand the responsibilities of each role and adhere to it as much as possible. Remember Sticking to the Process is important. Each of the roles must have the courage and openness to act according to their role responsibilities.</p>

<h3>Definition of Done</h3>

<p>Having a prior agreed on Definition of Done is important to decide when a piece of work is done. Having a common understanding of the definition of done ensures that we do not ship half-baked features. It also provides a guide for non-functional features, which often gets sidelined or missed and later becomes a show-stopper.</p>

<blockquote><p><em>As Scrum Teams mature, it is expected that their definitions of “Done” will expand to include more stringent criteria for higher quality. Any one product or system should have a definition of “Done” that is a standard for any work done on it.</em></p></blockquote>

<h3>Delivering Value</h3>

<p>One of the golden rules is that every sprint must produce an increment that adds some business value. It need not be released to production, but it must be production ready. The Product Owner makes release decisions.</p>

<blockquote><p><em>The Increment is the sum of all the Product Backlog items completed during a Sprint and the value of the increments of all previous Sprints</em></p></blockquote>

<p>This hints that having sprints solely for handling Technical debts, Refactoring, Project setup, Infrastructure setup, etc. are not recommended.</p>

<h3>Team collaboration and Effectiveness</h3>

<p>The process heavily depends on the people encompassing The Scrum Team. So it is important to have a good rapport amongst the team members. The team members should be comfortable and open with each other. The team needs to be self-organizing. When starting with Scrum, this might not be the case, and the team must recognize this and work towards self-organizing. The Scrum Master must encourage and guide the team to reach that state of independence.</p>

<blockquote><p><em>When the values of commitment, courage, focus, openness, and respect are embodied and lived by the Scrum Team, the Scrum pillars of <strong>transparency, inspection, and adaptation</strong> come to life and build trust for everyone.</em></p></blockquote>

<p><img alt="Scrum Values" src="http://rahulpnath.com/images/scrum_values.png" /></p>

<p>The Scrum Guide calls out the above five core values that a team should demonstrate for the effectiveness of the framework. The Scrum team should constantly try to demonstrate these core values and try to improve on this.</p>

<h3>Not the Silver Bullet for Development</h3>

<blockquote><p><em>There&rsquo;s a mess I&rsquo;ve heard about with quite a few projects recently. It works out like this:</em></p>

<ul>
<li><em>They want to use an agile process, and pick Scrum</em></li>
<li><em>They adopt the Scrum practices, and maybe even the principles</em></li>
<li><em>After a while progress is slow because the code base is a mess</em></li>
</ul>


<p> <em>-Martin Fowler, <a href="https://martinfowler.com/bliki/FlaccidScrum.html">Flaccid Scrum</a></em></p></blockquote>

<p>If you are looking up to Scrum to solve the problems with the quality of code you are delivering, you are with the wrong process. Scrum does not talk anything specific about software development and related practices. <a href="https://en.wikipedia.org/wiki/Extreme_programming">Extreme Programming</a> is one process that is specific to coding and software development and is also a type of agile software development. It talks about the various development practices lays down strict rules <a href="http://www.extremeprogramming.org/rules.html">related to software development</a>. Again if you decide to follow this do that religiously - Sticking to the Process matters. Picking up only certain aspects of different school of thoughts might not provide the desired output always. <a href="http://www.rahulpnath.com/blog/is-code-coverage-a-lie/">Code Coverage</a> if one such practice that is picked up in isolation and seen to produce not much value.</p>

<p>Given these new insights, I now feel that following a proven process framework, like Scrum will help a team achieve its goals. The core values that Scrum lays down is important for any team. From my personal experience, the reason why I used to look down upon Scrum is that it was not practiced the way it was laid out. Like in software development premature optimization of the process is likely to give less value. The training provided a lot of new insights and helped me to have a better understanding of the Scrum process framework. I did the <a href="https://www.scrum.org/professional-scrum-certifications/professional-scrum-master-i-assessment">PSM I</a> and <a href="https://www.scrum.org/professional-scrum-certifications/professional-scrum-product-owner-i-assessment">PSPO I</a> (I had attended this training last year but never took the test until now) assessment and got certified.  Are you using Scrum, what are your experiences?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Track Current File in Visual Studio Solution Explorer]]></title>
    <link href="http://rahulpnath.com/blog/track-current-file-in-visual-studio-solution-explorer/"/>
    <updated>2017-03-08T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/track-current-file-in-visual-studio-solution-explorer</id>
    <content type="html"><![CDATA[<p>While working on large codebases, I want my Solution Explorer to be synchronized with the current working file. With the solution explorer in sync, it makes navigating to other related files, adding new classes in the same location, renaming files, etc. faster.</p>

<p><img alt="Track Active Item in Solution Explorer, Visual Studio" src="http://rahulpnath.com/images/visualstudio_trackActiveItem.png" /></p>

<p>The setting to keep the items in sync is configurable in Visual Studio and is turned off by default. You can enable this by checking the &lsquo;<strong><em>Track Active Item in Solution Explorer</em></strong>&rsquo; under <em>Options -> Projects and Solutions -> General</em>. You can navigate there quickly using <a href="http://www.rahulpnath.com/blog/quick-launch-in-visual-studio/">Visual Studio Quick Launch (Ctrl + Q)</a>. Just type &lsquo;<em>Track active</em>&rsquo; and you will get the quick link to the setting. Keep it checked, and off you go, the solution explorer and the current file will be in sync.</p>

<p>PS: Visual Studio 2017 is now available.<a href="https://www.visualstudio.com/downloads/">Get it</a> if you have not already!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Populating Data for Tests]]></title>
    <link href="http://rahulpnath.com/blog/populating-data-for-tests/"/>
    <updated>2017-03-07T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/populating-data-for-tests</id>
    <content type="html"><![CDATA[<p>Populating data for tests is the section of the test that usually ends up making tests more coupled with the code that it is testing. Coupling makes tests more fragile and refactoring code harder because of breaking tests. We should try to avoid coupling with the implementation details when writing tests. Let us see a few options that we have to populate test data and constructing object graphs (chain of objects branched off from the root object). I use <a href="https://xunit.github.io/">xUnit.net</a> as my test framework, but you can use these techniques in your choice of framework.</p>

<p><a href="http://xunitpatterns.com/Data-Driven%20Test.html" class="center" title="Image from xUnit Test Patterns"><img class="center" alt="Populating Test Data" src="http://rahulpnath.com/images\test_data.gif" /></a></p>

<p>Let&rsquo;s start with some simple tests on a Customer class shown below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Customer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">Guid</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">FullName</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">FirstName</span> <span class="p">+</span> <span class="s">&quot; &quot;</span> <span class="p">+</span> <span class="n">LastName</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">Address</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s say we need to test that the FullName property returns as expected. We will use a <em>Theory</em> type tests for testing different combinations of first and last name. xUnit.net includes support for two different major types of unit tests: facts and theories</p>

<blockquote><p><em>Facts are tests which are always true. They test invariant conditions.</em></p>

<p><em>Theories are tests which are only true for a particular set of data.</em></p></blockquote>

<p>Theories allow us to create parameterized tests with which we can run a given test with different parameter options. Like in this example we need to test the Customer class with different set of First and Last Name combinations. As you can see below the test is attributed with Theory Attribute, and we use the InlineData attribute to pass static values to the test. Using these parameters we are now able to test for different combinations of first and last names. The test populates only the required properties on Customer object for testing FullName.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Theory]</span>
</span><span class='line'><span class="na">[InlineData(&quot;Adobe&quot;, &quot;Photoshop&quot;, &quot;Adobe Photoshop&quot;)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;Visual&quot;, &quot;Studio&quot;, &quot;Visual Studio&quot;)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;Rode&quot;, &quot;Podcaster&quot;, &quot;Rode Podcaster&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">CustomerFullNameReturnsExpected</span><span class="p">(</span><span class="kt">string</span> <span class="n">firstName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">lastName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">expected</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Fixture setup</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">customer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Customer</span><span class="p">()</span> <span class="p">{</span> <span class="n">FirstName</span> <span class="p">=</span> <span class="n">firstName</span><span class="p">,</span> <span class="n">LastName</span> <span class="p">=</span> <span class="n">lastName</span> <span class="p">};</span>
</span><span class='line'>    <span class="c1">// Exercise system</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">actual</span> <span class="p">=</span> <span class="n">customer</span><span class="p">.</span><span class="n">FullName</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Verify outcome</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">actual</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Teardown</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><em>Tests help refine the public API as they are the first consumers</em></p></blockquote>

<p>The tests above acts as a clue indicating that the three properties - FirstName, LastName, FullName are related and go hand-in-hand. These tests are a strong indication that these properties can be grouped together into a class and possibly tested separately. We can extract these properties into a <a href="http://www.rahulpnath.com/blog/thinking-beyond-primitive-values-value-objects/">Value Object</a> for e.g. Name. I will not go into the implementation details of that, and I hope you can do that you own.</p>

<p>The above tests still have a high dependency on the code that it is testing - <strong><em>the constructor</em></strong>. Imagine if we had a lot of such tests that constructs the Consumer class inline in the setup phase. All tests will break if the class constructor changes. We saw in the <a href="http://www.rahulpnath.com/blog/refactoring-test-code-removing-constructor-dependency/">refactoring to remove constructor dependency</a> how to remove such dependencies and make the tests independent of the constructor dependencies.  We can introduce Object Mother or Test Data Builder pattern as mentioned in the article. Optimizing further we can also use <a href="https://github.com/AutoFixture/AutoFixture">AutoFixture</a> to generate test data. Moving into these patterns or AutoFixture brings in an added benefit as well; the rest of properties on the Customer class also gets populated by default.</p>

<h3>Explicitly Setting Properties</h3>

<p>By introducing AutoFixture, we no longer need to create the Customer object explicitly. We can use the Fixture class generate a Customer class for us. Using AutoFixture, this can be achieved in at least two ways (I am not sure if there are more ways of doing this).</p>

<figure class='code'><figcaption><span>Using Fixture class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Theory]</span>
</span><span class='line'><span class="na">[InlineData(&quot;Adobe&quot;, &quot;Photoshop&quot;, &quot;Adobe Photoshop&quot;)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;Visual&quot;, &quot;Studio&quot;, &quot;Visual Studio&quot;)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;Rode&quot;, &quot;Podcaster&quot;, &quot;Rode Podcaster&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">CustomerFullNameReturnsExpected</span><span class="p">(</span><span class="kt">string</span> <span class="n">firstName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">lastName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">expected</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Fixture setup</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">fixture</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Fixture</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">customer</span> <span class="p">=</span> <span class="n">fixture</span><span class="p">.</span><span class="n">Build</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">With</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">FirstName</span><span class="p">,</span> <span class="n">firstName</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">With</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">LastName</span><span class="p">,</span> <span class="n">lastName</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Create</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// Exercise system</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">actual</span> <span class="p">=</span> <span class="n">customer</span><span class="p">.</span><span class="n">FullName</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Verify outcome</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">actual</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Teardown</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Using Injected Object</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Theory]</span>
</span><span class='line'><span class="na">[InlineAutoData(&quot;Adobe&quot;, &quot;Photoshop&quot;, &quot;Adobe Photoshop&quot;)]</span>
</span><span class='line'><span class="na">[InlineAutoData(&quot;Visual&quot;, &quot;Studio&quot;, &quot;Visual Studio&quot;)]</span>
</span><span class='line'><span class="na">[InlineAutoData(&quot;Rode&quot;, &quot;Podcaster&quot;, &quot;Rode Podcaster&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">CustomerFullNameReturnsExpected</span><span class="p">(</span><span class="kt">string</span> <span class="n">firstName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">lastName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">expected</span><span class="p">,</span> <span class="n">Customer</span> <span class="n">customer</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Fixture setup</span>
</span><span class='line'>    <span class="n">customer</span><span class="p">.</span><span class="n">FirstName</span> <span class="p">=</span> <span class="n">firstName</span><span class="p">;</span>
</span><span class='line'>    <span class="n">customer</span><span class="p">.</span><span class="n">LastName</span> <span class="p">=</span> <span class="n">lastName</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Exercise system</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">actual</span> <span class="p">=</span> <span class="n">customer</span><span class="p">.</span><span class="n">FullName</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Verify outcome</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">actual</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Teardown</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In both cases, we explicitly set the required properties. The above test is similar to the previous test that we wrote without AutoFixture. But no longer are we dependent on the constructor. In the second way of using AutoFixture I used <em>InlineAutoData</em> attribute, that is part of <em>Ploeh.AutoFixture.Xunit2</em>. This attribute automatically does the fixture initialization and injects the Customer object for us. For all the values that it can match from the inline parameter list, it uses the provided values. It starts generating random values once all the parameters passed inline are used. In this case, only Customer object is created by AutoFixture.</p>

<h3>AutoFixture and Immutable types</h3>

<p>When using immutable types or properties with private setters, we cannot set the property value after it is created.</p>

<blockquote><p><em>AutoFixture was originally build as a tool for Test-Driven Development (TDD), and TDD is all about feedback. In the spirit of GOOS, you should listen to your tests. If the tests are hard to write, you should consider your API design. AutoFixture tends to amplify that sort of feedback.</em></p>

<p>-<em><a href="http://stackoverflow.com/a/20816487/1948745">Mark Seemann</a> (creator of AutoFixture)</em></p></blockquote>

<p>In these cases, the suggested approach is something closer to the manual <a href="http://www.natpryce.com/articles/000714.html">Test Data Builder</a> we saw in the <a href="http://www.rahulpnath.com/blog/refactoring-test-code-removing-constructor-dependency/">refactoring example</a>. We can either have an explicit test data builder class or define extension methods on the immutable type such that it changes just the specified property and returns all other values same, as shown below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Name</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">readonly</span> <span class="kt">string</span> <span class="n">FirstName</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">readonly</span> <span class="kt">string</span> <span class="n">LastName</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">FullName</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">FirstName</span> <span class="p">+</span> <span class="s">&quot; &quot;</span> <span class="p">+</span> <span class="n">LastName</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Name</span><span class="p">(</span><span class="kt">string</span> <span class="n">firstName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">lastName</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Enforce parameter constraints</span>
</span><span class='line'>        <span class="n">FirstName</span> <span class="p">=</span> <span class="n">firstName</span><span class="p">;</span>
</span><span class='line'>        <span class="n">LastName</span> <span class="p">=</span> <span class="n">lastName</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">Name</span> <span class="nf">WithFirstName</span><span class="p">(</span><span class="kt">string</span> <span class="n">firstName</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">Name</span><span class="p">(</span><span class="n">firstName</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">LastName</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As shown the <em>WithFirstName</em> method returns a new Name class with just the first name changed. Again we do not need these <em>WithXXX</em> methods for all the properties. Only when there is a need to change any of the property values as part of the requirement do we need to introduce such methods and even test it. This again drives to the above point of using tests to guide the API design, from the feedback.</p>

<h3>Customization</h3>

<p>In cases where we have validations in constructor to hold the class constraints, we cannot rely on the random values generated by AutoFixture. For example.
- The string should be at least ten characters in length for a Name class
- Start date should be less than the End date for a date range class</p>

<p>Without any custom code if we are to rely on AutoFixture to generate us, such classes, the tests will not be predictable. Depending on the random value that AutoFixture generates it might create a valid instance or throw an exception. To make this consistent, we can add Customization to ensure predictability.</p>

<p>For the DateRange class below we can add the following Customization.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">DateRange</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">readonly</span> <span class="n">DateTime</span> <span class="n">EndDate</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">readonly</span> <span class="n">DateTime</span> <span class="n">StartDate</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">DateRange</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">startDate</span><span class="p">,</span> <span class="n">DateTime</span> <span class="n">endDate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">endDate</span> <span class="p">&lt;</span> <span class="n">startDate</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">&quot;End date cannot be less than the start date&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">StartDate</span> <span class="p">=</span> <span class="n">startDate</span><span class="p">;</span>
</span><span class='line'>        <span class="n">EndDate</span> <span class="p">=</span> <span class="n">endDate</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>DateRange Customization</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">DateRangeCustomization</span> <span class="p">:</span> <span class="n">ICustomization</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Customize</span><span class="p">(</span><span class="n">IFixture</span> <span class="n">fixture</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">fixture</span><span class="p">.</span><span class="n">Customizations</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">DateRangeSpecimenBuilder</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">DateRangeSpecimenBuilder</span> <span class="p">:</span> <span class="n">ISpecimenBuilder</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">object</span> <span class="nf">Create</span><span class="p">(</span><span class="kt">object</span> <span class="n">request</span><span class="p">,</span> <span class="n">ISpecimenContext</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">requestAsType</span> <span class="p">=</span> <span class="n">request</span> <span class="k">as</span> <span class="n">Type</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">DateRange</span><span class="p">).</span><span class="n">Equals</span><span class="p">(</span><span class="n">requestAsType</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">times</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">CreateMany</span><span class="p">&lt;</span><span class="n">DateTime</span><span class="p">&gt;();</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">DateRange</span><span class="p">(</span><span class="n">times</span><span class="p">.</span><span class="n">Min</span><span class="p">(),</span> <span class="n">times</span><span class="p">.</span><span class="n">Max</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">NoSpecimen</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The customization gets invoked every time a DateRange object is requested using the fixture. It then invokes this custom code that we have added in and creates a valid DateRange object. For the tests use the customization as part of the fixture either using a custom data attribute or explicitly adding the customization into the Fixture class.</p>

<h3>Mocking behavior</h3>

<p><a href="http://xunitpatterns.com/Mock%20Object.html">Mock Objects</a> is a popular way to unit test classes in isolation. For the external dependencies that a <a href="http://xunitpatterns.com/SUT.html">System Under Test</a> (SUT) has, the dependencies are mocked using a mocking framework. In these cases, we can setup the external dependencies to return different values as we expect for different tests and test the logic of the SUT and how it responds. Such tests are usually more coupled with the implementation as we have to setup the mocks prior. So we need to have an understanding of the return values expected from dependencies and the parameters expected by the dependencies. I use Moq framework for mocking, and AutoFixture has a library that helps integrate well with it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">HttpResponseMessage</span> <span class="nf">Get</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">customer</span> <span class="p">=</span> <span class="n">CustomerRepository</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">customer</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Request</span><span class="p">.</span><span class="n">CreateResponse</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">NotFound</span><span class="p">,</span> <span class="s">&quot;Customer not Found with id &quot;</span> <span class="p">+</span> <span class="n">id</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">Request</span><span class="p">.</span><span class="n">CreateResponse</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">OK</span><span class="p">,</span> <span class="n">customer</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Theory]</span>
</span><span class='line'><span class="na">[InlineAutoMoqData]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">CustomerControllerGetWithNoCustomerReturnsNotFound</span><span class="p">(</span>
</span><span class='line'>    <span class="n">Guid</span> <span class="n">customerId</span><span class="p">,</span>
</span><span class='line'><span class="na">    [Frozen]</span><span class="n">Mock</span><span class="p">&lt;</span><span class="n">ICustomerRepository</span><span class="p">&gt;</span> <span class="n">customerRepository</span><span class="p">,</span>
</span><span class='line'>    <span class="n">CustomerController</span> <span class="n">sut</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Fixture setup</span>
</span><span class='line'>    <span class="n">customerRepository</span><span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="n">customerId</span><span class="p">)).</span><span class="n">Returns</span><span class="p">(</span><span class="k">null</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">expected</span> <span class="p">=</span> <span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">NotFound</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Exercise system</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">actual</span> <span class="p">=</span> <span class="n">sut</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="n">customerId</span><span class="p">).</span><span class="n">StatusCode</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Verify outcome</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">actual</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The tests above uses <a href="http://blog.nikosbaxevanis.com/2012/07/31/autofixture-xunit-net-and-auto-mocking/">InlineAutoMoqData attribute</a> which is a customized xUnit data attribute that uses Moq framework to inject dependencies. The Mock<ICustomerRepository> represents a mocked interface implementation. Behavior is setup on the mock using the Setup method. By using <a href="http://blog.ploeh.dk/2010/03/17/AutoFixtureFreeze/">Frozen</a> attribute for the Mock parameter, we tell AutoFixture to create only one instance of the mocked object and then use the same instance for any future requests of that type. This forces the same instance of the repository to be injected into the CustomerController class as well when it asks for a ICustomerRepository to AutoFixture.</p>

<p>Creating test data is an important aspect of any test. Making sure that you minimize the dependencies on the implementation detail is important to make your tests more robust. This allows the code to be refactored as long as some of the core contracts that we are testing remain the same. AutoFixture helps minimize the code in <a href="http://xunitpatterns.com/Four%20Phase%20Test.html">Fixture Setup phase</a>, which otherwise tends to grow bigger. Hope this helps you with your tests!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Switching Subscriptions Under Same Azure Account to Access Key Vaults]]></title>
    <link href="http://rahulpnath.com/blog/switching-between-subscriptions-under-same-azure-account-to-access-key-vault/"/>
    <updated>2017-03-02T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/switching-between-subscriptions-under-same-azure-account-to-access-key-vault</id>
    <content type="html"><![CDATA[<p><img class="center" alt="Azure Powershell Get-AzureRmContext" src="http://rahulpnath.com/images/powershell_azurermcontext.png" /></p>

<p>When accessing Key Vault using Powershell it can be a bit tricky when you have multiple subscriptions under the same account. The Key Vault cmdlets being under the <a href="http://www.rahulpnath.com/blog/how-the-deprecation-of-switch-azuremode-affects-azure-key-vault/">Resource Manager (RM) mode</a> depends on the current RM Subscription. The Key Vault cmdlets enable you to manage only the key vaults under the selected subscription. To access the key vaults in other subscriptions, you need to switch the selected RM subscription.</p>

<blockquote><p><em>Use <strong>Select-AzureRmSubscription</strong> to switch the selected RM subscription</em></p></blockquote>

<p> The <a href="https://docs.microsoft.com/en-us/powershell/resourcemanager/azurerm.profile/v2.2.0/get-azurermcontext">Get-AzureRmContext</a> returns the metadata used for RM requests. The SubscriptionId/SubscriptionName property indicates the selected subscription. Any Key Vault cmdlets (or RM cmdlets) will work based off that selected subscription. To change the selected Azure RM subscription use the Select-AzureRmSubscription cmdlet. Pass in the SubscriptionId or the Subscription Name that you wish to switch to and the RM Subscription will be set to that. To get the SubscriptionId/SubscriptionName of the subscriptions under your account use <a href="https://msdn.microsoft.com/en-us/library/dn495302.aspx">Get-AzureSubscription</a> cmdlet.</p>

<pre><code class="` powershell"> Get-AzureRmContext
 Get-AzureRmSubscription
 Select-AzureRmSubscription -SubscriptionName  "Your Subscription Name"
 Select-AzureRmSubscription -SubscriptionId  a5287dad-d5a2-4060-81bc-4a06c7087e72
</code></pre>

<p> I struggled with this for some time, so hope it helps you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manage Certificates in Azure Key Vault]]></title>
    <link href="http://rahulpnath.com/blog/manage-certificates-in-azure-key-vault/"/>
    <updated>2017-03-01T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/manage-certificates-in-azure-key-vault</id>
    <content type="html"><![CDATA[<p><a href="http://perspecsys.com/" class="center" title="Image By Perspecsys Photos, from https://www.flickr.com/photos/111692634@N04/15855489588"><img class="center" alt="Security" src="http://rahulpnath.com/images\pfx_security.jpg" /></a></p>

<p>In one of my earlier posts, <a href="http://www.rahulpnath.com/blog/pfx-certificate-in-azure-key-vault/">PFX Certificate in Azure Key Vault</a>, we saw how to save PFX Certificate files in Key Vault as Secrets. Azure Key Vault now <a href="https://blogs.technet.microsoft.com/kv/2016/09/26/get-started-with-azure-key-vault-certificates/">supports certificates as a first class citizen</a>. This means one can manage certificates as a separate entity in KeyVault. At the time of writing, Key Vault supports managing certificates using Powershell. The <a href="http://www.rahulpnath.com/blog/managing-key-vault-through-azure-portal/">portal UI</a> is still to catch up on this feature. Using the Key Vault&rsquo;s certificate feature, we can create a new certificate: self-signed or signed by a supported certificate authority, import an existing certificate, retrieve the certificate with or without a private key part.</p>

<h3>Setting up the Vault</h3>

<p>With the introduction of the certificates feature, a new command line switch is added to <a href="https://docs.microsoft.com/en-us/powershell/resourcemanager/azurerm.keyvault/v2.2.0/set-azurermkeyvaultaccesspolicy">Set-AzureRmKeyVaultAccessPolicy</a> cmdlet <em><a href="https://docs.microsoft.com/en-us/powershell/resourcemanager/azurerm.keyvault/v2.2.0/set-azurermkeyvaultaccesspolicy#PermissionsToCertificates">-PermissionToCertificates</a></em>. It supports the following values - <em>all, get, create, delete, import, list, update, deleteissuers, getissuers, listissuers, setissuers, managecontacts</em>. For a key vault created after the introduction of this feature, the property is set to <em>all</em> for the creator&rsquo;s access policy. For any vault created before the introduction of the feature, this property needs to be explicitly set to start using it.</p>

<h3>Create Certificate</h3>

<p>To create a new certificate in the vault use the <a href="https://docs.microsoft.com/en-us/powershell/resourcemanager/azurerm.keyvault/v2.2.0/add-azurekeyvaultcertificate">Add-AzureKeyVaultCertificate</a> cmdlet. The cmdlet requires a Certificate Policy that specifies the subject name, issuer name, validity, etc.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$certificatepolicy</span> <span class="p">=</span> <span class="nb">New-AzureKeyVaultCertificatePolicy</span>   <span class="n">-SubjectName</span> <span class="s2">&quot;CN=www.rahulpnath.com&quot;</span>   <span class="n">-IssuerName</span> <span class="n">Self</span>   <span class="n">-ValidityInMonths</span> <span class="n">12</span>
</span><span class='line'><span class="nb">Add-AzureKeyVaultCertificate</span> <span class="n">-VaultName</span> <span class="s2">&quot;VaultFromCode&quot;</span> <span class="n">-Name</span> <span class="s2">&quot;TestCertificate&quot;</span> <span class="n">-CertificatePolicy</span> <span class="nv">$certificatepolicy</span>
</span></code></pre></td></tr></table></div></figure>


<p>Executing the above creates a certificate in the vault with the given name. To retrieve the certificates in the key vault use the. The certificate object identifier is similar to that of Keys and Secrets as shown below. This identifier is used to identify a certificate uniquely.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>https://vaultfromcode.vault.azure.net:443/certificates/TestCertificate
</span></code></pre></td></tr></table></div></figure>


<p>To retrieve all the certificates in a vault use the <a href="https://docs.microsoft.com/en-us/powershell/resourcemanager/azurerm.keyvault/v2.2.0/get-azurekeyvaultcertificate">Get-AzureKeyVaultCertificate</a> cmdlet passing in the VaultName. To get details of a certificate pass in the Certificate Name as well.</p>

<p><img class="center" alt="Azure Key Vault, GetAzureKeyVaultCertificate" src="http://rahulpnath.com/images\keyvault_getazurekeyvaultcertificate.png" /></p>

<p>When creating a new certificate make sure that a Key or Secret does not exist with the same name in the vault. Azure adds in a key and secret with the same name as that of the certificate when creating a new certificate as shown in the above image. The key is required when for certificates created with non-exportable key (-<a href="https://docs.microsoft.com/en-us/powershell/resourcemanager/azurerm.keyvault/v2.1.0/new-azurekeyvaultcertificatepolicy#KeyNotExportable">KeyNotExportable</a>). Non-exportable certificates do not have the private portion contained in secret. Any certificate operation requiring the private part should use the key. For consistency, the key exists for exportable certificates as well.</p>

<p>To import an existing certificate into the key vault, we can use <a href="https://docs.microsoft.com/en-us/powershell/resourcemanager/azurerm.keyvault/v2.1.0/import-azurekeyvaultcertificate">Import-AzureKeyVaultCertificate</a> cmdlet. The certificate file should be either PFX or PEM format.</p>

<h3>Recreate Certificate Locally from Key Vault</h3>

<p>Often we will have to recreate the certificate on the machine where the application using it is running. To create the private portion of the certificate retrieve it from the Secret, load it into a certificate collection, export and save the file locally.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$kvSecret</span> <span class="p">=</span> <span class="nb">Get-AzureKeyVaultSecret</span> <span class="n">-VaultName</span> <span class="s1">&#39;VaultFromCode&#39;</span> <span class="n">-Name</span> <span class="s1">&#39;TestCertificate&#39;</span>
</span><span class='line'><span class="nv">$kvSecretBytes</span> <span class="p">=</span> <span class="no">[System.Convert]</span><span class="p">::</span><span class="n">FromBase64String</span><span class="p">(</span><span class="nv">$kvSecret</span><span class="p">.</span><span class="n">SecretValueText</span><span class="p">)</span>
</span><span class='line'><span class="nv">$certCollection</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">Security</span><span class="p">.</span><span class="n">Cryptography</span><span class="p">.</span><span class="n">X509Certificates</span><span class="p">.</span><span class="n">X509Certificate2Collection</span>
</span><span class='line'><span class="nv">$certCollection</span><span class="p">.</span><span class="n">Import</span><span class="p">(</span><span class="nv">$kvSecretBytes</span><span class="p">,</span><span class="nv">$null</span><span class="p">,</span><span class="no">[System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]</span><span class="p">::</span><span class="n">Exportable</span><span class="p">)</span>
</span><span class='line'><span class="nv">$protectedCertificateBytes</span> <span class="p">=</span> <span class="nv">$certCollection</span><span class="p">.</span><span class="n">Export</span><span class="p">(</span><span class="no">[System.Security.Cryptography.X509Certificates.X509ContentType]</span><span class="p">::</span><span class="n">Pkcs12</span><span class="p">,</span> <span class="s1">&#39;test&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nv">$pfxPath</span> <span class="p">=</span> <span class="s1">&#39;C:\cert\test.pfx&#39;</span>
</span><span class='line'><span class="no">[System.IO.File]</span><span class="p">::</span><span class="n">WriteAllBytes</span><span class="p">(</span><span class="nv">$pfxPath</span><span class="p">,</span> <span class="nv">$protectedCertificateBytes</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similarly to export the public portion of the certificate</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$cert</span> <span class="p">=</span> <span class="nb">Get-AzureKeyVaultCertificate</span> <span class="n">-VaultName</span> <span class="s1">&#39;VaultFromCode&#39;</span> <span class="n">-Name</span> <span class="s1">&#39;TestCertificate&#39;</span>
</span><span class='line'><span class="nv">$filePath</span> <span class="p">=</span><span class="s1">&#39;C:\cert\TestCertificate.cer&#39;</span>
</span><span class='line'><span class="nv">$certBytes</span> <span class="p">=</span> <span class="nv">$cert</span><span class="p">.</span><span class="n">Certificate</span><span class="p">.</span><span class="n">Export</span><span class="p">(</span><span class="no">[System.Security.Cryptography.X509Certificates.X509ContentType]</span><span class="p">::</span><span class="n">Cert</span><span class="p">)</span>
</span><span class='line'><span class="no">[System.IO.File]</span><span class="p">::</span><span class="n">WriteAllBytes</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">,</span> <span class="nv">$certBytes</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Delete Certificate</h3>

<p>To delete a certificate use the Remove-AzureKeyVaultCertificate cmdlet and pass in the vault name and certificate name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nb">Remove-AzureKeyVaultCertificate</span> <span class="n">-VaultName</span> <span class="s1">&#39;VaultFromCode&#39;</span> <span class="n">-Name</span> <span class="s1">&#39;TestCertificate&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hope this helps you to get started with managing certificates in Azure Key Vault.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Key Vault Talk at Sydney Alt.Net]]></title>
    <link href="http://rahulpnath.com/blog/azure-key-vault-talk-at-sydney-alt-dot-net/"/>
    <updated>2017-02-28T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/azure-key-vault-talk-at-sydney-alt-dot-net</id>
    <content type="html"><![CDATA[<p>First off I would like to thank you all who made for the talk on <a href="https://www.meetup.com/Sydney-Alt-Net/events/236864792/">Azure Key Vault at Alt.Net Sydney</a>. I enjoyed giving the session and hope you liked it as well.</p>

<p><img alt="Azure Key Vault session, Alt.Net Sydney - Pic by Richard Banks" src="http://rahulpnath.com/images/altnet_sydney_azurekeyvault.jpg" /></p>

<p>As a follow up to the talk, I thought of putting up a list of resources that will help you jump start with Azure Key Vault.</p>

<ul>
<li>If you don&rsquo;t have an Azure Subscription yet, get a <a href="https://azure.microsoft.com/en-us/free/">free Azure account with $200 credit</a> or join the <a href="https://www.visualstudio.com/dev-essentials/">Visual Studio Dev Essentials</a> to get monthly Azure credits and a lot more.</li>
<li>The official documentation for Azure Key Vault is <a href="https://docs.microsoft.com/en-au/azure/key-vault/">available here</a></li>
<li>For a high-level overview and how to quickly get started with Key Vault, check out my <a href="https://msdn.microsoft.com/en-us/magazine/mt422585.aspx">MSDN Article</a>.</li>
<li>Check out various aspects of Key Vault, Authentication, using from ARM templates, etc. <a href="http://www.rahulpnath.com/blog/category/azure-key-vault/">on this blog</a>.</li>
<li><a href="https://azure.microsoft.com/en-us/resources/templates/?term=%22key+vault%22">Azure Resource Manager (ARM) Quickstart templates</a> for Azure Key Vault. Check out more about <a href="http://www.rahulpnath.com/blog/managing-azure-key-vault-using-azure-resource-manager-arm-templates/">Key Vault ARM templates</a>.</li>
<li><a href="https://github.com/elize1979/AzureKeyVaultExplorer">Azure Key Vault Explorer</a> is an open source Windows standalone tool to manage secrets.</li>
<li><a href="https://www.youtube.com/watch?v=5p2dQdTsUvE">TechEd talk</a> on Azure Key Vault by the Program Manager</li>
<li><a href="https://www.youtube.com/user/rahulnathp/videos?sort=dd&amp;shelf_id=0&amp;view=0">Videos</a> on Key Vault</li>
<li>Get the <a href="https://www.slideshare.net/rahulpnath/azure-key-vault">powerpoint presentation</a></li>
</ul>


<p>Thank you again for attending the talk. For any queries feel free to reach out to the <a href="https://social.msdn.microsoft.com/Forums/azure/en-US/home?forum=AzureKeyVault">Azure Key Vault MSDN forum</a> or me. Hope this helps you to jump start on using Key Vault in applications you are building currently.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Todoist: Manage your To-Do List]]></title>
    <link href="http://rahulpnath.com/blog/todoist-manage-your-todo-list/"/>
    <updated>2017-02-23T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/todoist-manage-your-todo-list</id>
    <content type="html"><![CDATA[<p>If you are the kind of person who wants to manage a list of tasks and like checking it off and moving towards a goal then this post is for you. I am a fan of the <a href="http://amzn.to/2gsJaed">Getting Things Done</a> methodology by David Allen and found the book and <a href="https://www.youtube.com/results?search_query=david+allen">videos</a> mind blowing. Ever since reading the book for the first time I had been searching for a tool that helps to follow the GTD process. Though the GTD process in itself is not tied to a particular tool and works well with pen and paper, I am more towards a digital medium, as that&rsquo;s where I spent most of my time. I have tried a lot of different tools, almost everything that came up when searching for to do lists.</p>

<p>Some of the key features that I was looking out of a to-do list application are</p>

<ul>
<li>Quickly Capture tasks from anywhere</li>
<li>Availability on multiple devices</li>
<li>Able to group and categorize tasks</li>
<li>Search</li>
<li>Assign date time and set reminders</li>
<li>Simplistic and easy user interface</li>
</ul>


<p><img alt="Todoist" src="http://rahulpnath.com/images/todoist.png" /></p>

<p><a href="https://todoist.com/">Todoist</a> is one platform that I found the best matching with my needs and have been with it for over two years. It started with a <a href="http://www.rahulpnath.com/blog/staying-organized-finding-a-system-to-manage-it-all/#comment-1528539219">comment by my friend on one of my posts</a>. Since then I am using Todoist. After trying for a couple of weeks, I quickly moved on to their <a href="https://todoist.com/premium">premium version</a> for the various features that it provides. Todoist has a clean and minimalistic interface and never stays in the way of getting things done. Be it the mobile app, the desktop app or the Chrome plugin; it enables easy task management. Any new task added by default goes into the Inbox which can be categorized and processed later. This processing flow fits with the process outlined in GTD. Tasks can be assigned labels and categories, set priorities, set for action on a specific date. Tasks added to one app is synced across all the apps seamlessly., enabling a smooth and consistent experience across.</p>

<blockquote><p><em>Getting Things Done is tool agnostic. Tools do not matter; it is about the process. Choose any tool that works for you, for me it&rsquo;s Todoist</em></p></blockquote>

<p>Todoist had all the features that I was looking out for in a task management application. Give Todoist a try if you are looking out for a task management application. Irrespective of the tools that you use it is your ability to stick to a plan and focus on tasks that will help you reach your goal.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Three Day Trip to Coffs Harbour from Sydney]]></title>
    <link href="http://rahulpnath.com/blog/three-day-trip-to-coffs-harbour-from-sydney/"/>
    <updated>2017-02-20T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/three-day-trip-to-coffs-harbour-from-sydney</id>
    <content type="html"><![CDATA[<p>With the Australia Day (and Indian Republic Day) falling on a Thursday I got a long weekend by taking the Friday off. Me, Parvathy (my wife) and Gautham (my son) decided to head off to <a href="https://goo.gl/maps/Tb4awz6cx6H2">Coffs Harbour</a>, which is a six-hour drive from Sydney. We started off at six, Thursday morning.</p>

<p>This was the first time Parvathy, and I was doing a road trip this long with Gautham and had no idea what to expect. Gautham was wide awake from the start of the trip till we reached Coffs Harbour. But it was all right traveling with him. The trip was also the first since he was fully toilet-trained. We did stop at 3 places on the way but were happy to do that. We stopped for breakfast at <a href="https://goo.gl/maps/H72Loz9zofk">Hungry Jack&rsquo;s, Beresfield</a> and had quick burger, fries and hash brown. We continued to have this same breakfast throughout the trip, for it was fast and enabled to get on with the day quickly. Deciding, ordering and eating at a cafe is much more time-consuming. After two more stops, we reached Coffs Harbour by two in the noon. Since both me and Parvathy are trying to <a href="http://www.rahulpnath.com/blog/how-i-lost-13-kilos-in-one-and-half-months/">eat healthy (since a month)</a>, we decided to keep our lunch light. Mostly we had carrots, cucumber, and some nuts. For Gautham, we usually got something on the way.</p>

<h3>Day1 (Thursday)</h3>

<p>We headed straight to Royal Palms Motor Inn and dropped our bags and quickly freshened up. The weather forecast said it would rain, but luckily there was no rain and was a pleasant climate. We headed off straight to Jetty Beach, where we spent the rest of our day. The beach was calm and had a great walk by the side of it. The sand looked like a mirror, and in the beginning, Gautham was even cautious not to break it. We enjoyed the time there and stayed there till five. After having a wash down at the beach showers, we headed back to the hotel. Gautham fell asleep the moment we got into the car. We reached the hotel and stayed in the car till seven so not to disturb his sleep. Once he woke up, we headed off to Bombay Brasserie, an Indian restaurant right next to the hotel. We usually prefer other food option while eating outside to try different cuisine. But during the trip, we stuck to Indian hotels as Gautham often ends up eating more from there, as it was similar to food at home. We had a nice tandoori platter, Nan, rice and ice-cream. By half past eight, we reached back at the hotel, had a bath and went to sleep by ten.</p>

<p><a href="https://500px.com/photo/197577329/jetty-beach-by-rahul-nath"><img alt="Jetty Beach, Coffs Harbour" src="http://rahulpnath.com/images/coffs_harbour_jetty_beach.jpg" /></a>
<img alt="Jetty Beach, Coffs Harbour" src="http://rahulpnath.com/images/coffs_harbour_jetty_beach_toys.jpg" /></p>

<h3>Day 2 (Friday)</h3>

<p>We all slept in a bit late today and woke up by seven. Luckily Parvathy was up and ready by then. After a quick fresh up, we started off to Dorrigo. Picked up our breakfast burgers on the way and headed off straight to Dorrigo. It was just over an hours drive from the hotel and a scenic one too. Dorrigo has a <a href="http://www.visitnsw.com/destinations/north-coast/coffs-harbour-area/dorrigo/attractions?&amp;">lot of attractions</a>, but we just did the <a href="http://www.visitnsw.com/destinations/north-coast/coffs-harbour-area/dorrigo/attractions/skywalk-lookout">Skywalk Lookout</a>, <a href="http://www.visitnsw.com/destinations/north-coast/coffs-harbour-area/dorrigo/attractions/wonga-walk">Wonga Walk</a>, <a href="http://www.visitnsw.com/destinations/north-coast/coffs-harbour-area/dorrigo/attractions/walk-the-birds-boardwalk">Walk with The Birds Boardwalk</a> and <a href="http://www.visitnsw.com/destinations/north-coast/coffs-harbour-area/dorrigo/attractions/dangar-falls">Dangar Falls</a>. We spent half a day there covering all these. The lookout and the walks were superb. It was a pleasant walk in the forest as it had rained the night before. By the time we headed back, Gautham was fast asleep after having a delicious cake with cream and juice. Woolgoolga was the next stop and was around one and half hours away. By three in the evening, we hit the <a href="https://goo.gl/maps/1fBYqWHDnyC2">beach</a>. By five we headed back to the hotel. On the way, we drove through <a href="https://goo.gl/maps/Pm7jh9nJRCM2">Emerald beach</a> to the hotel. After a quick fresh up we set out for dinner by six. We tried a different Indian restaurant today and ate to our full. By ten we hit the bed.</p>

<p><img alt="Dorrigo Lookout, Coffs Harbour" src="http://rahulpnath.com/images/coffs_harbour_dorrigo_skyway_lookout.jpg" />
<img alt="Dorrigo Lookout, Coffs Harbour" src="http://rahulpnath.com/images/coffs_harbout_dorrigo_lookout.jpg" /></p>

<h3>Day 3 (Saturday)</h3>

<p>I woke up at half past five and went for a run. I <a href="https://www.runtastic.com/en/users/4b76cfab-734e-1658-b5e4-600759a3b066/sport-sessions/588ba8d079a46318f38e5d10">ran by the boat jetty to jetty beach and through the Coffs Coast State Park</a>. The route was scenic, and I enjoyed it.By seven I was at the hotel and got ready to checkout. We checked out by eight, grabbed a <a href="http://www.boostjuice.com.au/products">Boost smoothie</a> and burger and headed off to <a href="https://goo.gl/maps/P9e9sx5eib62">Sawtell beach</a>. It was a hot day, and the sun was already up and high. We just had a quick walk by the beach side and headed straight to <a href="http://www.visitnsw.com/destinations/north-coast/coffs-harbour-area/nambucca-heads">Nambucca heads</a> as we wanted to spend more time there. The walk by the Nambucca river is excellent. You can see the river meeting the sea here, and it is a beautiful sight. The river is calm and up to waist height and we can easily walk. We spent around two hours there and started our way back home at around one in the noon. It is around six hours drive, and with a couple of stops along the way, we reached home by eight in the evening.</p>

<p><img alt="Nambucca Heads, Coffs Harbour" src="http://rahulpnath.com/images/coffs_harbour_nambucca_heads.jpg" /></p>

<p>It was a good three-day break and completely disconnected from work and social media. It was refreshing, and the drive was great too. This was our first long drive after coming to Sydney and enjoyed it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Screenshots with Snagit]]></title>
    <link href="http://rahulpnath.com/blog/screenshots-with-snagit/"/>
    <updated>2017-02-16T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/screenshots-with-snagit</id>
    <content type="html"><![CDATA[<p>I have been using <a href="https://www.techsmith.com/screen-capture.html">Snagit</a> for over one and half years and been loving it. Snagit gives you a way to create and edit screenshots or record videos to show a process, provide detailed feedback, or share information with the people who need it most. It tucks away neatly to the side of your screen and is there up and ready when you want to grab a screen capture or record a quick video. The screen capture is easily triggered using keyboard shortcuts (Ctrl + Alt + S by default). Once captured, it takes you to the Snagit editor where you can add a lot more details to the captured image.</p>

<p><img alt="Snagit" class="center" src="http://rahulpnath.com/images/snagit.gif" /></p>

<p>Some of the  features that I often use are:</p>

<ul>
<li><strong>Blur (or Redact)</strong>: Use to hide or disguise sensitive information. Often my screenshots contain sensitive content which I want to blur.</li>
<li><strong>Step</strong>: Add a series of numbers or letters to label steps or items in a capture. This feature helps in guiding a step by step process in a screenshot.</li>
<li><strong>Crop</strong>: Common feature in all image editors.</li>
<li><strong>Spotlight &amp; Magnify</strong>: Magnify, blur or dim a selected area of the picture. This feature is useful to highlight specific parts of the image.</li>
<li><strong>Callouts, Text, and Arrows</strong>: Again pretty much standard with most image editors.</li>
</ul>


<p>Snagit has been a great fit for blogging and makes creating screenshots easy. Communicating with images is much faster with these great features. If you take a lot of screenshots give <a href="https://www.techsmith.com/download/snagit/">Snagit a try</a>, you will love it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Moving Selected Lines in Visual Studio]]></title>
    <link href="http://rahulpnath.com/blog/moving-selected-lines-in-visual-studio/"/>
    <updated>2017-02-09T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/moving-selected-lines-in-visual-studio</id>
    <content type="html"><![CDATA[<p>Often when coding, I need to move pieces of code up or down. It could be a group of lines of code or an entire function that I need to shift up or down. In earlier versions of Visual Studio, I had to select the lines of code, cut them from current place, move the cursor to the desired position and paste it. That&rsquo;s a lot of keystrokes for getting a simple thing done. In the latest versions of Visual Studio (I am currently on VS2015) we can use  <strong>Alt + Up/Down</strong> to move the selection up or down. This also works for the current line without selecting it.</p>

<p><img alt="Defensive Coding" src="http://rahulpnath.com/images/visualstudio_moveselectedlines.gif" /></p>

<p>Hope this helps to move code around faster!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Defensive Coding]]></title>
    <link href="http://rahulpnath.com/blog/defensive-coding/"/>
    <updated>2017-02-07T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/defensive-coding</id>
    <content type="html"><![CDATA[<p>Often when writing code or in code review discussions it comes up - &lsquo;<em>Should I be doing a null check here?</em>.&rsquo; and we start off long discussions. Like in most cases, there is no definite answer to this. In this post let us examine some of the pros and cons of having defensive checks and how and when we can avoid it to make the code more readable.</p>

<p><img alt="Defensive Coding" src="http://rahulpnath.com/images/defensive_coding.jpg" /></p>

<p>Let&rsquo;s see an example to explore more. The below code aggregated details from different repository classes and returns a combined model. I have kept this simple with just three dependencies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">PersonDetails</span> <span class="nf">GetPersonDetails</span><span class="p">(</span><span class="n">Guid</span> <span class="n">personId</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">person</span> <span class="p">=</span> <span class="n">personRepository</span><span class="p">.</span><span class="n">GetPerson</span><span class="p">(</span><span class="n">personId</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">subscriptionPlan</span> <span class="p">=</span> <span class="n">subscriptionRepository</span><span class="p">.</span><span class="n">GetSubscriptionForPerson</span><span class="p">(</span><span class="n">person</span><span class="p">.</span><span class="n">Email</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">billingSummary</span> <span class="p">=</span> <span class="n">billingRepository</span><span class="p">.</span><span class="n">GetSummary</span><span class="p">(</span><span class="n">subscriptionPlan</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">PersonDetails</span><span class="p">()</span> <span class="p">{...};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you see, there are no null checks on any of the values returned from external dependencies. The code expects all calls to be successful with no exceptions - &lsquo;<a href="https://en.wikipedia.org/wiki/Happy_path">happy path</a>&rsquo; scenario.
The problem is when an error happens; the exception stack trace will look like something below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Object reference not set to an instance of an object.
</span><span class='line'>at UserQuery.GetPersonDetails(Guid personId)
</span><span class='line'>  at UserQuery.Main()
</span></code></pre></td></tr></table></div></figure>


<p>We will not be able to tell which of the values was null, making it hard to debug the error. We have to manually go through the code checking how each of the dependencies retrieves values and check which one possibly was null. Debugging takes a lot of time and might be difficult depending on the complexity of the dependencies. The advantage of the above code though is that it is readable and there is <strong><em>noise</em></strong> in the code.</p>

<h3>Extensive Defense</h3>

<p>Let us now modify the above example to see how it would be to add defensive code and check for nulls.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">PersonDetails</span> <span class="nf">GetPersonDetails</span><span class="p">(</span><span class="n">Guid</span> <span class="n">personId</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">personId</span> <span class="p">==</span> <span class="n">Guid</span><span class="p">.</span><span class="n">Empty</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="n">nameof</span><span class="p">(</span><span class="n">personId</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">person</span> <span class="p">=</span> <span class="n">personRepository</span><span class="p">.</span><span class="n">GetPerson</span><span class="p">(</span><span class="n">personId</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">person</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">&quot;Person is null&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">person</span><span class="p">.</span><span class="n">Email</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">&quot;Email is null for person &quot;</span> <span class="p">+</span> <span class="n">personId</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">subscriptionPlan</span> <span class="p">=</span> <span class="n">subscriptionRepository</span><span class="p">.</span><span class="n">GetSubscriptionForPerson</span><span class="p">(</span><span class="n">person</span><span class="p">.</span><span class="n">Email</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">subscriptionPlan</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">&quot;Subscription Plan is null&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">billingSummary</span> <span class="p">=</span> <span class="n">billingRepository</span><span class="p">.</span><span class="n">GetSummary</span><span class="p">(</span><span class="n">subscriptionPlan</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">billingSummary</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">&quot;BillingSummary is null&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">PersonDetails</span><span class="p">()</span> <span class="p">{</span> <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> The defensive checks added for guarding against invalid values makes the code harder to read. Defensive checks are there for incoming parameters as well and validate if they are null/default value (for Guid). However when an error happens the stack trace will mention the name of the property which was null. Debugging is fast and easy and makes the exception message useful. But we don&rsquo;t want our code filled with defensive checks like this.</p>

<h3>Team Conventions and Practices</h3>

<p>Let us dig a bit deeper into why we had to put in the defensive checks in the first place. We had to check for null on <em>person</em> since the repository decided to return a null when it could not find the person given an id. Does it even make sense or add any value in returning a null reference from the repository? Unless the business works in a way that there is a high possibility of something returning null this does not add any value. Even in cases like that, we should revert to other options which we will see in a while. When most of the time we expect a person to exists, it is better for the repository to throw an exception right away that the person does not exist. If the validations and the defensive checks are performed at the boundaries, then we do not need to do a null check anymore when getting a person or any similar functions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">Person</span> <span class="nf">GetPerson</span><span class="p">(</span><span class="n">Guid</span> <span class="n">personId</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">personId</span> <span class="p">==</span> <span class="n">Guid</span><span class="p">.</span><span class="n">Empty</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="n">nameof</span><span class="p">(</span><span class="n">personId</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">person</span> <span class="p">=</span> <span class="n">DataContext</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="n">personId</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">person</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">UserDoesNotExistsException</span><span class="p">(</span><span class="s">&quot;Person does not exists with id &quot;</span><span class="p">,</span> <span class="n">personId</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">person</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For cases where there are possibilities of a value existing or not you can resort to <a href="http://www.rahulpnath.com/blog/stronger-code-contracts/">Stronger Code Contracts</a>. Using the Maybe type to indicate a value might or might not be present is a good way to force defensive checks. Maybe type ensures that any consumer of the code handles the case where the object does not exist. Readability of the code also improves in this case.</p>

<p>If you have noticed in the above code when checking for null&rsquo;s, I checked the Email property for null as well. Setting up team conventions that properties cannot be null, help reduce defensive checks for it. You could use various techniques to ensure properties are not null like setting a default value for the property in the constructor, <a href="https://en.wikipedia.org/wiki/Null_Object_pattern">Null object pattern</a>, checking for null&rsquo;s when setting property values or modeling the object in a way that optional parameters are not direct properties on the object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="n">Email</span> <span class="n">email</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Person</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="n">Email</span> <span class="p">=</span> <span class="n">Email</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">Email</span> <span class="n">Email</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">email</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">set</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">value</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;email cannot be null&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">email</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the updated repository code and the property changes, we can rewrite the original code much similar as it was before introducing the defensive checks. The guard clauses at the start of the function, checking for the parameters is still important. Validating for input parameters helps find the problems earlier in the code stack and follows the <a href="https://en.wikipedia.org/wiki/Fail-fast">fail fast</a> pattern. It helps us find exactly where the null was introduced and address the issue faster. The defensive code is at the beginning of the function and can be easily skipped over while reading. If you are not that keen to write this on all functions, you can also write some helper classes which Validates a list of parameters (<a href="https://msdn.microsoft.com/en-au/library/w5zay9db.aspx">params</a>). I prefer the explicit check and used to skipping over them when reading code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">PersonDetails</span> <span class="nf">GetPersonDetails</span><span class="p">(</span><span class="n">Guid</span> <span class="n">personId</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="n">personId</span> <span class="p">==</span> <span class="n">Guid</span><span class="p">.</span><span class="n">Empty</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="n">nameof</span><span class="p">(</span><span class="n">personId</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">person</span> <span class="p">=</span> <span class="n">personRepository</span><span class="p">.</span><span class="n">GetPerson</span><span class="p">(</span><span class="n">personId</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">subscriptionPlan</span> <span class="p">=</span> <span class="n">subscriptionRepository</span><span class="p">.</span><span class="n">GetSubscriptionForPerson</span><span class="p">(</span><span class="n">person</span><span class="p">.</span><span class="n">Email</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">billingSummary</span> <span class="p">=</span> <span class="n">billingRepository</span><span class="p">.</span><span class="n">GetSummary</span><span class="p">(</span><span class="n">subscriptionPlan</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">PersonDetails</span><span class="p">()</span> <span class="p">{...};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Value Objects and Defensive Coding</h3>

<p>Let us now look at other ways to improve defensive checks on properties. Modeling properties as <a href="http://www.rahulpnath.com/blog/thinking-beyond-primitive-values-value-objects/">Value Objects</a> helps contain the defensive code within the property. Like in the above case where email cannot be null, the checks to make sure that it is a valid email can be within the Email class. Containing this logic in the class removes the need for the rest of the code to check for it. If an email object exists, it will be valid. It is the same with names, date ranges, money, etc. The lesser we expose primitive type properties, the less defensive code we need to write. It also removes the problems of checking <em>string.IsNullOrEmpty</em> at some places and just for nulls at others.</p>

<p>Though this is not an extensive examination of all possible cases, we have still seen some common scenarios. Defensive coding is required. It is about striking a balance and making <a href="http://www.rahulpnath.com/blog/stronger-code-contracts/">code contracts stronger</a> to convey the intent. The defensive checks are within the classes responsible for the object and exist at a central place. It removes the need to check for it elsewhere in the code. This is a simple application of <a href="https://en.wikipedia.org/wiki/Encapsulation_(computer_programming">Encapsulation</a>. So the next time you check for null make sure it is where it should be!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Lost 13 Kilos in One and Half Months]]></title>
    <link href="http://rahulpnath.com/blog/how-i-lost-13-kilos-in-one-and-half-months/"/>
    <updated>2017-02-04T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/how-i-lost-13-kilos-in-one-and-half-months</id>
    <content type="html"><![CDATA[<p>Getting fit is one of the goals that I have set for myself this year. I have started running since mid of December and also controlling my diet.</p>

<div class="alert alert-warning">
<strong>DISCLAIMER!</strong> I am not a doctor or a dietitian. The below are just my personal experiences and has worked for me. If you feel you have a medical problem or are in need of professional help, please contact a professional. Always consult a doctor before starting a new diet or exercise program.
</div>


<blockquote><p><strong>TLDR;</strong></p>

<ul>
<li>Have Parvathy (my wife) support me throughout.</li>
<li>Running 1-2 times a week</li>
<li>No carbs till Dinner: Smoothie, Veggies, and nuts till dinner. Dinner is Chappathi and curry (mostly vegetables).</li>
<li>150+ Pushups Daily, spread across the day</li>
<li>No Sugar</li>
</ul>
</blockquote>

<p>I was around 95 kilos when I started out in December. At the time of writing, I weigh 82 kilos. Yes, I have lost 13 kilos over the past one and half months. This is the first time I have seen such drastic changes in my body, and I believe it&rsquo;s because of the strict diet more than anything. Below are the various aspects of what I have been following.</p>

<figure>
    <img alt="Before and After" src="http://rahulpnath.com/images/weigth_Before and After.jpg" />
    <figcaption><em>Here is the before and after.</em></figcaption>
</figure>


<h3>Exercises</h3>

<p> I started with running once a week. But now I am so into it I try to run two to three times a week. I use <a href="https://www.runtastic.com/en/users/4b76cfab-734e-1658-b5e4-600759a3b066">Runtastic</a> to track my runs. Last week I purchased the premium plan for Runtastic and looking forward to starting one of their 10k <a href="https://www.runtastic.com/en/training-plans/10k">training plans</a> and <a href="https://www.runtastic.com/en/results">runtastic results</a> on days that I do not run. I use a <a href="https://www.bose.com.au/en_au/products/headphones/earphones/soundsport-in-ear-headphones-audio.html#v=soundsport_ie_headphones_ii_audio_charcoal">Bose SoundSport in-ear audio only headphones</a>  headphones (the cheapest in their range) for music during the runs. Luckily Bose was running a half price on those models when I purchased.</p>

<p> I do push-ups every day and get 150+ (25 * 6+) every day. I split this out throughout the day - 75 before I head off to work and 75 once back. I get enough time in the morning to space it at 30-minute intervals as I <a href="http://www.rahulpnath.com/blog/morning_routine/">wake up at four</a>. I plan to replace push-ups with Runtastic Results starting next week.</p>

<p> <img alt="My Running History" src="http://rahulpnath.com/images/weight_running.jpg" /></p>

<h3>Diet</h3>

<p>Breakfast (<em>7:30 am</em>): Green Smoothie (+ eggs on days that I run) or Avocado and eggs.
Lunch (<em>12 pm</em>): Raw vegetables (Carrot, Cucumber, spinach, kale, beetroot, corn, sprouts)
Dinner (<em>6:30 pm</em>: Wheat Dosa or Chappathi + Vegetable Curry
Snacks: Anytime I feel hungry I have one of these - Nuts (Almonds, walnuts, sunflower seeds, etc.), Carrot, Banana and Peanut butter. Usually, I end up having just the nuts at around 10 30 in the morning.</p>

<p><img alt="Diet" src="http://rahulpnath.com/images/weight_diet.jpg" /></p>

<p>When eating out, I keep an eye on carbs and other junk. Try to eat grilled instead of fried. Usually, we eat out on weekends as we will be traveling places. We usually have a hearty lunch on weekends. Parvathy and I decided to have fruits for dinner on those days. I try to take fruits that contain less sugar like kiwi, berries, etc. But we do have apples, mangoes, watermelon, etc. but in moderation. The fruit choices are more driven by what&rsquo;s available at the place <a href="http://www.rahulpnath.com/blog/finding-a-job-abroad/">I live now</a>.</p>

<p>Sugar: I try my best to avoid it fully. To start with I quit tea and coffee. Believe me, I was a tea addict and I needed lots of it. It was hard, but then Parvathy quit it one day, and I got inspired by her. I still remember that last tea I took when I decided I am having no more of it. It&rsquo;s hard but doable!. I don&rsquo;t have any ice-cream, fruit juice, carbonated drinks, energy drinks, pastries, etc.</p>

<h3>Family Outings</h3>

<p>We used to spend a lot of our weekends in shopping malls till a while back. We decided to change that to more of outdoor activities. So it&rsquo;s either the beach, boating, parks, walks, etc. This has increased our general activity levels and help burn extra calories. And mostly I have &lsquo;an extra weight&rsquo; to carry around; you can tell that from the photos :). Gautham also enjoys these outdoor activities, and there&rsquo;s more for him to learn in each of those short trips. On weekdays we go for a walk after dinner, shop around for groceries, etc. and run any other errands so that we are free during weekends.</p>

<p>With the new routine, I now feel great to be back in shape. I have never been this light since a long time, and I am happy to be in clothes that I had locked up in my bags. Since the new routine takes an hour out of <a href="http://www.rahulpnath.com/blog/morning_routine/">my morning routine</a> I have to optimize myself further to keep up with blogging, videos and learning new things. I am still trying to find a balance but for this. Hoping to continue with this new routine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Quick Launch in Visual Studio]]></title>
    <link href="http://rahulpnath.com/blog/quick-launch-in-visual-studio/"/>
    <updated>2017-02-02T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/quick-launch-in-visual-studio</id>
    <content type="html"><![CDATA[<p><img alt="Visual Studio Quick Launch" src="http://rahulpnath.com/images/visualstudio_quicklaunch.png" /></p>

<p>As a .NET developer, I spent the majority of my time in Visual Studio. Knowing to navigate fast within the IDE or quickly find what I want is important. Many times finding specific settings or navigating to individual windows can take a while, especially if you are not familiar with it and don&rsquo;t know exactly where to look. Visual Studio has a quick launch toolbar that is designed exactly for this. Be it opening the Package Manager Console or changing the font style you can use the quick launch to search and navigate to it.</p>

<blockquote><p><em>You can use <a href="https://msdn.microsoft.com/en-us/library/hh417697.aspx">Quick Launch</a> to quickly search and execute actions for IDE assets such as options, templates, menus. You can&rsquo;t use Quick Launch to search for code and symbols. The Quick Launch search box is located at the top-right corner of the menu bar and is accessible by choosing the <strong>Ctrl+Q</strong> keys.</em></p></blockquote>

<p>The added advantage is that you can use the quick launch bar to <strong><em>learn new keyboard shortcuts</em></strong>. Searching for an item also shows the keyboard shortcut for it next to it. Over time you can remember the direct keyboard shortcut and avoid quick launch as well.</p>

<p><img alt="Visual Studio Quick Launch learn keyboard shortcuts" src="http://rahulpnath.com/images/visualstudio_quicklaunch_keyboardShortcuts.png" /></p>

<p>Knowing the tools that you use is an important part of development. Able to navigate fast within the IDE enables to remove any time wasted poking around the IDE. Use that time to read and write code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avoid State Mutation]]></title>
    <link href="http://rahulpnath.com/blog/avoid-state-mutation/"/>
    <updated>2017-02-01T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/avoid-state-mutation</id>
    <content type="html"><![CDATA[<p>How many times have you had to navigate down a long chain of function calls to find out that some code deep down was changing the value of an object passed to it? The change could either be setting the value to null or modifying the value in itself. When passing around reference types, it&rsquo;s easy to run into this situation very often.  This happens not just when debugging existing code, but also when looking at the code we have just finished writing. Maintaining state transitions and object state based on the order in which functions are invoked on them can soon become confusing and buggy. So the best way is to try and avoid them in the first place.</p>

<p><img alt="Avoid State Mutation" src="http://rahulpnath.com/images/mutation.png" /></p>

<h3>What is state Mutation</h3>

<p>The process of changing the value of a variable or an object over time after creation is called mutation. In simpler terms when you are changing the value of an object, you are mutating the state. I am sure that everyone would have had some time getting their head around the below statement when starting off with programming (I did)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">x</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="n">x</span> <span class="p">=</span> <span class="n">x</span> <span class="p">+</span> <span class="m">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>By second nature (depending on the programming languages one is exposed to e.g. csharp, java, etc.) you would say the above statement is perfectly fine and not think twice about anything. But show it to someone who is new to programming. They will find it hard to understand those two statements, the same phase that we have all gone through. &lsquo;=&rsquo; has turned into an assignment operator while it is an equality operator in mathematics. There are languages where &lsquo;=&rsquo; still stands for equality (like FSharp). In the example above the value of x is mutated - it is changed from 1 to 2.</p>

<blockquote><p><em>The process of actually changing a variable’s value over time, within a single context, is called mutation.</em></p></blockquote>

<h3>Risks of Mutation</h3>

<p>Mutable types can pose risks when passing a mutable value as function parameters or when returning mutable values from functions.</p>

<h4><strong>Passing Mutable Value</strong></h4>

<p>Let us take a simple example below. I have a list of integers, and I want to check if the first item of the incoming list and the sorted one are same. I have a simple sort method which implements <a href="https://en.wikipedia.org/wiki/Bubble_sort">Bubble sort</a>. What do you think will be the output?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;()</span> <span class="p">{</span> <span class="m">2</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">3</span> <span class="p">};</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">sortedList</span> <span class="p">=</span> <span class="n">Sort</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sortedList</span><span class="p">.</span><span class="n">First</span><span class="p">()</span> <span class="p">==</span> <span class="n">list</span><span class="p">.</span><span class="n">First</span><span class="p">())</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;First item is in place&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">Sort</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">list</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">listEvaluated</span> <span class="p">=</span> <span class="n">list</span> <span class="k">as</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="p">??</span> <span class="n">list</span><span class="p">.</span><span class="n">ToList</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">size</span> <span class="p">=</span> <span class="n">listEvaluated</span><span class="p">.</span><span class="n">Count</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;</span> <span class="p">(</span><span class="n">size</span> <span class="p">-</span> <span class="n">i</span><span class="p">);</span> <span class="n">j</span><span class="p">++)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">listEvaluated</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="p">&gt;</span> <span class="n">listEvaluated</span><span class="p">[</span><span class="n">j</span> <span class="p">+</span> <span class="m">1</span><span class="p">])</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">temp</span> <span class="p">=</span> <span class="n">listEvaluated</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>                <span class="n">listEvaluated</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="p">=</span> <span class="n">listEvaluated</span><span class="p">[</span><span class="n">j</span> <span class="p">+</span> <span class="m">1</span><span class="p">];</span>
</span><span class='line'>                <span class="n">listEvaluated</span><span class="p">[</span><span class="n">j</span> <span class="p">+</span> <span class="m">1</span><span class="p">]</span> <span class="p">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">listEvaluated</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, it prints out the message that the <em>First item is in place</em>. Before getting into the details of the issue, let us set our expectations correct. When calling the Sort method, we do not expect it to change the contents of the original list. Given that the function&rsquo;s signature is that of a Query (returns a value), we expect it not to create any <a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science">side effects</a>). According to <a href="https://en.wikipedia.org/wiki/Command%E2%80%93query_separation">Command Query Separation</a> (CQS) by Bertrand Meyer in <a href="http://amzn.to/2hZ4P9C">Object Oriented Software Construction</a></p>

<blockquote><p><em>Every method should either be a command that performs an action, or a query that returns data to the caller, but not both. In other words, Asking a question should not change the answer. More formally, methods should return a value only if they are referentially transparent and hence possess no side effects.</em></p></blockquote>

<p>Applying CQS means that any method can either be a Query or a Command. A command changes the state of the system but does not return a value (void). A query does not change the state of the system and returns a value and should be idempotent. Such functions are also referred to as <a href="https://en.wikipedia.org/wiki/Pure_function">pure functions</a>. The above Sort function only partially confirms to being a query. It does return the same output given the same input, the sorted list. But it changes the state of the system and has side effects - it mutates the list passed. The issue in the implementation of the Sort is that it casts the list passed in as <em>IList<int></em>, if it is already one. So when the parameter list is of type IList, listEvaluated points to the same list. If you force copy the list irrespective of it being a list or not will fix the issue. I will discuss more on how this kind of a conditional evaluation got in here in a separate post.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">listEvaluated</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">ToList</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This kind of change is only possible if the development team owns the Sort function. If this is a third-party library that you are consuming then the only way to avoid the problem will be to send in a copy of the list. Even trying to pass the list <a href="https://msdn.microsoft.com/en-us/library/e78dcd75(v=vs.110).aspx">AsReadOnly</a> will not work here. Check it out if you are not sure why.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">sortedList</span> <span class="p">=</span> <span class="n">Sort</span><span class="p">(</span><span class="n">list</span><span class="p">.</span><span class="n">ToList</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above solution does not imply that every time we need to pass in a list to a function we should defensively copy it (using ToList). <em>It depends</em>. Within a development team, there can be a convention that it sticks to CQS principle. In case of exceptions, make sure that it is communicated to everyone. Communication to developers is done best by naming the function to reflect that or adding a comment that shows up in the IDE intellisense (if any). For code that you consume from third parties or open sources make sure you understand well how the library behaves and check the documentation before using it. Ensure you have <a href="http://www.rahulpnath.com/blog/category/tdd/">unit tests</a> asserting the assumptions and behavior in all cases.</p>

<h4><strong>Returning Mutable Values</strong></h4>

<p>Let us take an example to see the possible effects of returning mutable values from a function. Below is a configuration helper class which returns a configuration object. The helper method is used in three different places of the application shown as <em>config1, config2, config3</em>. In one of the cases, the business logic requires the Duration value to be twice that in configuration. Since the real configuration helper reaches out to the database for its values, it was decided to cache the values after the first call. The ConfigurationHelper uses &lsquo;<em><a href="https://en.wikipedia.org/wiki/Singleton_pattern">Singleton Pattern</a></em> to achieve the caching Below is the implementation. Do you see any problems?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">config1</span> <span class="p">=</span> <span class="n">ConfigurationHelper</span><span class="p">.</span><span class="n">Get</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">config1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">config2</span> <span class="p">=</span> <span class="n">ConfigurationHelper</span><span class="p">.</span><span class="n">Get</span><span class="p">();</span>
</span><span class='line'>    <span class="n">config2</span><span class="p">.</span><span class="n">Duration</span> <span class="p">=</span> <span class="n">config2</span><span class="p">.</span><span class="n">Duration</span> <span class="p">*</span> <span class="m">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">config2</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">config3</span> <span class="p">=</span> <span class="n">ConfigurationHelper</span><span class="p">.</span><span class="n">Get</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">config3</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">ConfigurationHelper</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">static</span> <span class="n">Configuration</span> <span class="n">configuration</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">Configuration</span> <span class="nf">Get</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">configuration</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="n">configuration</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Configuration</span> <span class="p">{</span> <span class="n">Duration</span> <span class="p">=</span> <span class="m">1</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">configuration</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Configuration</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">Duration</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first caller will get the configuration value 1, as expected. The second caller also gets the configuration value 1, but it goes on to set the value as two times, so it becomes 2. The third caller, which does not have any idea of the second caller or its specific business requirements also gets the configuration value as 2. They get a wrong configuration because the second caller updated the same object that the ConfigurationHelper holds. Again this is a side effect of how the ConfigurationHelper returns the configuration. There are two or more ways to solve this problem. The ConfigurationHelper class can return a new instance of the Configuration class every time someone requests for it. To return a new instance requires removing the private variable and the conditional check associated with it. Removing the check is similar to the defensive copying that we discussed in the previous example and also every call to get the configuration, now needs to hit the database. One could argue that only one caller mutates the object and it is unnecessary to create a new instance for the rest. We can remove the public setter&rsquo;s on the Configuration class properties. Without a setter, the second caller cannot change the Duration property of the Configuration class. Removing the setter means that we add a constructor as well to take in the parameters that it requires as below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Configuration</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">Duration</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Configuration</span><span class="p">(</span><span class="kt">int</span> <span class="n">duration</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>            <span class="n">Duration</span> <span class="p">=</span> <span class="n">duration</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above ensures that nobody can change the value of the configuration object once created. So the second caller can longer assign the new duration value to the same object. If it wants to continue using a configuration object it needs to create a new Configuration object with the new duration. If there are more properties on the configuration object you can create extension methods like WithDuration to create a new Configuration class copying all the values as is from the old object and replace just the Duration.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">ConfigurationExtension</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">Configuration</span> <span class="nf">WithDuration</span><span class="p">(</span><span class="k">this</span> <span class="n">Configuration</span> <span class="n">configuration</span><span class="p">,</span> <span class="kt">int</span> <span class="n">duration</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">Configuration</span><span class="p">(</span><span class="n">duration</span><span class="p">,</span> <span class="n">configuration</span><span class="p">.</span><span class="n">OtherValue</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we have seen the above two cases, mutation can cause undesired effects unless those are intended for. It does not mean that mutating is bad and you should stop it immediately. But if you start writing your code using immutable types, <a href="http://www.rahulpnath.com/blog/thinking-beyond-primitive-values-value-objects/">Value Objects</a>, etc. you will slowly move to a point where you no longer need to mutate values. When you do not mutate state, it is easier to reason about code. You no longer need to wade through those method calls to find who is changing the value of a property. Immutability is one of the key features of functional languages and changes how programs are written. You take away most of the problems involved in multi-threading when a function can no longer mutate the state of the object. So the next time you make change check if you are changing the state of the object, think twice and see if you can find a way around!</p>

<p><strong>References:</strong></p>

<ul>
<li><a href="http://web.cs.wpi.edu/~cs2102/common/kathi-notes/mutation-part2.html">Mutation</a></li>
<li><a href="http://web.mit.edu/6.005/www/fa15/classes/09-immutability/">Mutability &amp; Immutability</a></li>
<li><a href="https://www.cs.utexas.edu/~wcook/anatomy/anatomy.htm#Mutable">Mutable State</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Cmder - Portable Console Emulator for Windows]]></title>
    <link href="http://rahulpnath.com/blog/cmder-portable-console-emulator-for-windows/"/>
    <updated>2017-01-25T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/cmder-portable-console-emulator-for-windows</id>
    <content type="html"><![CDATA[<div style="text-align: center;">
    <iframe width="560" height="315" src="https://www.youtube.com/embed/fpxx8hlNTzc" frameborder="0" allowfullscreen></iframe>
</div>


<p>I have been using Cmder as my command line for around two years and been loving it. I am not a super user of the command line, but try to use it more and more.</p>

<blockquote><p><em>Cmder is a software package created out of pure frustration over the absence of good console emulator on Windows. It is based on ConEmu with major config overhaul, comes with a Monokai color scheme, and a custom prompt layout.</em></p></blockquote>

<p>This is not right with Windows 10, as there is a new command prompt which has a lot more features. I have not yet thought of moving to that as Cmder has been working well for me.</p>

<h4><strong>Installation and setting up</strong></h4>

<p>Cmder is open source and free to download from <a href="http://cmder.net/">Cmder.net</a>. One of the advantages of Cmder is its portability. You can carry it with you on a USB stick or in the Cloud, so all your settings can go anywhere you go. Installation is simple, all you need to do is download the latest release, extract the archive and run Cmder executable. Check out the documentation if you face any difficulties.</p>

<h4><strong>Features I Like</strong></h4>

<p>Able to <strong><em>paste into the console using the Windows shortcut Ctrl + V</em></strong> is one of the key things that got me started with this command line tool. It also supports most of the other text traversal keyboard shortcuts of Windows.</p>

<p>Cmder supports <strong><em>multiple console tabs within a window</em></strong>. Tabs makes having multiple consoles open and managing them easy. All tab manipulation has associated keyboard shortcuts making it even faster. When creating a new tab, using Ctrl + T, you can choose to run different predefined tasks on command line startup. You can also set the user and user rights to run them as. Setting up the predefined tasks is under Settings -> Startup->Tasks.  I have added <strong><em>custom tasks</em></strong> for PowerShell, and Visual Studio developer command prompt as that is what I use mostly.</p>

<div id="customtasks" ></div>


<figure class='code'><figcaption><span>Powershell Administrator Task</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>*PowerShell -ExecutionPolicy Bypass -NoLogo -NoProfile -NoExit -Command
</span><span class='line'>&quot;Invoke-Expression &#39;. &#39;&#39;%ConEmuDir%\..\profile.ps1&#39;&#39;&#39;&quot; -new_console:d:&quot;%USERPROFILE%&quot;
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Visual Studio Developer Prompt Task</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>cmd /k &quot;&quot;%ConEmuDir%\..\init.bat&quot; &amp;
</span><span class='line'>&quot;C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\Tools\VsDevCmd.bat&quot;&quot;
</span><span class='line'>-new_console:d:%USERPROFILE%
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Alias</em></strong> is one of the key features that keeps me to Cmder. You can create short commands to map to longer commands. Aliases avoid typing long commands every time you want to perform that action. You can see all existing aliases by running alias command. I use this feature a lot. Most of the git commands are aliases, so I do not have to type them every time. For e.g., when on a git repository I can type <em>gs</em> to run git status. You can also pass arguments to alias. To do a git commit with a message I run <em>gc The commit message</em>. Aliases support optional parameters through the $1-9 or the $*.</p>

<p>To define a alias <em>alias gs=git status</em>. Below are some of the alias examples.</p>

<figure class='code'><figcaption><span>Alias Examples</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>gl=git log --oneline --all --graph --decorate  $*
</span><span class='line'>gs=git status
</span><span class='line'>ga=git add -A
</span><span class='line'>gc=git commit -m &quot;$*&quot;
</span><span class='line'>gcb=git checkout -b $*
</span><span class='line'>gpsu=git push --set-upstream origin $*
</span></code></pre></td></tr></table></div></figure>


<p>Check out the <a href="https://www.youtube.com/watch?v=fpxx8hlNTzc">video</a> for a walk-through of the setup and its usage. Cmder allows to get things done fast and looks great. Try it out to see if it works for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recording My First Screencast]]></title>
    <link href="http://rahulpnath.com/blog/recording-my-first-screencast/"/>
    <updated>2017-01-18T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/recording-my-first-screencast</id>
    <content type="html"><![CDATA[<p>Screencast helps to connect with people in a different way and adds a personal touch (sound and visual). It makes learning new things faster, by seeing it in action. Most of the fine details (which can be missed while writing a blog post) get captured in screencasting and this helps in better understanding. I have been long wanting to create screencasts and start a <a href="https://www.youtube.com/c/RahulNath">YouTube channel</a>. Finally, this <a href="http://www.rahulpnath.com/blog/2016-recap/">happened in 2016</a> and here is how the recording experience went.</p>

<blockquote><p><em>A <a href="https://en.wikipedia.org/wiki/Screencast">screencast</a> is a digital recording of computer screen output, also known as a video screen capture, often containing audio narration.</em></p></blockquote>

<h3>Presentation</h3>

<p>I chose to do my first screencast as a slide share presentation, as it was something that I was comfortable with. Since there are not many videos on <a href="http://www.rahulpnath.com/blog/category/azure-key-vault/">Azure Key Vault</a> and I have been blogging extensively about it, I didn&rsquo;t have to think twice about the topic. I scripted the whole presentation, to every word that I would say. Scripting for a video is different from writing a blog post as it has to be conversational with a video. Also, there are a lot more details that need to be covered and talked about as it is all visible on the recording.</p>

<p>Since I did not have an external monitor I wanted a presentation application that allows presenter notes and syncs them across multiple devices. This would allow me to record the screen and read off the presenter notes side by side. <a href="http://slides.com/">Slides</a> had exactly what I wanted. It allows to add presenter notes for each slide and allows <a href="http://help.slides.com/knowledgebase/articles/333925-remote-control">remote controlling</a> the presentation from multiple devices. So I can launch it as a full-screen presentation on my laptop for recording screen and have an iPad or mobile launch the same presentation as a presenter where the notes show up. This helped me follow the script while recording the video. It would have been much easier with multiple monitors, but I just did not want to get one just for this and I have been trying to get used with a single screen. Alternatively, I could have taken a printout of the script.</p>

<p><img alt="Using slides on multiple devices" src="http://rahulpnath.com/images/screencast_slides_multidevice.jpg" /></p>

<h3>Microphone</h3>

<p>An external microphone is absolutely necessary to record your sound well. The microphone that comes built into the laptop is not suited for recording good quality audio. It picks a lot more of the background noises, room noise, typing etc and creates a lot of disturbance in the recording. There are a lot of options available when it comes to getting an external microphone. Most of the microphones are either <a href="http://ehomerecordingstudio.com/best-condenser-mics/">Condenser Mics</a> or <a href="http://ehomerecordingstudio.com/dynamic-studio-microphone/">Dynamic Mics</a>. Microphones also have different connectivity options like <a href="https://en.wikipedia.org/wiki/XLR_connector">XLR</a>, <a href="https://en.wikipedia.org/wiki/USB">USB</a> etc. For a home recording setup USB is easier to get started with so I decided to get one with a <a href="http://ehomerecordingstudio.com/usb-microphones/">USB connectivity</a>.</p>

<p>I got the <a href="http://www.rode.com/microphones/podcaster">Rode Podcaster</a> with a <a href="http://www.rode.com/accessories/psa1">boom arm</a> and <a href="http://www.rode.com/accessories/psm1">shock mount</a>. The Rode Podcaster is a dynamic USB mic and is a popular choice amongst many people out there. It&rsquo;s a bit higher on the price side (depends on your budget though) but delivers great value. It cuts off most of the room noise and takes in only your voice which is exactly what I wanted. You need to get really close into the mic, so a boom arm helps.</p>

<p><img alt="Screencast Microphone, Rode Podcaster" src="http://rahulpnath.com/images/screencast_microphone_rode.jpg" /></p>

<h3>Software</h3>

<p>Choosing the software was much easier than getting the microphone. <a href="http://www.adobe.com/au/products/premiere.html?sdid=VBF1KRFN&amp;mv=search&amp;s_kwcid=AL!3085!3!107609177344!e!!g!!adobe%20premiere&amp;ef_id=Ve-MSAAABFDV-qvS:20170101175215:s">Adobe Premiere</a> or <a href="http://shop.techsmith.com/store/techsm/en_AU/pd/productID.289432000">Camtasia</a> are the most popular screen recording software&rsquo;s in the windows world. I have a lot of friends already using Camtasia and was happy with it. So I decided to stick with Camtasia and bought a license (Thanks to <a href="http://www.rahulpnath.com/blog/finding-a-job-abroad/">Readify&rsquo;s</a> Software Allowance, I did not have to spend a lot from my pocket).</p>

<p>For recording audio, I use <a href="http://www.audacityteam.org/">Audacity</a>, which is an open source software and available free of cost. I am yet to learn some audio processing techniques and for now just use noise removal, amplify and compression. Also since the Rode microphone does not pick a lot of external noise the audio did not require much processing. At first, I tried recording with a <a href="http://www.samsontech.com/samson/products/microphones/usb-microphones/gomic/">Samson GO mic</a> but felt that it picked it a lot more room noise and it needed a lot more audio processing.</p>

<h3>Recording</h3>

<p>With the hardware and software sorted now comes the hardest part of it all - Recording!!. I knew there would be difficulties along the way, but never thought it would be this hard. After reading around I understood that a popular technique that people use for recording is to record the audio and video separately for webcasts/screen recordings. I decide to take the same approach but just that did it in the wrong order (which I found after the first recording). For my first video I did the video first and the audio later. This meant that I recorded my screen performing all the slide movements and the code sample demo and then tried to fit the audio onto it. This was the biggest mistake in my complete recording, but I realized it only towards the end of the recording. Recording video was easy but fitting in the sound to it was hard. I had to do multiple (innumerous) takes and have to stop so often every now and then. And since I am yet to learn <em>how to talk naturally when in front of a microphone</em>, my voice was all over the place. Some bits had more bass, some a bit low others high, some fast others slow. I struggled with it for a long time and finally somehow got to get it all together. But though it was nowhere close to the quality that I set out for or would love to have in videos that I watch, I decided to ship it. For the <a href="https://www.youtube.com/watch?v=JbshGF4ZwGE">second recording</a>, I recorded the audio first and then fitted in the video onto it. This was so much easier and I have a more consistent voice in that, though there is a noticeable change in the middle.</p>

<p>I am planning to do more recordings in the upcoming months so that I get more comfortable with it. <strong><em>If it hurts, do it more often</em></strong>. Kindly leave your feedback on the videos.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Finding Keyboard Shortcuts on Websites]]></title>
    <link href="http://rahulpnath.com/blog/finding-keyboard-shortcuts-on-websites/"/>
    <updated>2017-01-16T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/finding-keyboard-shortcuts-on-websites</id>
    <content type="html"><![CDATA[<p><img alt="Keyboard Shortcuts" src="http://rahulpnath.com/images/keyboard_shortcuts.jpg" /></p>

<p>I prefer to use the keyboard to navigate within sites I use frequently. Keyboard enables to navigate faster within site and perform tasks quicker. The <a href="http://www.rahulpnath.com/blog/review-six-months-and-counting-logitech-mx-master/">Logitech MX Master</a> mouse provides a lot of capabilities to navigate. But I find the keyboard faster to perform repetitive actions - like posting a new status update on social media sites, managing tasks in Jira, TFS online, GitHub, responding to emails, Todoist, etc. Finding keyboard shortcuts on these various sites can itself be a daunting task. One might need to google to get the shortcuts or find the relevant documentation on the site. Luckily most of the popular sites today display a pop-up modal with all the keyboard shortcuts for the site when pressing <strong>Shift + ?</strong>. Note that this might not work on all the sites out there. But for most of the common ones that I use l, I find it working.</p>

<p>So the next time you spend a lot of time on a website try hitting <strong>Shift + ?</strong> to look for supported keyboard shortcuts.</p>
]]></content>
  </entry>
  
</feed>
