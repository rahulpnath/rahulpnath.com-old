<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rahul Nath]]></title>
  <link href="http://rahulpnath.com/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2017-04-20T00:01:58+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: f.lux - Make it Easy For Your Eyes]]></title>
    <link href="http://rahulpnath.com/blog/flux-make-it-easy-for-your-eyes/"/>
    <updated>2017-04-20T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/flux-make-it-easy-for-your-eyes</id>
    <content type="html"><![CDATA[<p>If you spent a lot of time in front of a computer then <a href="https://justgetflux.com/">f.lux</a> is for you. You would have heard that using laptop or mobile just before sleep is bad. It is because of the <a href="http://www.bluelightexposed.com/">blue light</a> that digital screens emit.</p>

<blockquote><p><em>During the day, computer screens look good—they&rsquo;re designed to look like the sun. But, at 9PM, 10PM, or 3AM, you probably shouldn&rsquo;t be looking at the sun.</em></p>

<p><em>f.lux fixes this: it makes the color of your computer&rsquo;s display adapt to the time of day, warm at night and like sunlight during the day.</em></p></blockquote>

<p><img class="center" alt="Flux Current Setting" src="http://rahulpnath.com/images//flux_current.png" /></p>

<p><em>Tell f.lux what kind of lighting you have, and where you live. Then forget about it. f.lux will do the rest, automatically.</em> <br/>
f.lux adjusts the screen to the room you are in and the time of the day. You can set the lighting that the room has, and it will adjust the screen for it.</p>

<p><img class="center" alt="Flux Settings" src="http://rahulpnath.com/images//flux_settings.png" /></p>

<p>I have been using f.lux for a couple of years and had it always on(except occasionally when <a href="http://www.rahulpnath.com/blog/photography-learning-to-click/">processing photos</a>). <a href="https://fluxometer.com/">f.luxometer</a> tells how much blue light f.lux removes if you are interested.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Included Scrum and Pomodoro Technique in My Morning Routine]]></title>
    <link href="http://rahulpnath.com/blog/experimenting-with-pomodoro-technique/"/>
    <updated>2017-04-18T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/experimenting-with-pomodoro-technique</id>
    <content type="html"><![CDATA[<p>A while back I had blogged about my <a href="http://www.rahulpnath.com/blog/morning_routine/">Morning Routine</a>. The routine helps set the pace for the day and in getting things done that matters to me most. During mid of December 2016, I started running once a week to get some exercise into my routine. I got interested in running and soon was running thrice a week along with some free body exercises another three days. Since this was new and exciting naturally my concentration was more on getting these done. I struggled to keep up with my <a href="http://www.rahulpnath.com/blog/maintaining-a-blogging-schedule/">blogging schedule</a>, failed to get a video out in the month of February and lost track of <a href="http://www.rahulpnath.com/blog/2016-recap/">everything else</a> (FSharp, Reading, etc.). Though I continued to wake up <a href="http://www.rahulpnath.com/blog/waking-up-early-is-all-about-waking-up-to-an-alarm/">early in the morning</a>, I could not get much done. I badly wanted to fix things up and here is what I have come up with</p>

<blockquote><p><strong>TLDR;</strong></p>

<ul>
<li>One-week sprints and setting weekly goals</li>
<li>Break the Big Rocks (or MIT&rsquo;s) into smaller tasks</li>
<li>Improve Focus using Pomodoro Technique</li>
<li>Daily Review and Weekly Review</li>
</ul>
</blockquote>

<h3>One Week Sprints</h3>

<p>The <a href="http://www.rahulpnath.com/blog/psm-learnings/">PSM course</a> I attended in January made me realize the importance is sticking to a process. I decided to do weekly sprints for managing my personal work. I have a better estimate of how much I can get done with a shorter interval. I have blocked time on Sunday morning for my weekly planning and processing the &lsquo;In-Basket.&rsquo; The In-Basket is where anything that comes up during the week goes. Todoist has an Inbox Project to which any uncategorized items go by default. I process the inbox and move them to various categories that I have setup in Todoist. Depending on the priority things make their way into the coming week or get set to &lsquo;tentative&rsquo; dates and appropriate categories.</p>

<p><img alt = "Todoist Inbox" src="http://rahulpnath.com/images/pomodoro_todoist_inbox.png" /></p>

<p><em>Big Rocks</em> are tasks that matter to you the most. Identifying them is important so that you do not miss out on them. The idea is to fill your time available over the week with the Big Rocks. The rest will find its way through, just like if you were to <a href="https://www.youtube.com/watch?v=0VNmIxkyHd8">fill a bottle with stones first and then fill it with water, sand as opposed to the other way round</a>. Big Rocks are the same as the <a href="http://www.rahulpnath.com/blog/morning_routine/">Most Important Tasks (MIT&rsquo;s)</a> that we saw earlier.</p>

<p>For me the biggest rock is family, and I have all of my evenings and weekends (rather any time they are awake, and I am home) blocked out for them. Over the past year, since I have written about my <a href="http://www.rahulpnath.com/blog/morning_routine/">Morning Routine</a> one of the MIT&rsquo;s has changed. Blogging and FSharp still stay on, but I swapped in producing videos for Github contribution. Exercise is something I have set as a <a href="http://www.rahulpnath.com/blog/2016-recap/">goal for 2017</a>. To keep up with my exercise goal, I <a href="http://www.rahulpnath.com/blog/how-i-lost-13-kilos-in-one-and-half-months/">run three times a week and body weight exercises for another three days</a>.</p>

<p>Every day I have roughly three hours of &lsquo;me time&rsquo; from morning 4 am - 7 am. Waking up was difficult for a while but then I realized it&rsquo;s all about <a href="http://www.rahulpnath.com/blog/waking-up-early-is-all-about-waking-up-to-an-alarm/">waking up to an alarm</a>. The &lsquo;me time&rsquo; acts as the bottle into which I have to fit the Big Rocks into (if you watched the <a href="https://www.youtube.com/watch?v=0VNmIxkyHd8">video above</a>). I need to optimize the things in the best way possible to fit it all in there.</p>

<h3>Pomodoro Sized Tasks</h3>

<p><a href="https://en.wikipedia.org/wiki/Pomodoro_Technique">The Pomodoro Technique</a> is a time management technique that uses a timer to break down work into intervals, traditionally 25 minutes in length, separated by short breaks. These intervals are named Pomodoro.</p>

<p>Many times in the past I have tried Pomodoro Technique on and off but was never able to stick with it. From my previous <a href="http://www.rahulpnath.com/blog/morning_routine/">Morning Routine</a> you can easily tell that I had a high-level plan on what my MIT&rsquo;s are, but did not have any specific plans or goals on what to do about them. I also left room for flexibility to choose each day to pick up things randomly. Often it happened that I took more time to blog and got a bit of time for the other MIT&rsquo;s. Though I have <a href="https://www.youtube.com/watch?v=1YTjHWjepag">automated a lot of blogging activities</a>, writing a post often took more time. And since I was not tracking this I was always happy that I achieved some of my MIT&rsquo;s daily.</p>

<p>Once I started running things changed drastically. I struggled to keep up the with everything and concentrated on just blogging. It was because I started losing focus and started getting the feeling that it&rsquo;s too hard to fit in everything. I let this happen for over a month but was not very happy with it. Mid of February I sat down and dumped all my available time onto a paper and broke them up into Pomodoro sized intervals. So now I know how much time I have in a week for getting stuff done. I then broke down my big rocks s into smaller measurable pieces. For, e.g., with blogging, I have 4 Pomodoro of work - Creating a draft (high level), Refining the post body, Writing the introduction and conclusion and finally Adding in images, proofreading, and publishing. Similarly, I broke down publishing videos (happens throughout a month) and learning F#.</p>

<blockquote><p><em>Plans are nothing; Planning is everything</em></p></blockquote>

<p>I blocked out the time for running and exercise first, then I filled in with blogging tasks, followed by videos and then with FSharp learning. I also have a <a href="https://www.goodreads.com/user_challenges/8539430">reading goal for 2017</a> and found that I can best do that during my commute to work. Though this is not a full sized pomodoro interval, I have this tracked. Weekly Planning and Daily Review are two other activities that I have started following religiously. I do my daily planning right after my <a href="http://www.rahulpnath.com/blog/psm-learnings/">Daily Scrum</a> at work so that I get to capture anything work related as well.</p>

<p><img alt = "Pomodoro Plan" src="http://rahulpnath.com/images/pomodoro_plan.png" /></p>

<p>I was surprised how easily I could fit all of these into the time I have. Since the task breakdown above is guesstimates, I have some buffer time in my plan so that I can accommodate tasks that take more time or urgent tasks that come up during the week or the laziness that kicks in at times.</p>

<h3>Increasing Focus and Removing Distractions</h3>

<p>Social Media and emails were one of the biggest distractions for me. Even though I try to reduce the amount of time I spent for these, I often ended up taking a glance at those sites now and then. It often ended distracting and taking me completely off course from the task. I decided to stick to checking personal email only once a day and work emails twice a day. As for social networks (especially Facebook), I decided to keep that to one as well. I wanted to track this as well and see how well I was with it. I use <a href="https://play.google.com/store/apps/details?id=org.isoron.uhabits&amp;hl=en">Loop Habit Tracker</a> app on my phone for tracking these habits.</p>

<p><img class="center" alt="Loop Habit Tracker" src="http://rahulpnath.com/images/pomodoro_habit_tracker.png" /></p>

<p>For tracking pomodoro I use <a href="http://www.rahulpnath.com/blog/tomighty-a-pomodoro-timer/">Tomighty, a simple Pomodoro tool</a>. It just tracks the interval and does that thing well. The Pomodoro Technique lists down different techniques to manage interruptions and distractions. Managing interruptions is particularly useful when working out of an office and using pomodoro. During the short intervals, I usually take a walk around, fill water, stretch, etc.</p>

<p>I have only been following this for three weeks. But I find this effective and hope to stick on with it for a longer time. I no longer have to spend time deciding what to do as that&rsquo;s already decided. The only thing is to do it. Having taken the reasoning part of what to do out, I find doing things is easy and I procrastinate less.  The important thing is sticking with the process and believing in it. I am sure this is going to pass as well, but for now I happy and it works for me. How do you keep yourself productive? Sound off in the comments</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring to Composite Pattern]]></title>
    <link href="http://rahulpnath.com/blog/refactoring-to-composite-pattern/"/>
    <updated>2017-04-13T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/refactoring-to-composite-pattern</id>
    <content type="html"><![CDATA[<p>I often come across functions that do multiple things. Many times such functions have a common pattern where multiple sections within the function use the same parameters for calculations. The results from these different code sections within the function are either separated by conditionals (if, switch, etc.) or combined using various arithmetic operators. The most obvious refactoring in such scenarios is to move the code sections into different functions within the same class. Having it in separate functions keeps the code readable. But on closer observation, such functions can be moved into different classes, keeping each of these code sections as the only responsibility.</p>

<h3>Identifying the Refactoring</h3>

<p>Within a function when a similar pattern of code repeats, it could be refactored into multiple classes and composed to give the same functionality. Let us take a simple example of a function where we are validating an Account object based on different criteria. The various criteria end up as conditionals within the function. This function can soon get big and difficult to manage. It also makes it harder to test. If you are adding more validations to this class over a period you are violating the Open-Closed Principle (OCP), the O in <a href="http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod">SOLID</a>. Depending on the level of abstraction that we are looking at, the class also violates the Single Responsibility Principle(SRP), the S in SOLID. The function handles validations based on different criteria.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Validate</span><span class="p">(</span><span class="n">Account</span> <span class="n">account</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">account</span><span class="p">.</span><span class="n">Email</span><span class="p">))</span>
</span><span class='line'>        <span class="n">result</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;No email&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span> <span class="nf">if</span> <span class="p">(!</span><span class="n">IsValidEmailFormat</span><span class="p">(</span><span class="n">account</span><span class="p">.</span><span class="n">Email</span><span class="p">))</span>
</span><span class='line'>        <span class="n">result</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;Email not valid&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">account</span><span class="p">.</span><span class="n">BillingDetails</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="n">result</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="s">&quot;Billing Details does not exists&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The Composite Pattern</h3>

<p><a href="https://en.wikipedia.org/wiki/Composite_pattern">Composite pattern</a> is appropriate when the client ignores the difference between the composition of objects and individual objects. The pattern helps developers to maintain the complexity of the code and also separate out class responsibilities.</p>

<blockquote><p><em>Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly</em></p></blockquote>

<p><img alt="Composite Pattern" src="http://rahulpnath.com/images/composite_pattern.png" /></p>

<h3>Refactoring</h3>

<p>In the Account validation above, the function checks for an email and validates the format, checks for valid billing details, etc. The validations could also extend on to users attached to the account and check if there is at least one user, the user has email, phone number, etc. Each of these validations can be moved into separate classes and composed together in one class so that they are all executed when an account needs to be validated. You can see a tree like hierarchy forming here, and the actual validation is composed of all these validations</p>

<p><img alt="Account Validation hierarchy" src="http://rahulpnath.com/images/composite_pattern_validation.png" /></p>

<p>The actual C# code looks like this after the refactoring.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">interface</span> <span class="n">IValidateAccount</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Validate</span><span class="p">(</span><span class="n">Account</span> <span class="n">account</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">AccountValidators</span> <span class="p">:</span> <span class="n">IValidateAccount</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">readonly</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IValidateAccount</span><span class="p">&gt;</span> <span class="n">Validators</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">AccountValidators</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Validators</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">IValidateAccount</span><span class="p">&gt;()</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="k">new</span> <span class="nf">AccountHasEmailValidator</span><span class="p">(),</span>
</span><span class='line'>          <span class="k">new</span> <span class="nf">AccountEmailIsValidValidator</span><span class="p">(),</span>
</span><span class='line'>          <span class="k">new</span> <span class="nf">AccountHasBillingDetailsValidator</span><span class="p">()</span>
</span><span class='line'>          <span class="p">...</span> <span class="c1">// Add more validators</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Validate</span><span class="p">(</span><span class="n">Account</span> <span class="n">account</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Validators</span><span class="p">.</span><span class="n">SelectMany</span><span class="p">(</span><span class="n">validator</span> <span class="p">=&gt;</span> <span class="n">validator</span><span class="p">.</span><span class="n">Validate</span><span class="p">(</span><span class="n">account</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">AccountHasEmailValidator</span> <span class="p">:</span> <span class="n">IValidateAccount</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Validate</span><span class="p">(</span><span class="n">Account</span> <span class="n">account</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">account</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">account</span><span class="p">.</span><span class="n">Email</span><span class="p">))</span>
</span><span class='line'>            <span class="k">yield</span> <span class="k">return</span> <span class="s">&quot;No email&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">AccountEmailIsValidValidator</span> <span class="p">:</span> <span class="n">IValidateAccount</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Validate</span><span class="p">(</span><span class="n">Account</span> <span class="n">account</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">account</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">account</span><span class="p">.</span><span class="n">Email</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="p">!</span><span class="n">IsValidEmail</span><span class="p">(</span><span class="n">account</span><span class="p">.</span><span class="n">Email</span><span class="p">))</span>
</span><span class='line'>            <span class="k">yield</span> <span class="k">return</span> <span class="s">&quot;Email not valid&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After the refactoring, we have separate classes for each of the validation rules. The <em>AccountValidators</em> class composes all the other validators and provides the same uniform interface for the consumers to validate an account. It calls on to all the Validators iteratively and invokes the Validate method on them. You can use Dependency Injection to inject in all validators to this class if you are not comfortable hard-wiring them. The IoC container can be setup using <a href="http://www.rahulpnath.com/blog/ioc-registration-by-convention/">registration by convention</a>, which prevents the needs for explicit registration for any new validators.</p>

<p>One other worry that I have seen common when moving to such a pattern is that - <em>We now have a lot more classes. Does that not affect the performance?</em>. If you are following SOLID principles to the core and want to maintain loose coupling in your code then creating more classes is something you cannot avoid. We do not want any
<a href="http://wiki.c2.com/?GodClass">God Classes</a> in our code and the first step towards it is to split them into different classes.</p>

<blockquote><p><em>If an Object Oriented language cannot handle the creation of many classes and objects then why should we be using it in the first place?</em></p>

<p>-<em><a href="https://vimeo.com/68378923">Big Object Graphs Up Front, Mark Seemann</a></em></p></blockquote>

<p>The composition can be complex conditions as in the case below. For, e.g., let&rsquo;s say we need to execute a different kind of algorithm to calculate based on a property.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">AccountCalculator</span> <span class="p">:</span> <span class="n">ICalculate</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">AccountCalculator</span><span class="p">(</span><span class="n">ICalculate</span> <span class="n">calculate1</span><span class="p">,</span> <span class="n">ICalculate</span> <span class="n">calculate2</span><span class="p">,</span> <span class="n">ICalculate</span> <span class="n">calculate3</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="nf">Calculate</span><span class="p">(</span><span class="n">Account</span> <span class="n">account</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">account</span><span class="p">.</span><span class="n">PropertyExists</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">calculate1</span><span class="p">.</span><span class="n">Calculate</span><span class="p">();</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">calculate2</span><span class="p">.</span><span class="n">Calculate</span><span class="p">()</span> <span class="p">+</span> <span class="n">calculate3</span><span class="p">.</span><span class="n">Calculate</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above composition makes it easy to test the composed parts and the composition separately. It also helps keep the tests simple and easy to understand. The code is separated into maintainable classes and each criteria can be modified independently.</p>

<p>Composite Pattern is a useful technique to keep code maintainable and readable. Identifying the pattern is a bit of a challenge, but the more you see it the more familiar you will be. Hope this helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Buffer - Smarter Social Sharing]]></title>
    <link href="http://rahulpnath.com/blog/buffer-smarter-social-sharing/"/>
    <updated>2017-04-11T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/buffer-smarter-social-sharing</id>
    <content type="html"><![CDATA[<p>Posts on this blog are published automatically on preset dates. I have created a custom workflow for this in Octopress, my blogging framework. If you are interested in the end to end workflow check out my <a href="https://www.youtube.com/watch?v=1YTjHWjepag">video on it</a>. Publishing to different social media was also one of the things that I wanted to automate in the whole workflow. So whenever a post is published to my blog, it also posts to the different social media (Twitter, Facebook, and LinkedIn).</p>

<p><a href="https://buffer.com/">Buffer</a> is a tool to manage all your social media networks and publish content to it at one. It is a &lsquo;<em>Write Once, Publish Everywhere</em>&rsquo; kind of service and works best for me. From the Buffer website or using <a href="https://buffer.com/extensions">browser extensions</a> posts can be manually buffered. A buffered post can be published immediately, scheduled to be shared next or scheduled for a particular date and time. You can have custom messages for each of the social network that you are sharing.</p>

<p><img src="http://rahulpnath.com/images/buffer_share.png" alt="Buffer Share" class="center" /></p>

<p>For automatic updates from my blog, I use <a href="https://buffer.com/guides/email">Buffer via Email</a>. With every buffer account, there is an associated email address. A post can be buffered by sending an email to this address in a specific format. So every time a new blog is published I send an email to my buffer account to publish immediately (@postnow). Automatic sharing posts also helps me reduce the time I spend on social networks; <a href="http://www.rahulpnath.com/blog/life-learnings-after-being-a-parent/">learning to disconnect</a></p>

<p>I am on their <a href="https://buffer.com/pricing">Free plan</a> at present. I have only less than ten posts scheduled at any point in time, and the plan provides all the features I need.</p>

<p>Hope this helps you manage your social media content.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Type in Your Native Indian Language - Setting up Indic Keyboard on Your Android Phone]]></title>
    <link href="http://rahulpnath.com/blog/how-to-setup-google-indic-keyboard-on-your-android-phone/"/>
    <updated>2017-04-06T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/how-to-setup-google-indic-keyboard-on-your-android-phone</id>
    <content type="html"><![CDATA[<p>I came across the <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.inputmethod.hindi&amp;hl=en">Google Indic Keyboard</a> recently and now enjoy writing in my native language. If you want to write in an Indian language on your Android device, then this post is for you</p>

<p>Google Indic Keyboard allows you to type messages, update on social networks or compose emails in your native language on your Android phone. At the time of writing the keyboard supports the following languages:</p>

<ul>
<li>English keyboard</li>
<li>Assamese keyboard (অসমীয়া)</li>
<li>Bengali keyboard (বাংলা)</li>
<li>Gujarati keyboard (ગુજરાતી)</li>
<li>Hindi keyboard (हिंदी)</li>
<li>Kannada keyboard (ಕನ್ನಡ)</li>
<li>Malayalam keyboard (മലയാളം)</li>
<li>Marathi keyboard (मराठी)</li>
<li>Odia keyboard (ଓଡ଼ିଆ)</li>
<li>Punjabi keyboard (ਪੰਜਾਬੀ)</li>
<li>Tamil keyboard (தமிழ்)</li>
<li>Telugu keyboard (తెలుగు)</li>
</ul>


<p>Setting up the keyboard could be a bit confusing as changing keyboards is not something that we often do. I ended up spending some time walking through the setup for some of friends and family.</p>

<h3>Setting Up</h3>

<ol>
<li><p>In Google Play Store search for [Google Indic Keyboard]. If you have not installed/updated before, tap on Install or Update to get the latest application version.</p>

<p> <img alt="Play Store" src="http://rahulpnath.com/images/indicKeyboard_playstore.png"/></p></li>
<li><p>Once installed go to any of the apps where you can open the keyboard. On the bottom right corner tap the icon to change the keyboard.</p>

<p> <img src="http://rahulpnath.com/images/indicKeyboard_changeKeyboard.png" alt="Change Keyboard Icon" /></p></li>
<li><p>From the window that pops up select &ldquo;Choose Keyboards.&rdquo;</p>

<p> <img src="http://rahulpnath.com/images/indicKeyboard_switch.png" alt ="Choose Keyboards" /></p></li>
<li><p>Enable <em>Google Indic Keyboard (English and Indic Languages)</em> listed in the list of available keyboards.</p>

<p> <img src="http://rahulpnath.com/images/indicKeyboard_enableIndicKeyboard.png" alt="Enable Google Indic Keyboard" /></p></li>
<li><p>Repeat step 2 and open up the Change Keyboard window. Select Google Indic Keyboard from the list.</p>

<p> <img src="http://rahulpnath.com/images/indicKeyboard_selected.png" alt="Select Indic Keyboard" /></p></li>
<li><p>The keyboard is now set as Google Indic Keyboard with its default language. To choose a language of your choice, select the Indian Language icon on top left.</p>

<p> <img src="http://rahulpnath.com/images/indicKeyboard_default.png" alt="Google Indic Keyboard Default" /></p></li>
<li><p>From the window that pops up select the language of your choice. For me, it&rsquo;s <a href="https://en.wikipedia.org/wiki/Malayalam">Malayalam</a>.</p>

<p> <img src="http://rahulpnath.com/images/indicKeyboard_selectLanguage.png" alt="Indic Keyboard Choose Language" /></p></li>
<li><p>Google Indic Keyboard supports different layout.</p>

<ul>
<li>Native Keyboard: Type directly in your native language.</li>
<li>Transliteration Mode: Get output in your native language by spelling out the pronunciation using English letters(For, e.g., Malayalam -> മലയാളം)</li>
<li>Handwriting mode (currently available for Hindi only) - Write directly on your phone screen.</li>
<li>Hinglish mode - If you choose “Hindi” as an input language, the English keyboard will suggest both English and Hinglish terms.</li>
</ul>


<p> <img src="http://rahulpnath.com/images/indicKeyboard_chooseLanguageMode.png" alt="Indic Keyboard Layout" /></p></li>
<li><p>Type away in your native language :)</p>

<p> <img src="http://rahulpnath.com/images/indicKeyboard_malayalam.png" alt="Indic Keyboard Native Language" /></p></li>
</ol>


<p>The transliteration mode is impressive and intuitive. Its fits in perfectly with how I was earlier using my messaging apps; native language spelled out using English letters. The better thing now is that it automatically converts into my mother tongue. The Indic keyboard brings back the forgotten love to my language. Thank you, Google!.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: AutoFixture - Make Your Unit Tests Robust]]></title>
    <link href="http://rahulpnath.com/blog/autofixture-make-your-unit-tests-robust/"/>
    <updated>2017-04-06T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/autofixture-make-your-unit-tests-robust</id>
    <content type="html"><![CDATA[<blockquote><p><em><a href="https://github.com/AutoFixture/AutoFixture">AutoFixture</a> is an open source library for .NET designed to minimize the &lsquo;<a href="http://wiki.c2.com/?ArrangeActAssert">Arrange</a>&rsquo; phase of your unit tests in order to maximize maintainability. Its primary goal is to allow developers to focus on what is being tested rather than how to setup the test scenario, by making it easier to create object graphs containing test data.</em></p></blockquote>

<p><img alt ="AutoFixture" class = "center" src="http://rahulpnath.com/images/autofixture.jpg" /></p>

<p>If you are on .NET platform and write tests (there is no reason you wouldn&rsquo;t) you should check out AutoFixture. AutoFixture makes test data setup easy. It is a generalization of the <a href="http://www.natpryce.com/articles/000714.html">Test Data Builder</a> pattern and helps make your tests more robust and maintainable. Below is a sample (as taken from the GitHub page) shows how minimal setup is required for testing. Check out the post, <a href="http://www.rahulpnath.com/blog/refactoring-test-code-removing-constructor-dependency/">Refactoring Test Code: Removing Constructor Dependency</a> to see in detail how AutoFixture can be used to make the tests more stable against changes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Theory, AutoData]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">IntroductoryTest</span><span class="p">(</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">expectedNumber</span><span class="p">,</span> <span class="n">MyClass</span> <span class="n">sut</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">result</span> <span class="p">=</span> <span class="n">sut</span><span class="p">.</span><span class="n">Echo</span><span class="p">(</span><span class="n">expectedNumber</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="n">expectedNumber</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you are new to AutoFixture, I highly recommend checking out the <a href="https://github.com/AutoFixture/AutoFixture/wiki/Cheat-Sheet">Cheat Sheet</a> to get started. Check out my post on <a href="http://www.rahulpnath.com/blog/populating-data-for-tests/">Populating Data for Tests</a> for some common patterns of using AutoFixture and how it can reduce setup code. Understanding the <a href="https://github.com/AutoFixture/AutoFixture/wiki/Internal-Architecture">Internal Architecture</a> of AutoFixture helps if you want to extend it for customization. AutoFixture integrates well with the different testing frameworks and support libraries that are popular. I mostly use it with <a href="https://xunit.github.io/">xUnit</a> and <a href="https://github.com/Moq/moq4/wiki/Quickstart">Moq</a>.</p>

<p>Hope this helps with your testing!</p>

<p><em>I am happy to have <a href="https://github.com/AutoFixture/AutoFixture/pulls?q=is:pr+is:closed+author:rahulpnath">contributed</a> (minor) to such a great library.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Went From Couch to Half Marathon in Twelve Weeks]]></title>
    <link href="http://rahulpnath.com/blog/three_months_to_a_half_marathon/"/>
    <updated>2017-04-03T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/three_months_to_a_half_marathon</id>
    <content type="html"><![CDATA[<p>It&rsquo;s about three months since I started running. I just completed my first half marathon and thought of putting together on how I have been going on with my running. I had a lot of questions myself when I started running, so hope this helps someone else taking the same journey.</p>

<div class="alert alert-warning">
<strong>DISCLAIMER!</strong> Just to make sure I get it right, I am not a doctor nor a professional runner. The below are just my personal experiences and has worked for me. If you feel you have a medical problem or are in need of professional help, please contact a professional. Always consult a doctor before starting a new diet or exercise program.
</div>


<h3>Tracking</h3>

<p>I started running using the <a href="https://play.google.com/store/apps/details?id=com.runtastic.android&amp;hl=en">Runtastic</a> application on my <a href="http://www.rahulpnath.com/blog/review-two-months-and-counting-android-and-nexus-5/">android phone</a>. The free version app offers most of the required features to start running. I upgraded to their <a href="https://www.runtastic.com/en/premium-membership">Premium version</a> primarily for <a href="https://www.runtastic.com/en/results">Runtastic Results</a>(more on it below).</p>

<p>Once I got regular with my runs I wanted better tracking, mainly to monitor heart rate. I was unsure of what a heart rate monitor would provide and if at all there is any value in getting one. I reached out to my runner friends, and all of them had one. Most of them had a Garmin, and a few had Fitbit. Until then I was planning to get the <a href="https://www.fitbit.com/au/charge2">Fitbit Charge 2</a> which comes with <a href="http://www.digitaltrends.com/wearables/whats-inside-fitness-tracker-anyway/#ixzz4cBARwI9q">optical heart rate monitoring</a>. It primarily uses an optical sensor and senses the heart rate from the wrist. The Garmin&rsquo;s make watches that are more <a href="https://buy.garmin.com/en-AU/AU/cIntoSports-cRunning-p1.html">specific for runners</a>, and since the majority of my friends owned Garmin, I decided on to get one of the Garmin Forerunner series.</p>

<p>One of the shops near to where I live was running a promotional offer on the <a href="https://buy.garmin.com/en-AU/AU/p/516105">Garmin Forerunner 630 Bundle</a>. But this model comes with a <a href="https://buy.garmin.com/en-AU/AU/p/530376">Heart Rate Monitor (HRM) Strap</a>. The strap needs to be worn around the chest during the run. Strap v Optical HRM added a new dimension of confusion to the whole tracker story. I reached out to my <a href="https://twitter.com/rahulpnath/status/835320810734694400">runner friends again</a> and surprisingly all of them had models of Garmin that uses an HRM Strap.</p>

<p><a href="https://www.wareable.com/garmin/garmin-forerunner-630-review">
<img alt="Garmin Forerunner 630 Bundle" class="center" src="http://rahulpnath.com/images/running_forerunner630.jpg" />
</a></p>

<p>The Garmin Forerunner 630 is a GPS SmartWatch with Advanced Running Metrics. It provides all the data a runner needs (and a lot more than what I need). Paired with HRM monitor it helps measure cadence, vertical oscillation and additional running dynamics like ground contact time balance, stride length and vertical ratio. I still don&rsquo;t understand all the data that it shows but find the GPS tracking, heart rate monitoring and zones, training plans and custom workouts a great help to my runs. Garmin also integrates well with <a href="https://www.strava.com/athletes/rahulpnath">Strava</a> where most of my other friends are there. The watch has a companion app on the phone and also a <a href="http://connect.garmin.com">website</a> which helps visualize the data.</p>

<h3>Exercise</h3>

<p><a href="https://www.runtastic.com/en/results">Runtastic Results</a> provides a 12-week bodyweight training plan with the <a href="https://www.runtastic.com/en/premium-membership">premium subscription</a>. I am on week five of the training. It took a while for me to get started but now I try not to miss it. The free version of the app has all exercises available as stand-alone exercises. You can use these if you don&rsquo;t want to get the premium subscription.</p>

<p><img alt="Runtastic Results" class="center" src="http://rahulpnath.com/images/running_runtastic_results.png" /></p>

<p>I am following a diet to lose weight, and I weigh now 78 (±1) kilos and has been on that for around one month. I was around 95 when I started out with the <a href="http://www.rahulpnath.com/blog/how-i-lost-13-kilos-in-one-and-half-months/">running and diet</a>.</p>

<h3>Training</h3>

<p>During the first few weeks of running, I was mostly doing free runs and trying to cover the maximum distance possible. The tracked information was useful in isolation to a specific run, and I did not do anything to improve. I then started on a beginner training plan with Runtastic
to <a href="https://www.runtastic.com/en/users/4b76cfab-734e-1658-b5e4-600759a3b066/training-plans/747577">Run 50 min after 6 weeks</a>. This put me into the mode to compare my runs with the previous and work to improve on them. Now and then I wanted to stop the plan and continue with my normal run as I felt the plan wasn&rsquo;t working. But I decided to <a href="http://www.rahulpnath.com/blog/psm-learnings/">stick to the process</a> until the end. On completion of the training, I was able to run continuously for fifty minutes, and that was a measurable improvement for me.</p>

<p><img alt="Runtastic Training Plan Certificate" src="http://rahulpnath.com/images/running_runtastic_certificate.png" /></p>

<p>My friend and colleague <a href="https://www.strava.com/athletes/12340841">Tony</a> is an avid runner. To improve on the pace, he advised starting shorter interval training. To improve pace, fix the pace to what you want to achieve and run for a specified interval (time or distance). Garmin enables you to create a custom workout setting various parameters on the run. The custom workout helps to keep up with your goals during the run.</p>

<p><img alt="Garmin Custom Workout" class="center" src="http://rahulpnath.com/images/running_garmin_workout.jpg" /></p>

<p>Running at a constant pace is important to help cover longer distances. Initially, I used to run with all my energy. So my pace often spiked and then fell and then spiked again. If you are training to improve your speed, it&rsquo;s hard to tell whether there is an improvement in speed unless you run at a constant (little variation) in speed. Check out the graph that plots your pace to check the pace variations. Most running applications show this information.</p>

<h3>Breathing</h3>

<p>Proper breathing is one the key things with running. I did not give much importance to breathing at first. I found it very hard to run long distances without stopping in between by following a random breathing pattern. There are different suggestions on breathing style. I found the article <a href="http://www.runnersworld.com/running-tips/running-on-air-breathing-technique">Running On Air: Breathing Technique</a> helpful and try to follow the pattern mentioned there (quoted below).</p>

<blockquote><p><em>The singular point of all rhythmic breathing patterns is this: Exhale on alternate footstrikes as you run. You never want to continually exhale on the same foot. The rhythmic breathing patterns I recommend call for a longer inhale than exhale. Why the longer inhale? Your diaphragm and other breathing muscles contract during inhalation, which brings stability to your core. These same muscles relax during exhalation, decreasing stability. With the goal of injury prevention in mind, it&rsquo;s best to hit the ground more often when your body is at its most stable—during inhalation. Let&rsquo;s start with a 5-count or 3:2 pattern of rhythmic breathing, which will apply to most of your running. Inhale for three steps and exhale for two.</em></p></blockquote>

<p>I particularly liked the reference to yoga and meditation in the article. It gave the realization that running is a form of meditation. Establishing a breathing rhythm helped me run longer distances comfortably and without losing breath. If you want to get a deeper understanding of breath and how it affects our life I recommend reading the book <a href="http://amzn.to/2nkIlUQ">Science Of Breath</a>.</p>

<p>I ran my first <a href="https://www.runtastic.com/en/users/4b76cfab-734e-1658-b5e4-600759a3b066/sport-sessions/58d587fdd03a4c443e6d656c">Half Marathon</a> on 25th of March. I did at a casual pace to understand what it takes to run one. I tried to keep my pace between 6:15 - 6:30 min/km and was able to finish it at 6:19 min/km. It took me 2:13:11 hours and I am glad that I did not stop even once. It was more a mental game to stay at it than anything physical, and I am happy that I could finish it successfully! Hope this helps someone else as well starting off with running. Sound off in the comments if this helps you or some tips if you are already a runner!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Improved Code Navigation in Visual Studio 2017]]></title>
    <link href="http://rahulpnath.com/blog/improved-code-navigation-in-visual-studio-2017/"/>
    <updated>2017-03-30T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/improved-code-navigation-in-visual-studio-2017</id>
    <content type="html"><![CDATA[<p>Visual Studio (VS) 2017 improves a lot on Code Navigation features.  If at all anything ever attracted me to ReSharper it was code navigation (though I have not been using it for a <a href="http://www.rahulpnath.com/blog/tools-that-I-use/">couple of years now</a>). Visual Studio lacked behind in this aspect but not anymore. The new features help improve developer productivity and here are few I found worth looking.</p>

<p>In earlier versions, the navigation features are all over the menu. In VS2017 all the navigation features are available under <strong><em>Edit -> Go To</em></strong>. Though I usually prefer using the keyboard shortcut for opening the navigate dialogs, it&rsquo;s good to have all under the same menu.</p>

<p><img class="center" alt="Visual Studio 2017 Code Navigation" src="http://rahulpnath.com/images/visualstudio_code_navigation.png" /></p>

<p><strong><em>Control + T</em></strong> brings up the Go To Dialog box which now has a lot more icons and options compared to the previous VS versions. Typing in &lsquo;<em>?</em>&rsquo; lists the different filtering criteria available when querying. It also allows searching across all the criteria by just not specifying the filtering criteria. To search for a file, type in &lsquo;<em>f FileName</em>&rsquo;. These filters also have direct shortcuts as shown in the image above.</p>

<p><img class="center" alt="Visual Studio 2017 Go To Shortcuts" src="http://rahulpnath.com/images/visualstudio_goto.png" /></p>

<p>CamelCase search is the one that attracts me the most. By entering just the capital letters of the name it quickly filters out the particular class. As shown below by just typing <em>CSG</em> it brings up the class <strong>C</strong>har<strong>S</strong>equence<strong>G</strong>enerator. Typing in the full class name is no longer required and makes navigation faster.</p>

<p><img  class="center" alt="Visual Studio 2017 Go To Camel Case Matching" src="http://rahulpnath.com/images/visualstudio_camelcasematching.png" /></p>

<p>Check out the <a href="https://www.youtube.com/watch?v=p6NVTASKa1A">video</a> to see these features and more in action. Hope it helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Rescue Time - Track Your Time]]></title>
    <link href="http://rahulpnath.com/blog/rescue-time-track-your-time/"/>
    <updated>2017-03-23T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/rescue-time-track-your-time</id>
    <content type="html"><![CDATA[<p><img alt="Rescue Time - My dashboard for March,2017" src="http://rahulpnath.com/images/rescuetime.png" /></p>

<p>Tracking is essential for measuring progress. Depending on your area of focus tracking tools differ. If it is a time-based activity that you are tracking a simple watch can suffice the need. But this can soon become an overhead. <a href="https://www.rescuetime.com/">Rescue Time</a> helps track time spent on a computer or mobile devices.</p>

<blockquote><p><em>Rescue Time is a  personal analytics service that shows you how you spend your time and provides tools to help you be more productive.</em></p></blockquote>

<p>Rescue time runs in the background and helps you track the applications and websites that you use. Most of the applications are categorized automatically; However, it also allows manual categorization. Rescue Time lets you edit an activity and assign it to various categories and set productivity levels. So if you are spending more time on an application configured as <em>very productive</em> then your overall productivity pulse is higher for the day.</p>

<p><img alt="Rescue Time - Edit Activity" src="http://rahulpnath.com/images/rescuetime_edit_activity.png" /></p>

<p>Once you have your time tracked you can then adapt yourself to be more productive. Various reports are provided to visualize the data collected. The <a href="https://www.rescuetime.com/rescuetime-pro">premium version</a> offers a lot more features to help improve productivity. I am currently on the Free Plan. Rescue Time helps inspect your current behaviors and patterns at work. Once you have the details, you can understand where your time is spent and improve on it as required. Rescue Time is available for <a href="https://www.rescuetime.com/get_rescuetime">computer and mobile devices</a>. Hope this helps track your time and become more productive!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Problems with Known Exceptions and Ignoring It]]></title>
    <link href="http://rahulpnath.com/blog/the-problems-with-known-exception-and-ignoring-it/"/>
    <updated>2017-03-21T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/the-problems-with-known-exception-and-ignoring-it</id>
    <content type="html"><![CDATA[<p>&ldquo;<em>Oh yes! That is an expected error. It is because…</em>&rdquo;.</p>

<p>How many times have you given that explanation yourself or heard the other developer tell that? Known errors or exceptions are common in applications and us developers find ways to live with such errors. At times when the number of such errors grows it becomes a problem directly or indirectly to the business. These known errors could either be exceptions in application logs, failed messages (commands/events) in a <a href="https://en.wikipedia.org/wiki/Event-driven_architecture">message based architecture</a>, alert popups in Windows client applications, etc.</p>

<p><img alt="Known Errors" src="http://rahulpnath.com/images/known_errors.png" /></p>

<p>We should try and keep known errors and exception count close to zero. Below are some of the problems that can happen by ignoring it over a period.</p>

<h4><strong>Business Value</strong></h4>

<p>Since the errors are known to us, we train ourselves or even the users to ignore them. It is easy to justify that fixing them does not have any business value as there is no direct impact. This assumption need not be true. If a piece of code has no value then why is it there in the first place? Possibly it is not having any visible effects at present but might be having an impact at a later point in time. It could also be that it is not affecting the data consistency of your system, but is a problem for an external system. There can be business flows that are written at a later point of time not being aware of this known error. Some developer time gets lost when glancing over such errors or messages in the log which directly equates to money for the business.</p>

<h4><strong>Important Errors Missed</strong></h4>

<p>If there are a lot of such known errors, it is easy for new or important ones to get missed or ignored. Depending on the frequency of the known error, it can end up flooding the logs. The logs start to get overwhelming to monitor or trace for other issues with lots of such known errors. The natural tendency for people when they find something overwhelming is to ignore it. I worked on a system which had over 250 failed messages coming to the error queue daily. It was overwhelming to monitor them and was soon getting ignored. Important errors were getting missed and often ended up as support requests for the application. Such errors otherwise could have been proactively handled, giving the end user more confidence.</p>

<h4><strong>Lower Perceived Stability</strong></h4>

<p>The overall perceived stability of the system comes down as more and more such errors happen. It is applicable both for the users and developers. When errors no longer get monitored or tracked, critical errors gets ignored. Users have to resort to other means like support requests for the errors they face. For users who are new to the system, it might take a while to get used to the known errors. These errors decrease the trust they have in the system and soon starts suspecting everything as an issue or a problem.</p>

<p>Seeing more and more of such errors does not leave a positive impact on the developers. It&rsquo;s possible that developers loose interest to work on an unstable system and start looking for a change. It is also a challenge when new members join the team. It takes time for them to get used to errors and exceptions and to learn to ignore them.</p>

<h4><strong>Stereotyping Exceptions</strong></h4>

<p>Errors of a particular type can get stereotyped together, and get ignored mistaking it for one that is already known. It is easy for different &lsquo;<em>object null reference exception</em>&rsquo; error messages to be treated as a particular error whereas it could be failing for various reasons. At one of my clients, we had a specific message type failing with the null reference error. We had identified the reason for one such message and found that it is not causing &lsquo;<em>any direct business impact</em>&rsquo; and can be ignored. The message was failing as one of the properties on the message was alphanumeric while the code expected numeric. The simple fix in the code would be to validate it, but since this was not causing any business impact it was ignored, and messages of that type kept piling up. Until later where we found that there were other message formats of the same message type failing which was for a different reason. And those messages were causing a loss of revenue to the business. But since we were stereotyping the error messages of the particular type to the one that we found invalid and not having a business impact all of such messages were ignored. The stereotyping resulted in the important message getting ignored.</p>

<h4><strong>Maintaining a Known Bugs Database</strong></h4>

<p>When having a large number of such errors, it is important to document a list of such errors.It forces us to a new document and also comes with the responsibility of maintaining it. For any new developers or users joining the system, they need to go through the documentation to verify if it is a known error or not. Internalizing these errors might take some time, and critical errors can get missed during this time. Any such document needs to be kept current and up to date as and when new errors are found or more details found for older ones. This is not the best of places where a developers time is spent.</p>

<h4><strong>Count Keeps Increasing</strong></h4>

<p>If the count of such errors is not monitored and not valued for the probability of the number of error messages increasing is higher. New errors getting introduced will not be noticed, and even when noticed it becomes acceptable. <em>We already have a lot of them, so it is fine.</em> It sets a wrong goal for the team and can soon become unmanageable.</p>

<h4><strong>New Business Flow Assuming Exception</strong>s</h4>

<p>Since the exceptions are so used to, it is highly possible that we set that as an expectation. New business flows come up expecting a certain kind of exception to be thrown or assuming a particular type of message will not get processed. Since we are so used to the fact that it happens, we take it for granted and start coding against it. It might be the last thing that happens on a project, but believe me, it happens!. Such code becomes harder to maintain and might not work once the actual exception gets fixed.</p>

<p>Ignoring exceptions and getting around to live with it can be more costly over a longer period. The further we delay action on such errors the higher the cost involved. Even though there is no immediate or direct business value seen from fixing such errors, we saw that on a longer run it could have a great impact. So try not to live with such errors but instead prioritize them with the work your team is doing and get it fixed. A fix might not always be an extra null check or a conditional to avoid the error. It might seem the easier approach to reducing the errors but will soon become a different problem. Understand the business and explore into what is causing the error. Do you have any known exceptions in the application you are working? What are you doing about it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Tomighty - A Pomodoro Timer]]></title>
    <link href="http://rahulpnath.com/blog/tomighty-a-pomodoro-timer/"/>
    <updated>2017-03-16T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/tomighty-a-pomodoro-timer</id>
    <content type="html"><![CDATA[<p><a href="http://tomighty.org/"><img alt="Tomighty, Pomodoro Timer" src="http://rahulpnath.com/images/tomighty.png" /></a></p>

<p>Over the past couple of weeks, I have been trying to improve my focus while working. With <a href="http://www.rahulpnath.com/blog/how-i-lost-13-kilos-in-one-and-half-months/">running (3 * 1.5 hours a week) and bodyweight training (3 * 30 minutes a week)</a> taking a significant part of my <a href="http://www.rahulpnath.com/blog/morning_routine/">morning routine</a>, I have less time for <a href="http://www.rahulpnath.com/blog/2016-recap/">blogging, learning, and videos</a>. Though I have known <a href="https://en.wikipedia.org/wiki/Pomodoro_Technique">The Pomodoro Technique</a> for a long time, I never practiced it regularly. With less time and more things to get done, I badly had to do something to get back on track with everything and thought of giving it a try.</p>

<blockquote><p><em>The Pomodoro Technique is a time management technique that uses a timer to break down work into intervals, traditionally 25 minutes in length, separated by short breaks. These intervals are named Pomodoro</em></p></blockquote>

<p>Initially, I was looking at apps that can integrate with <a href="http://www.rahulpnath.com/blog/todoist-manage-your-todo-list/">Todoist</a>, my task management tool. There are a lot of <a href="https://support.todoist.com/hc/en-us/articles/210762349-Pomodoro-with-Todoist">pomodoro apps that integrate with Todoist</a>, but I found all of them an overkill.
<a href="http://tomighty.org/"><strong>Tomighty</strong></a> is a simple Pomodoro timer that just tracks time and settings for the Pomodoro interval and long and short breaks. It hides away well in the Notification area of the taskbar and shows the amount of time left in the current interval. It plays sounds when an interval starts and ends. You can interrupt a Pomodoro session and restart it if required. That is all that you need from a timer to keep up with the Pomodoro technique.</p>

<p><em>If you are on a high DPI machine running Windows, the UI might not scale well. There is a <a href="https://github.com/tomighty/tomighty/issues/115">workaround</a> for this.</em></p>

<p>Sticking to the Pomodoro Technique has been working well for me, and I am able to focus better on the task at hand. I am still exploring the technique and trying to improve on it. Do you use Pomodoro Technique? If you are new to Pomodoro Technique and want to learn more check out the book, <a href="http://amzn.to/2nCSZW1">The Pomodoro Technique</a>, by Francesco Cirillo, the creator of the technique.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learnings from The Professional Scrum Master (PSM) Course]]></title>
    <link href="http://rahulpnath.com/blog/psm-learnings/"/>
    <updated>2017-03-15T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/psm-learnings</id>
    <content type="html"><![CDATA[<p>Last month I attended the Professional Scrum Master (PSM) training. <a href="https://twitter.com/rbanks54">Richard Banks</a> was the training instructor who also happens to be my <a href="http://www.rahulpnath.com/blog/finding-a-job-abroad/">colleague at Readify</a>. It is a two days training and was a great experience for me. It changed my perception towards Scrum. Before the training, I was not that fascinated about Scrum and often argued against it citing that it&rsquo;s development practices that we need to uphold more and not Scrum. After the training, I have still not changed on the latter part but have changed my perception towards Scrum. Here are some of the key takeaways for me from the training.</p>

<blockquote><p><strong>TLDR;</strong></p>

<ul>
<li>Stick to the Process</li>
<li>Make Daily Scrum (a.k.a Standup) effective by setting mini goals</li>
<li>Understand the different Roles and imbibe the responsibilities</li>
<li>Have a well-defined Definition for Done</li>
<li>Deliver value in every sprint</li>
<li>Foster team collaboration and openness</li>
<li>Scrum is not the Silver Bullet. Other development practices must be followed in parallel.</li>
</ul>
</blockquote>

<p>If you are completely new to Scrum or not so familiar with the different terms used I recommend that you read <a href="http://www.scrumguides.org/scrum-guide.html">The Scrum Guide</a>. Don&rsquo;t refrain from clicking that link thinking it is a long book. It is a short one, and you can finish it in less than an hour. It is an hour well spent!</p>

<p><img alt="Scrum Framework" src="http://rahulpnath.com/images/scrum_framework.png" /></p>

<h3>Sticking to the Process</h3>

<p>Everyone who was attending the training was already using Scrum, <em>but..</em> This is one of the common things with mostly everything and specifically with Scrum. People take parts of it and change the system to suit their needs. This is fine as long as you have tried the original process long enough to understand the pros and cons of it.</p>

<blockquote><p><em>Tweaking the process to suit existing practices as soon as you start with a new process is just <strong>resistance to change</strong></em></p></blockquote>

<p>Like Uncle Bob Martin says in clean code, dedicate yourself to the process and follow it religiously until you have mastered the process. You can start modifying the process or finding new ways once you have reached that state. But till then follow it religiously if you want to see any benefit.</p>

<blockquote><p><em>Martial artists do not all agree about the best martial art, or the best technique within a martial art. Often master martial artists will form their own schools of thought and gather students to learn from them. So we see Gracie Jiu Jistu, founded and taught by the Gracie family in Brazil. We see Hakkoryu Jiu Jistu, founded and taught by Okuyama Ryuho in Tokyo. We see Jeet Kune Do, founded and taught by Bruce Lee in the United States.</em></p>

<p><em>Students of these approaches immerse themselves in the teachings of the founder.They dedicate themselves to learn what that particular master teaches, often to the exclusion of any other master’s teaching. Later, as the students grow in their art, they may become the student of a different master so they can broaden their knowledge and practice. Some eventually go on to refine their skills, discovering new techniques and founding their own schools. None of these different schools is absolutely right. Yet within a particular school we act as though the teachings and techniques are right. After all, there is a right way to practice Hakkoryu Jiu Jitsu, or Jeet Kune Do. But this rightness within a school does not invalidate the teachings of a different school.</em></p>

<p><em>-Uncle Bob Martin, <a href="http://amzn.to/2kCHgVz">Clean Code</a></em></p></blockquote>

<h3>Effectiveness of Daily Scrum</h3>

<p>Daily Scrum or otherwise popular as Standup meetings are <strong>not about standing up to give status updates</strong>. The intent of the Daily Scrum is for the development team to get together and work out whatever is required to get closer to the goal set for the sprint. Standing up improves your activity levels and interaction levels. So it&rsquo;s recommended to stand up. The primary intent of the fifteen minutes time-boxed event (it can take no more than the allotted time) is to look at how we tracked on with our &lsquo;mini goals&rsquo; from last daily scrum and setting new &lsquo;mini goals&rsquo; till next stand up. Also, capture any impediments or blockers and make sure that there are assigned people following up on it. The daily scrum necessarily needs not be the first thing in the morning but is usually preferred. Currently, I am on an evening 4 pm daily scrum.</p>

<h3>Roles and Their Importance</h3>

<p>Understanding of the different roles in Scrum is necessary. A scrum team consists of</p>

<ul>
<li>The Product Owner</li>
<li>Scrum Master</li>
<li>Development team</li>
</ul>


<blockquote><p><em>Scrum Teams are self-organizing and cross-functional. Self-organizing teams choose how best to accomplish their work, rather than being directed by others outside the team. Cross-functional teams have all competencies needed to accomplish the work without depending on others not part of the team. The team model in Scrum is designed to optimize flexibility, creativity, and productivity.</em></p></blockquote>

<p>Most important is to understand the responsibilities of each role and adhere to it as much as possible. Remember Sticking to the Process is important. Each of the roles must have the courage and openness to act according to their role responsibilities.</p>

<h3>Definition of Done</h3>

<p>Having a prior agreed on Definition of Done is important to decide when a piece of work is done. Having a common understanding of the definition of done ensures that we do not ship half-baked features. It also provides a guide for non-functional features, which often gets sidelined or missed and later becomes a show-stopper.</p>

<blockquote><p><em>As Scrum Teams mature, it is expected that their definitions of “Done” will expand to include more stringent criteria for higher quality. Any one product or system should have a definition of “Done” that is a standard for any work done on it.</em></p></blockquote>

<h3>Delivering Value</h3>

<p>One of the golden rules is that every sprint must produce an increment that adds some business value. It need not be released to production, but it must be production ready. The Product Owner makes release decisions.</p>

<blockquote><p><em>The Increment is the sum of all the Product Backlog items completed during a Sprint and the value of the increments of all previous Sprints</em></p></blockquote>

<p>This hints that having sprints solely for handling Technical debts, Refactoring, Project setup, Infrastructure setup, etc. are not recommended.</p>

<h3>Team collaboration and Effectiveness</h3>

<p>The process heavily depends on the people encompassing The Scrum Team. So it is important to have a good rapport amongst the team members. The team members should be comfortable and open with each other. The team needs to be self-organizing. When starting with Scrum, this might not be the case, and the team must recognize this and work towards self-organizing. The Scrum Master must encourage and guide the team to reach that state of independence.</p>

<blockquote><p><em>When the values of commitment, courage, focus, openness, and respect are embodied and lived by the Scrum Team, the Scrum pillars of <strong>transparency, inspection, and adaptation</strong> come to life and build trust for everyone.</em></p></blockquote>

<p><img alt="Scrum Values" src="http://rahulpnath.com/images/scrum_values.png" /></p>

<p>The Scrum Guide calls out the above five core values that a team should demonstrate for the effectiveness of the framework. The Scrum team should constantly try to demonstrate these core values and try to improve on this.</p>

<h3>Not the Silver Bullet for Development</h3>

<blockquote><p><em>There&rsquo;s a mess I&rsquo;ve heard about with quite a few projects recently. It works out like this:</em></p>

<ul>
<li><em>They want to use an agile process, and pick Scrum</em></li>
<li><em>They adopt the Scrum practices, and maybe even the principles</em></li>
<li><em>After a while progress is slow because the code base is a mess</em></li>
</ul>


<p> <em>-Martin Fowler, <a href="https://martinfowler.com/bliki/FlaccidScrum.html">Flaccid Scrum</a></em></p></blockquote>

<p>If you are looking up to Scrum to solve the problems with the quality of code you are delivering, you are with the wrong process. Scrum does not talk anything specific about software development and related practices. <a href="https://en.wikipedia.org/wiki/Extreme_programming">Extreme Programming</a> is one process that is specific to coding and software development and is also a type of agile software development. It talks about the various development practices lays down strict rules <a href="http://www.extremeprogramming.org/rules.html">related to software development</a>. Again if you decide to follow this do that religiously - Sticking to the Process matters. Picking up only certain aspects of different school of thoughts might not provide the desired output always. <a href="http://www.rahulpnath.com/blog/is-code-coverage-a-lie/">Code Coverage</a> if one such practice that is picked up in isolation and seen to produce not much value.</p>

<p>Given these new insights, I now feel that following a proven process framework, like Scrum will help a team achieve its goals. The core values that Scrum lays down is important for any team. From my personal experience, the reason why I used to look down upon Scrum is that it was not practiced the way it was laid out. Like in software development premature optimization of the process is likely to give less value. The training provided a lot of new insights and helped me to have a better understanding of the Scrum process framework. I did the <a href="https://www.scrum.org/professional-scrum-certifications/professional-scrum-master-i-assessment">PSM I</a> and <a href="https://www.scrum.org/professional-scrum-certifications/professional-scrum-product-owner-i-assessment">PSPO I</a> (I had attended this training last year but never took the test until now) assessment and got certified.  Are you using Scrum, what are your experiences?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Track Current File in Visual Studio Solution Explorer]]></title>
    <link href="http://rahulpnath.com/blog/track-current-file-in-visual-studio-solution-explorer/"/>
    <updated>2017-03-08T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/track-current-file-in-visual-studio-solution-explorer</id>
    <content type="html"><![CDATA[<p>While working on large codebases, I want my Solution Explorer to be synchronized with the current working file. With the solution explorer in sync, it makes navigating to other related files, adding new classes in the same location, renaming files, etc. faster.</p>

<p><img alt="Track Active Item in Solution Explorer, Visual Studio" src="http://rahulpnath.com/images/visualstudio_trackActiveItem.png" /></p>

<p>The setting to keep the items in sync is configurable in Visual Studio and is turned off by default. You can enable this by checking the &lsquo;<strong><em>Track Active Item in Solution Explorer</em></strong>&rsquo; under <em>Options -> Projects and Solutions -> General</em>. You can navigate there quickly using <a href="http://www.rahulpnath.com/blog/quick-launch-in-visual-studio/">Visual Studio Quick Launch (Ctrl + Q)</a>. Just type &lsquo;<em>Track active</em>&rsquo; and you will get the quick link to the setting. Keep it checked, and off you go, the solution explorer and the current file will be in sync.</p>

<p>PS: Visual Studio 2017 is now available.<a href="https://www.visualstudio.com/downloads/">Get it</a> if you have not already!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Populating Data for Tests]]></title>
    <link href="http://rahulpnath.com/blog/populating-data-for-tests/"/>
    <updated>2017-03-07T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/populating-data-for-tests</id>
    <content type="html"><![CDATA[<p>Populating data for tests is the section of the test that usually ends up making tests more coupled with the code that it is testing. Coupling makes tests more fragile and refactoring code harder because of breaking tests. We should try to avoid coupling with the implementation details when writing tests. Let us see a few options that we have to populate test data and constructing object graphs (chain of objects branched off from the root object). I use <a href="https://xunit.github.io/">xUnit.net</a> as my test framework, but you can use these techniques in your choice of framework.</p>

<p><a href="http://xunitpatterns.com/Data-Driven%20Test.html" class="center" title="Image from xUnit Test Patterns"><img class="center" alt="Populating Test Data" src="http://rahulpnath.com/images\test_data.gif" /></a></p>

<p>Let&rsquo;s start with some simple tests on a Customer class shown below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Customer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">Guid</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">FullName</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">FirstName</span> <span class="p">+</span> <span class="s">&quot; &quot;</span> <span class="p">+</span> <span class="n">LastName</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">Address</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s say we need to test that the FullName property returns as expected. We will use a <em>Theory</em> type tests for testing different combinations of first and last name. xUnit.net includes support for two different major types of unit tests: facts and theories</p>

<blockquote><p><em>Facts are tests which are always true. They test invariant conditions.</em></p>

<p><em>Theories are tests which are only true for a particular set of data.</em></p></blockquote>

<p>Theories allow us to create parameterized tests with which we can run a given test with different parameter options. Like in this example we need to test the Customer class with different set of First and Last Name combinations. As you can see below the test is attributed with Theory Attribute, and we use the InlineData attribute to pass static values to the test. Using these parameters we are now able to test for different combinations of first and last names. The test populates only the required properties on Customer object for testing FullName.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Theory]</span>
</span><span class='line'><span class="na">[InlineData(&quot;Adobe&quot;, &quot;Photoshop&quot;, &quot;Adobe Photoshop&quot;)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;Visual&quot;, &quot;Studio&quot;, &quot;Visual Studio&quot;)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;Rode&quot;, &quot;Podcaster&quot;, &quot;Rode Podcaster&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">CustomerFullNameReturnsExpected</span><span class="p">(</span><span class="kt">string</span> <span class="n">firstName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">lastName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">expected</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Fixture setup</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">customer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Customer</span><span class="p">()</span> <span class="p">{</span> <span class="n">FirstName</span> <span class="p">=</span> <span class="n">firstName</span><span class="p">,</span> <span class="n">LastName</span> <span class="p">=</span> <span class="n">lastName</span> <span class="p">};</span>
</span><span class='line'>    <span class="c1">// Exercise system</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">actual</span> <span class="p">=</span> <span class="n">customer</span><span class="p">.</span><span class="n">FullName</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Verify outcome</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">actual</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Teardown</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><em>Tests help refine the public API as they are the first consumers</em></p></blockquote>

<p>The tests above acts as a clue indicating that the three properties - FirstName, LastName, FullName are related and go hand-in-hand. These tests are a strong indication that these properties can be grouped together into a class and possibly tested separately. We can extract these properties into a <a href="http://www.rahulpnath.com/blog/thinking-beyond-primitive-values-value-objects/">Value Object</a> for e.g. Name. I will not go into the implementation details of that, and I hope you can do that you own.</p>

<p>The above tests still have a high dependency on the code that it is testing - <strong><em>the constructor</em></strong>. Imagine if we had a lot of such tests that constructs the Consumer class inline in the setup phase. All tests will break if the class constructor changes. We saw in the <a href="http://www.rahulpnath.com/blog/refactoring-test-code-removing-constructor-dependency/">refactoring to remove constructor dependency</a> how to remove such dependencies and make the tests independent of the constructor dependencies.  We can introduce Object Mother or Test Data Builder pattern as mentioned in the article. Optimizing further we can also use <a href="https://github.com/AutoFixture/AutoFixture">AutoFixture</a> to generate test data. Moving into these patterns or AutoFixture brings in an added benefit as well; the rest of properties on the Customer class also gets populated by default.</p>

<h3>Explicitly Setting Properties</h3>

<p>By introducing AutoFixture, we no longer need to create the Customer object explicitly. We can use the Fixture class generate a Customer class for us. Using AutoFixture, this can be achieved in at least two ways (I am not sure if there are more ways of doing this).</p>

<figure class='code'><figcaption><span>Using Fixture class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Theory]</span>
</span><span class='line'><span class="na">[InlineData(&quot;Adobe&quot;, &quot;Photoshop&quot;, &quot;Adobe Photoshop&quot;)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;Visual&quot;, &quot;Studio&quot;, &quot;Visual Studio&quot;)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;Rode&quot;, &quot;Podcaster&quot;, &quot;Rode Podcaster&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">CustomerFullNameReturnsExpected</span><span class="p">(</span><span class="kt">string</span> <span class="n">firstName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">lastName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">expected</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Fixture setup</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">fixture</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Fixture</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">customer</span> <span class="p">=</span> <span class="n">fixture</span><span class="p">.</span><span class="n">Build</span><span class="p">&lt;</span><span class="n">Customer</span><span class="p">&gt;()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">With</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">FirstName</span><span class="p">,</span> <span class="n">firstName</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">With</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">LastName</span><span class="p">,</span> <span class="n">lastName</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Create</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// Exercise system</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">actual</span> <span class="p">=</span> <span class="n">customer</span><span class="p">.</span><span class="n">FullName</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Verify outcome</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">actual</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Teardown</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Using Injected Object</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Theory]</span>
</span><span class='line'><span class="na">[InlineAutoData(&quot;Adobe&quot;, &quot;Photoshop&quot;, &quot;Adobe Photoshop&quot;)]</span>
</span><span class='line'><span class="na">[InlineAutoData(&quot;Visual&quot;, &quot;Studio&quot;, &quot;Visual Studio&quot;)]</span>
</span><span class='line'><span class="na">[InlineAutoData(&quot;Rode&quot;, &quot;Podcaster&quot;, &quot;Rode Podcaster&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">CustomerFullNameReturnsExpected</span><span class="p">(</span><span class="kt">string</span> <span class="n">firstName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">lastName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">expected</span><span class="p">,</span> <span class="n">Customer</span> <span class="n">customer</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Fixture setup</span>
</span><span class='line'>    <span class="n">customer</span><span class="p">.</span><span class="n">FirstName</span> <span class="p">=</span> <span class="n">firstName</span><span class="p">;</span>
</span><span class='line'>    <span class="n">customer</span><span class="p">.</span><span class="n">LastName</span> <span class="p">=</span> <span class="n">lastName</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Exercise system</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">actual</span> <span class="p">=</span> <span class="n">customer</span><span class="p">.</span><span class="n">FullName</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// Verify outcome</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">actual</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Teardown</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In both cases, we explicitly set the required properties. The above test is similar to the previous test that we wrote without AutoFixture. But no longer are we dependent on the constructor. In the second way of using AutoFixture I used <em>InlineAutoData</em> attribute, that is part of <em>Ploeh.AutoFixture.Xunit2</em>. This attribute automatically does the fixture initialization and injects the Customer object for us. For all the values that it can match from the inline parameter list, it uses the provided values. It starts generating random values once all the parameters passed inline are used. In this case, only Customer object is created by AutoFixture.</p>

<h3>AutoFixture and Immutable types</h3>

<p>When using immutable types or properties with private setters, we cannot set the property value after it is created.</p>

<blockquote><p><em>AutoFixture was originally build as a tool for Test-Driven Development (TDD), and TDD is all about feedback. In the spirit of GOOS, you should listen to your tests. If the tests are hard to write, you should consider your API design. AutoFixture tends to amplify that sort of feedback.</em></p>

<p>-<em><a href="http://stackoverflow.com/a/20816487/1948745">Mark Seemann</a> (creator of AutoFixture)</em></p></blockquote>

<p>In these cases, the suggested approach is something closer to the manual <a href="http://www.natpryce.com/articles/000714.html">Test Data Builder</a> we saw in the <a href="http://www.rahulpnath.com/blog/refactoring-test-code-removing-constructor-dependency/">refactoring example</a>. We can either have an explicit test data builder class or define extension methods on the immutable type such that it changes just the specified property and returns all other values same, as shown below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Name</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">readonly</span> <span class="kt">string</span> <span class="n">FirstName</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">readonly</span> <span class="kt">string</span> <span class="n">LastName</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">FullName</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">FirstName</span> <span class="p">+</span> <span class="s">&quot; &quot;</span> <span class="p">+</span> <span class="n">LastName</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Name</span><span class="p">(</span><span class="kt">string</span> <span class="n">firstName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">lastName</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Enforce parameter constraints</span>
</span><span class='line'>        <span class="n">FirstName</span> <span class="p">=</span> <span class="n">firstName</span><span class="p">;</span>
</span><span class='line'>        <span class="n">LastName</span> <span class="p">=</span> <span class="n">lastName</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">Name</span> <span class="nf">WithFirstName</span><span class="p">(</span><span class="kt">string</span> <span class="n">firstName</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">Name</span><span class="p">(</span><span class="n">firstName</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="n">LastName</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As shown the <em>WithFirstName</em> method returns a new Name class with just the first name changed. Again we do not need these <em>WithXXX</em> methods for all the properties. Only when there is a need to change any of the property values as part of the requirement do we need to introduce such methods and even test it. This again drives to the above point of using tests to guide the API design, from the feedback.</p>

<h3>Customization</h3>

<p>In cases where we have validations in constructor to hold the class constraints, we cannot rely on the random values generated by AutoFixture. For example.
- The string should be at least ten characters in length for a Name class
- Start date should be less than the End date for a date range class</p>

<p>Without any custom code if we are to rely on AutoFixture to generate us, such classes, the tests will not be predictable. Depending on the random value that AutoFixture generates it might create a valid instance or throw an exception. To make this consistent, we can add Customization to ensure predictability.</p>

<p>For the DateRange class below we can add the following Customization.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">DateRange</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">readonly</span> <span class="n">DateTime</span> <span class="n">EndDate</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">readonly</span> <span class="n">DateTime</span> <span class="n">StartDate</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">DateRange</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">startDate</span><span class="p">,</span> <span class="n">DateTime</span> <span class="n">endDate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">endDate</span> <span class="p">&lt;</span> <span class="n">startDate</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">&quot;End date cannot be less than the start date&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">StartDate</span> <span class="p">=</span> <span class="n">startDate</span><span class="p">;</span>
</span><span class='line'>        <span class="n">EndDate</span> <span class="p">=</span> <span class="n">endDate</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>DateRange Customization</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">DateRangeCustomization</span> <span class="p">:</span> <span class="n">ICustomization</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Customize</span><span class="p">(</span><span class="n">IFixture</span> <span class="n">fixture</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">fixture</span><span class="p">.</span><span class="n">Customizations</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">DateRangeSpecimenBuilder</span><span class="p">());</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">DateRangeSpecimenBuilder</span> <span class="p">:</span> <span class="n">ISpecimenBuilder</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">object</span> <span class="nf">Create</span><span class="p">(</span><span class="kt">object</span> <span class="n">request</span><span class="p">,</span> <span class="n">ISpecimenContext</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">requestAsType</span> <span class="p">=</span> <span class="n">request</span> <span class="k">as</span> <span class="n">Type</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">DateRange</span><span class="p">).</span><span class="n">Equals</span><span class="p">(</span><span class="n">requestAsType</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">times</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">CreateMany</span><span class="p">&lt;</span><span class="n">DateTime</span><span class="p">&gt;();</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">DateRange</span><span class="p">(</span><span class="n">times</span><span class="p">.</span><span class="n">Min</span><span class="p">(),</span> <span class="n">times</span><span class="p">.</span><span class="n">Max</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">NoSpecimen</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The customization gets invoked every time a DateRange object is requested using the fixture. It then invokes this custom code that we have added in and creates a valid DateRange object. For the tests use the customization as part of the fixture either using a custom data attribute or explicitly adding the customization into the Fixture class.</p>

<h3>Mocking behavior</h3>

<p><a href="http://xunitpatterns.com/Mock%20Object.html">Mock Objects</a> is a popular way to unit test classes in isolation. For the external dependencies that a <a href="http://xunitpatterns.com/SUT.html">System Under Test</a> (SUT) has, the dependencies are mocked using a mocking framework. In these cases, we can setup the external dependencies to return different values as we expect for different tests and test the logic of the SUT and how it responds. Such tests are usually more coupled with the implementation as we have to setup the mocks prior. So we need to have an understanding of the return values expected from dependencies and the parameters expected by the dependencies. I use Moq framework for mocking, and AutoFixture has a library that helps integrate well with it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">HttpResponseMessage</span> <span class="nf">Get</span><span class="p">(</span><span class="n">Guid</span> <span class="n">id</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">customer</span> <span class="p">=</span> <span class="n">CustomerRepository</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">customer</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Request</span><span class="p">.</span><span class="n">CreateResponse</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">NotFound</span><span class="p">,</span> <span class="s">&quot;Customer not Found with id &quot;</span> <span class="p">+</span> <span class="n">id</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">Request</span><span class="p">.</span><span class="n">CreateResponse</span><span class="p">(</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">OK</span><span class="p">,</span> <span class="n">customer</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Theory]</span>
</span><span class='line'><span class="na">[InlineAutoMoqData]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">CustomerControllerGetWithNoCustomerReturnsNotFound</span><span class="p">(</span>
</span><span class='line'>    <span class="n">Guid</span> <span class="n">customerId</span><span class="p">,</span>
</span><span class='line'><span class="na">    [Frozen]</span><span class="n">Mock</span><span class="p">&lt;</span><span class="n">ICustomerRepository</span><span class="p">&gt;</span> <span class="n">customerRepository</span><span class="p">,</span>
</span><span class='line'>    <span class="n">CustomerController</span> <span class="n">sut</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Fixture setup</span>
</span><span class='line'>    <span class="n">customerRepository</span><span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="n">customerId</span><span class="p">)).</span><span class="n">Returns</span><span class="p">(</span><span class="k">null</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">expected</span> <span class="p">=</span> <span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">NotFound</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Exercise system</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">actual</span> <span class="p">=</span> <span class="n">sut</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="n">customerId</span><span class="p">).</span><span class="n">StatusCode</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Verify outcome</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">actual</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The tests above uses <a href="http://blog.nikosbaxevanis.com/2012/07/31/autofixture-xunit-net-and-auto-mocking/">InlineAutoMoqData attribute</a> which is a customized xUnit data attribute that uses Moq framework to inject dependencies. The Mock<ICustomerRepository> represents a mocked interface implementation. Behavior is setup on the mock using the Setup method. By using <a href="http://blog.ploeh.dk/2010/03/17/AutoFixtureFreeze/">Frozen</a> attribute for the Mock parameter, we tell AutoFixture to create only one instance of the mocked object and then use the same instance for any future requests of that type. This forces the same instance of the repository to be injected into the CustomerController class as well when it asks for a ICustomerRepository to AutoFixture.</p>

<p>Creating test data is an important aspect of any test. Making sure that you minimize the dependencies on the implementation detail is important to make your tests more robust. This allows the code to be refactored as long as some of the core contracts that we are testing remain the same. AutoFixture helps minimize the code in <a href="http://xunitpatterns.com/Four%20Phase%20Test.html">Fixture Setup phase</a>, which otherwise tends to grow bigger. Hope this helps you with your tests!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Switching Subscriptions Under Same Azure Account to Access Key Vaults]]></title>
    <link href="http://rahulpnath.com/blog/switching-between-subscriptions-under-same-azure-account-to-access-key-vault/"/>
    <updated>2017-03-02T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/switching-between-subscriptions-under-same-azure-account-to-access-key-vault</id>
    <content type="html"><![CDATA[<p><img class="center" alt="Azure Powershell Get-AzureRmContext" src="http://rahulpnath.com/images/powershell_azurermcontext.png" /></p>

<p>When accessing Key Vault using Powershell it can be a bit tricky when you have multiple subscriptions under the same account. The Key Vault cmdlets being under the <a href="http://www.rahulpnath.com/blog/how-the-deprecation-of-switch-azuremode-affects-azure-key-vault/">Resource Manager (RM) mode</a> depends on the current RM Subscription. The Key Vault cmdlets enable you to manage only the key vaults under the selected subscription. To access the key vaults in other subscriptions, you need to switch the selected RM subscription.</p>

<blockquote><p><em>Use <strong>Select-AzureRmSubscription</strong> to switch the selected RM subscription</em></p></blockquote>

<p> The <a href="https://docs.microsoft.com/en-us/powershell/resourcemanager/azurerm.profile/v2.2.0/get-azurermcontext">Get-AzureRmContext</a> returns the metadata used for RM requests. The SubscriptionId/SubscriptionName property indicates the selected subscription. Any Key Vault cmdlets (or RM cmdlets) will work based off that selected subscription. To change the selected Azure RM subscription use the Select-AzureRmSubscription cmdlet. Pass in the SubscriptionId or the Subscription Name that you wish to switch to and the RM Subscription will be set to that. To get the SubscriptionId/SubscriptionName of the subscriptions under your account use <a href="https://msdn.microsoft.com/en-us/library/dn495302.aspx">Get-AzureSubscription</a> cmdlet.</p>

<pre><code class="` powershell"> Get-AzureRmContext
 Get-AzureRmSubscription
 Select-AzureRmSubscription -SubscriptionName  "Your Subscription Name"
 Select-AzureRmSubscription -SubscriptionId  a5287dad-d5a2-4060-81bc-4a06c7087e72
</code></pre>

<p> I struggled with this for some time, so hope it helps you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manage Certificates in Azure Key Vault]]></title>
    <link href="http://rahulpnath.com/blog/manage-certificates-in-azure-key-vault/"/>
    <updated>2017-03-01T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/manage-certificates-in-azure-key-vault</id>
    <content type="html"><![CDATA[<p><a href="http://perspecsys.com/" class="center" title="Image By Perspecsys Photos, from https://www.flickr.com/photos/111692634@N04/15855489588"><img class="center" alt="Security" src="http://rahulpnath.com/images\pfx_security.jpg" /></a></p>

<p>In one of my earlier posts, <a href="http://www.rahulpnath.com/blog/pfx-certificate-in-azure-key-vault/">PFX Certificate in Azure Key Vault</a>, we saw how to save PFX Certificate files in Key Vault as Secrets. Azure Key Vault now <a href="https://blogs.technet.microsoft.com/kv/2016/09/26/get-started-with-azure-key-vault-certificates/">supports certificates as a first class citizen</a>. This means one can manage certificates as a separate entity in KeyVault. At the time of writing, Key Vault supports managing certificates using Powershell. The <a href="http://www.rahulpnath.com/blog/managing-key-vault-through-azure-portal/">portal UI</a> is still to catch up on this feature. Using the Key Vault&rsquo;s certificate feature, we can create a new certificate: self-signed or signed by a supported certificate authority, import an existing certificate, retrieve the certificate with or without a private key part.</p>

<h3>Setting up the Vault</h3>

<p>With the introduction of the certificates feature, a new command line switch is added to <a href="https://docs.microsoft.com/en-us/powershell/resourcemanager/azurerm.keyvault/v2.2.0/set-azurermkeyvaultaccesspolicy">Set-AzureRmKeyVaultAccessPolicy</a> cmdlet <em><a href="https://docs.microsoft.com/en-us/powershell/resourcemanager/azurerm.keyvault/v2.2.0/set-azurermkeyvaultaccesspolicy#PermissionsToCertificates">-PermissionToCertificates</a></em>. It supports the following values - <em>all, get, create, delete, import, list, update, deleteissuers, getissuers, listissuers, setissuers, managecontacts</em>. For a key vault created after the introduction of this feature, the property is set to <em>all</em> for the creator&rsquo;s access policy. For any vault created before the introduction of the feature, this property needs to be explicitly set to start using it.</p>

<h3>Create Certificate</h3>

<p>To create a new certificate in the vault use the <a href="https://docs.microsoft.com/en-us/powershell/resourcemanager/azurerm.keyvault/v2.2.0/add-azurekeyvaultcertificate">Add-AzureKeyVaultCertificate</a> cmdlet. The cmdlet requires a Certificate Policy that specifies the subject name, issuer name, validity, etc.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$certificatepolicy</span> <span class="p">=</span> <span class="nb">New-AzureKeyVaultCertificatePolicy</span>   <span class="n">-SubjectName</span> <span class="s2">&quot;CN=www.rahulpnath.com&quot;</span>   <span class="n">-IssuerName</span> <span class="n">Self</span>   <span class="n">-ValidityInMonths</span> <span class="n">12</span>
</span><span class='line'><span class="nb">Add-AzureKeyVaultCertificate</span> <span class="n">-VaultName</span> <span class="s2">&quot;VaultFromCode&quot;</span> <span class="n">-Name</span> <span class="s2">&quot;TestCertificate&quot;</span> <span class="n">-CertificatePolicy</span> <span class="nv">$certificatepolicy</span>
</span></code></pre></td></tr></table></div></figure>


<p>Executing the above creates a certificate in the vault with the given name. To retrieve the certificates in the key vault use the. The certificate object identifier is similar to that of Keys and Secrets as shown below. This identifier is used to identify a certificate uniquely.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>https://vaultfromcode.vault.azure.net:443/certificates/TestCertificate
</span></code></pre></td></tr></table></div></figure>


<p>To retrieve all the certificates in a vault use the <a href="https://docs.microsoft.com/en-us/powershell/resourcemanager/azurerm.keyvault/v2.2.0/get-azurekeyvaultcertificate">Get-AzureKeyVaultCertificate</a> cmdlet passing in the VaultName. To get details of a certificate pass in the Certificate Name as well.</p>

<p><img class="center" alt="Azure Key Vault, GetAzureKeyVaultCertificate" src="http://rahulpnath.com/images\keyvault_getazurekeyvaultcertificate.png" /></p>

<p>When creating a new certificate make sure that a Key or Secret does not exist with the same name in the vault. Azure adds in a key and secret with the same name as that of the certificate when creating a new certificate as shown in the above image. The key is required when for certificates created with non-exportable key (-<a href="https://docs.microsoft.com/en-us/powershell/resourcemanager/azurerm.keyvault/v2.1.0/new-azurekeyvaultcertificatepolicy#KeyNotExportable">KeyNotExportable</a>). Non-exportable certificates do not have the private portion contained in secret. Any certificate operation requiring the private part should use the key. For consistency, the key exists for exportable certificates as well.</p>

<p>To import an existing certificate into the key vault, we can use <a href="https://docs.microsoft.com/en-us/powershell/resourcemanager/azurerm.keyvault/v2.1.0/import-azurekeyvaultcertificate">Import-AzureKeyVaultCertificate</a> cmdlet. The certificate file should be either PFX or PEM format.</p>

<h3>Recreate Certificate Locally from Key Vault</h3>

<p>Often we will have to recreate the certificate on the machine where the application using it is running. To create the private portion of the certificate retrieve it from the Secret, load it into a certificate collection, export and save the file locally.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$kvSecret</span> <span class="p">=</span> <span class="nb">Get-AzureKeyVaultSecret</span> <span class="n">-VaultName</span> <span class="s1">&#39;VaultFromCode&#39;</span> <span class="n">-Name</span> <span class="s1">&#39;TestCertificate&#39;</span>
</span><span class='line'><span class="nv">$kvSecretBytes</span> <span class="p">=</span> <span class="no">[System.Convert]</span><span class="p">::</span><span class="n">FromBase64String</span><span class="p">(</span><span class="nv">$kvSecret</span><span class="p">.</span><span class="n">SecretValueText</span><span class="p">)</span>
</span><span class='line'><span class="nv">$certCollection</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">System</span><span class="p">.</span><span class="n">Security</span><span class="p">.</span><span class="n">Cryptography</span><span class="p">.</span><span class="n">X509Certificates</span><span class="p">.</span><span class="n">X509Certificate2Collection</span>
</span><span class='line'><span class="nv">$certCollection</span><span class="p">.</span><span class="n">Import</span><span class="p">(</span><span class="nv">$kvSecretBytes</span><span class="p">,</span><span class="nv">$null</span><span class="p">,</span><span class="no">[System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]</span><span class="p">::</span><span class="n">Exportable</span><span class="p">)</span>
</span><span class='line'><span class="nv">$protectedCertificateBytes</span> <span class="p">=</span> <span class="nv">$certCollection</span><span class="p">.</span><span class="n">Export</span><span class="p">(</span><span class="no">[System.Security.Cryptography.X509Certificates.X509ContentType]</span><span class="p">::</span><span class="n">Pkcs12</span><span class="p">,</span> <span class="s1">&#39;test&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nv">$pfxPath</span> <span class="p">=</span> <span class="s1">&#39;C:\cert\test.pfx&#39;</span>
</span><span class='line'><span class="no">[System.IO.File]</span><span class="p">::</span><span class="n">WriteAllBytes</span><span class="p">(</span><span class="nv">$pfxPath</span><span class="p">,</span> <span class="nv">$protectedCertificateBytes</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Similarly to export the public portion of the certificate</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$cert</span> <span class="p">=</span> <span class="nb">Get-AzureKeyVaultCertificate</span> <span class="n">-VaultName</span> <span class="s1">&#39;VaultFromCode&#39;</span> <span class="n">-Name</span> <span class="s1">&#39;TestCertificate&#39;</span>
</span><span class='line'><span class="nv">$filePath</span> <span class="p">=</span><span class="s1">&#39;C:\cert\TestCertificate.cer&#39;</span>
</span><span class='line'><span class="nv">$certBytes</span> <span class="p">=</span> <span class="nv">$cert</span><span class="p">.</span><span class="n">Certificate</span><span class="p">.</span><span class="n">Export</span><span class="p">(</span><span class="no">[System.Security.Cryptography.X509Certificates.X509ContentType]</span><span class="p">::</span><span class="n">Cert</span><span class="p">)</span>
</span><span class='line'><span class="no">[System.IO.File]</span><span class="p">::</span><span class="n">WriteAllBytes</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">,</span> <span class="nv">$certBytes</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Delete Certificate</h3>

<p>To delete a certificate use the Remove-AzureKeyVaultCertificate cmdlet and pass in the vault name and certificate name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nb">Remove-AzureKeyVaultCertificate</span> <span class="n">-VaultName</span> <span class="s1">&#39;VaultFromCode&#39;</span> <span class="n">-Name</span> <span class="s1">&#39;TestCertificate&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hope this helps you to get started with managing certificates in Azure Key Vault.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Key Vault Talk at Sydney Alt.Net]]></title>
    <link href="http://rahulpnath.com/blog/azure-key-vault-talk-at-sydney-alt-dot-net/"/>
    <updated>2017-02-28T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/azure-key-vault-talk-at-sydney-alt-dot-net</id>
    <content type="html"><![CDATA[<p>First off I would like to thank you all who made for the talk on <a href="https://www.meetup.com/Sydney-Alt-Net/events/236864792/">Azure Key Vault at Alt.Net Sydney</a>. I enjoyed giving the session and hope you liked it as well.</p>

<p><img alt="Azure Key Vault session, Alt.Net Sydney - Pic by Richard Banks" src="http://rahulpnath.com/images/altnet_sydney_azurekeyvault.jpg" /></p>

<p>As a follow up to the talk, I thought of putting up a list of resources that will help you jump start with Azure Key Vault.</p>

<ul>
<li>If you don&rsquo;t have an Azure Subscription yet, get a <a href="https://azure.microsoft.com/en-us/free/">free Azure account with $200 credit</a> or join the <a href="https://www.visualstudio.com/dev-essentials/">Visual Studio Dev Essentials</a> to get monthly Azure credits and a lot more.</li>
<li>The official documentation for Azure Key Vault is <a href="https://docs.microsoft.com/en-au/azure/key-vault/">available here</a></li>
<li>For a high-level overview and how to quickly get started with Key Vault, check out my <a href="https://msdn.microsoft.com/en-us/magazine/mt422585.aspx">MSDN Article</a>.</li>
<li>Check out various aspects of Key Vault, Authentication, using from ARM templates, etc. <a href="http://www.rahulpnath.com/blog/category/azure-key-vault/">on this blog</a>.</li>
<li><a href="https://azure.microsoft.com/en-us/resources/templates/?term=%22key+vault%22">Azure Resource Manager (ARM) Quickstart templates</a> for Azure Key Vault. Check out more about <a href="http://www.rahulpnath.com/blog/managing-azure-key-vault-using-azure-resource-manager-arm-templates/">Key Vault ARM templates</a>.</li>
<li><a href="https://github.com/elize1979/AzureKeyVaultExplorer">Azure Key Vault Explorer</a> is an open source Windows standalone tool to manage secrets.</li>
<li><a href="https://www.youtube.com/watch?v=5p2dQdTsUvE">TechEd talk</a> on Azure Key Vault by the Program Manager</li>
<li><a href="https://www.youtube.com/user/rahulnathp/videos?sort=dd&amp;shelf_id=0&amp;view=0">Videos</a> on Key Vault</li>
<li>Get the <a href="https://www.slideshare.net/rahulpnath/azure-key-vault">powerpoint presentation</a></li>
</ul>


<p>Thank you again for attending the talk. For any queries feel free to reach out to the <a href="https://social.msdn.microsoft.com/Forums/azure/en-US/home?forum=AzureKeyVault">Azure Key Vault MSDN forum</a> or me. Hope this helps you to jump start on using Key Vault in applications you are building currently.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Todoist: Manage your To-Do List]]></title>
    <link href="http://rahulpnath.com/blog/todoist-manage-your-todo-list/"/>
    <updated>2017-02-23T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/todoist-manage-your-todo-list</id>
    <content type="html"><![CDATA[<p>If you are the kind of person who wants to manage a list of tasks and like checking it off and moving towards a goal then this post is for you. I am a fan of the <a href="http://amzn.to/2gsJaed">Getting Things Done</a> methodology by David Allen and found the book and <a href="https://www.youtube.com/results?search_query=david+allen">videos</a> mind blowing. Ever since reading the book for the first time I had been searching for a tool that helps to follow the GTD process. Though the GTD process in itself is not tied to a particular tool and works well with pen and paper, I am more towards a digital medium, as that&rsquo;s where I spent most of my time. I have tried a lot of different tools, almost everything that came up when searching for to do lists.</p>

<p>Some of the key features that I was looking out of a to-do list application are</p>

<ul>
<li>Quickly Capture tasks from anywhere</li>
<li>Availability on multiple devices</li>
<li>Able to group and categorize tasks</li>
<li>Search</li>
<li>Assign date time and set reminders</li>
<li>Simplistic and easy user interface</li>
</ul>


<p><img alt="Todoist" src="http://rahulpnath.com/images/todoist.png" /></p>

<p><a href="https://todoist.com/">Todoist</a> is one platform that I found the best matching with my needs and have been with it for over two years. It started with a <a href="http://www.rahulpnath.com/blog/staying-organized-finding-a-system-to-manage-it-all/#comment-1528539219">comment by my friend on one of my posts</a>. Since then I am using Todoist. After trying for a couple of weeks, I quickly moved on to their <a href="https://todoist.com/premium">premium version</a> for the various features that it provides. Todoist has a clean and minimalistic interface and never stays in the way of getting things done. Be it the mobile app, the desktop app or the Chrome plugin; it enables easy task management. Any new task added by default goes into the Inbox which can be categorized and processed later. This processing flow fits with the process outlined in GTD. Tasks can be assigned labels and categories, set priorities, set for action on a specific date. Tasks added to one app is synced across all the apps seamlessly., enabling a smooth and consistent experience across.</p>

<blockquote><p><em>Getting Things Done is tool agnostic. Tools do not matter; it is about the process. Choose any tool that works for you, for me it&rsquo;s Todoist</em></p></blockquote>

<p>Todoist had all the features that I was looking out for in a task management application. Give Todoist a try if you are looking out for a task management application. Irrespective of the tools that you use it is your ability to stick to a plan and focus on tasks that will help you reach your goal.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Three Day Trip to Coffs Harbour from Sydney]]></title>
    <link href="http://rahulpnath.com/blog/three-day-trip-to-coffs-harbour-from-sydney/"/>
    <updated>2017-02-20T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/three-day-trip-to-coffs-harbour-from-sydney</id>
    <content type="html"><![CDATA[<p>With the Australia Day (and Indian Republic Day) falling on a Thursday I got a long weekend by taking the Friday off. Me, Parvathy (my wife) and Gautham (my son) decided to head off to <a href="https://goo.gl/maps/Tb4awz6cx6H2">Coffs Harbour</a>, which is a six-hour drive from Sydney. We started off at six, Thursday morning.</p>

<p>This was the first time Parvathy, and I was doing a road trip this long with Gautham and had no idea what to expect. Gautham was wide awake from the start of the trip till we reached Coffs Harbour. But it was all right traveling with him. The trip was also the first since he was fully toilet-trained. We did stop at 3 places on the way but were happy to do that. We stopped for breakfast at <a href="https://goo.gl/maps/H72Loz9zofk">Hungry Jack&rsquo;s, Beresfield</a> and had quick burger, fries and hash brown. We continued to have this same breakfast throughout the trip, for it was fast and enabled to get on with the day quickly. Deciding, ordering and eating at a cafe is much more time-consuming. After two more stops, we reached Coffs Harbour by two in the noon. Since both me and Parvathy are trying to <a href="http://www.rahulpnath.com/blog/how-i-lost-13-kilos-in-one-and-half-months/">eat healthy (since a month)</a>, we decided to keep our lunch light. Mostly we had carrots, cucumber, and some nuts. For Gautham, we usually got something on the way.</p>

<h3>Day1 (Thursday)</h3>

<p>We headed straight to Royal Palms Motor Inn and dropped our bags and quickly freshened up. The weather forecast said it would rain, but luckily there was no rain and was a pleasant climate. We headed off straight to Jetty Beach, where we spent the rest of our day. The beach was calm and had a great walk by the side of it. The sand looked like a mirror, and in the beginning, Gautham was even cautious not to break it. We enjoyed the time there and stayed there till five. After having a wash down at the beach showers, we headed back to the hotel. Gautham fell asleep the moment we got into the car. We reached the hotel and stayed in the car till seven so not to disturb his sleep. Once he woke up, we headed off to Bombay Brasserie, an Indian restaurant right next to the hotel. We usually prefer other food option while eating outside to try different cuisine. But during the trip, we stuck to Indian hotels as Gautham often ends up eating more from there, as it was similar to food at home. We had a nice tandoori platter, Nan, rice and ice-cream. By half past eight, we reached back at the hotel, had a bath and went to sleep by ten.</p>

<p><a href="https://500px.com/photo/197577329/jetty-beach-by-rahul-nath"><img alt="Jetty Beach, Coffs Harbour" src="http://rahulpnath.com/images/coffs_harbour_jetty_beach.jpg" /></a>
<img alt="Jetty Beach, Coffs Harbour" src="http://rahulpnath.com/images/coffs_harbour_jetty_beach_toys.jpg" /></p>

<h3>Day 2 (Friday)</h3>

<p>We all slept in a bit late today and woke up by seven. Luckily Parvathy was up and ready by then. After a quick fresh up, we started off to Dorrigo. Picked up our breakfast burgers on the way and headed off straight to Dorrigo. It was just over an hours drive from the hotel and a scenic one too. Dorrigo has a <a href="http://www.visitnsw.com/destinations/north-coast/coffs-harbour-area/dorrigo/attractions?&amp;">lot of attractions</a>, but we just did the <a href="http://www.visitnsw.com/destinations/north-coast/coffs-harbour-area/dorrigo/attractions/skywalk-lookout">Skywalk Lookout</a>, <a href="http://www.visitnsw.com/destinations/north-coast/coffs-harbour-area/dorrigo/attractions/wonga-walk">Wonga Walk</a>, <a href="http://www.visitnsw.com/destinations/north-coast/coffs-harbour-area/dorrigo/attractions/walk-the-birds-boardwalk">Walk with The Birds Boardwalk</a> and <a href="http://www.visitnsw.com/destinations/north-coast/coffs-harbour-area/dorrigo/attractions/dangar-falls">Dangar Falls</a>. We spent half a day there covering all these. The lookout and the walks were superb. It was a pleasant walk in the forest as it had rained the night before. By the time we headed back, Gautham was fast asleep after having a delicious cake with cream and juice. Woolgoolga was the next stop and was around one and half hours away. By three in the evening, we hit the <a href="https://goo.gl/maps/1fBYqWHDnyC2">beach</a>. By five we headed back to the hotel. On the way, we drove through <a href="https://goo.gl/maps/Pm7jh9nJRCM2">Emerald beach</a> to the hotel. After a quick fresh up we set out for dinner by six. We tried a different Indian restaurant today and ate to our full. By ten we hit the bed.</p>

<p><img alt="Dorrigo Lookout, Coffs Harbour" src="http://rahulpnath.com/images/coffs_harbour_dorrigo_skyway_lookout.jpg" />
<img alt="Dorrigo Lookout, Coffs Harbour" src="http://rahulpnath.com/images/coffs_harbout_dorrigo_lookout.jpg" /></p>

<h3>Day 3 (Saturday)</h3>

<p>I woke up at half past five and went for a run. I <a href="https://www.runtastic.com/en/users/4b76cfab-734e-1658-b5e4-600759a3b066/sport-sessions/588ba8d079a46318f38e5d10">ran by the boat jetty to jetty beach and through the Coffs Coast State Park</a>. The route was scenic, and I enjoyed it.By seven I was at the hotel and got ready to checkout. We checked out by eight, grabbed a <a href="http://www.boostjuice.com.au/products">Boost smoothie</a> and burger and headed off to <a href="https://goo.gl/maps/P9e9sx5eib62">Sawtell beach</a>. It was a hot day, and the sun was already up and high. We just had a quick walk by the beach side and headed straight to <a href="http://www.visitnsw.com/destinations/north-coast/coffs-harbour-area/nambucca-heads">Nambucca heads</a> as we wanted to spend more time there. The walk by the Nambucca river is excellent. You can see the river meeting the sea here, and it is a beautiful sight. The river is calm and up to waist height and we can easily walk. We spent around two hours there and started our way back home at around one in the noon. It is around six hours drive, and with a couple of stops along the way, we reached home by eight in the evening.</p>

<p><img alt="Nambucca Heads, Coffs Harbour" src="http://rahulpnath.com/images/coffs_harbour_nambucca_heads.jpg" /></p>

<p>It was a good three-day break and completely disconnected from work and social media. It was refreshing, and the drive was great too. This was our first long drive after coming to Sydney and enjoyed it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Screenshots with Snagit]]></title>
    <link href="http://rahulpnath.com/blog/screenshots-with-snagit/"/>
    <updated>2017-02-16T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/screenshots-with-snagit</id>
    <content type="html"><![CDATA[<p>I have been using <a href="https://www.techsmith.com/screen-capture.html">Snagit</a> for over one and half years and been loving it. Snagit gives you a way to create and edit screenshots or record videos to show a process, provide detailed feedback, or share information with the people who need it most. It tucks away neatly to the side of your screen and is there up and ready when you want to grab a screen capture or record a quick video. The screen capture is easily triggered using keyboard shortcuts (Ctrl + Alt + S by default). Once captured, it takes you to the Snagit editor where you can add a lot more details to the captured image.</p>

<p><img alt="Snagit" class="center" src="http://rahulpnath.com/images/snagit.gif" /></p>

<p>Some of the  features that I often use are:</p>

<ul>
<li><strong>Blur (or Redact)</strong>: Use to hide or disguise sensitive information. Often my screenshots contain sensitive content which I want to blur.</li>
<li><strong>Step</strong>: Add a series of numbers or letters to label steps or items in a capture. This feature helps in guiding a step by step process in a screenshot.</li>
<li><strong>Crop</strong>: Common feature in all image editors.</li>
<li><strong>Spotlight &amp; Magnify</strong>: Magnify, blur or dim a selected area of the picture. This feature is useful to highlight specific parts of the image.</li>
<li><strong>Callouts, Text, and Arrows</strong>: Again pretty much standard with most image editors.</li>
</ul>


<p>Snagit has been a great fit for blogging and makes creating screenshots easy. Communicating with images is much faster with these great features. If you take a lot of screenshots give <a href="https://www.techsmith.com/download/snagit/">Snagit a try</a>, you will love it!</p>
]]></content>
  </entry>
  
</feed>
