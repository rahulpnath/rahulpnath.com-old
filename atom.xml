<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rahul Nath]]></title>
  <link href="http://rahulpnath.com/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2018-01-26T00:02:23+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Trips for the (Long) Weekend Around Sydney]]></title>
    <link href="http://rahulpnath.com/blog/trips-for-the-long-weekend-around-sydney/"/>
    <updated>2018-01-09T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/trips-for-the-long-weekend-around-sydney</id>
    <content type="html"><![CDATA[<p>A while back I had written about various <a href="http://www.rahulpnath.com/blog/one-day-trips-around-sydney/">one-day trip options around Sydney</a>. Here is a list of places that we traveled around Sydney during long weekend breaks with a day or two overnight stays.</p>

<blockquote><p><a href="https://en.wikipedia.org/wiki/Wikipedia:Too_long;_didn%27t_read"><strong>TLDR;</strong></a></p>

<ul>
<li><a href="http://www.rahulpnath.com/blog/three-day-trip-to-coffs-harbour-from-sydney/">Coffs Harbour</a></li>
<li><a href="https://www.portmacquarieinfo.com.au/">Port Macquarie</a></li>
<li><a href="http://www.grandpacificdrive.com.au/">Grand Pacific Drive</a></li>
<li><a href="https://www.visitnsw.com/destinations/blue-mountains?nst=0">Blue Mountains</a></li>
<li><a href="https://visitcanberra.com.au/">Canberra</a></li>
</ul>
</blockquote>

<h3><a href="http://www.rahulpnath.com/blog/three-day-trip-to-coffs-harbour-from-sydney/">Coffs Harbour</a></h3>

<p><a href="http://www.rahulpnath.com/blog/three-day-trip-to-coffs-harbour-from-sydney/">Coffs Harbour</a> is one of the places that I liked the most of all my trips. It&rsquo;s been almost a year since I made my trip and the memories are still fresh. The beaches are great, especially the Jetty Beach. The rainforest walk in Dorrigo was the best I have had to date, especially because of the rain the night before. Coffs Harbour is perfect for a 3-4 days trip and there are a lot of places to visit around.</p>

<p><img alt="Jetty Beach, Coffs Harbour" src="http://rahulpnath.com/images/coffs_harbour_jetty_beach_toys.jpg" /></p>

<h3><a href="https://www.portmacquarieinfo.com.au/">Port Macquarie</a></h3>

<p>We headed off to Port Macquarie to celebrate Gauthams birthday. Gautham likes strawberries a lot which was why we chose Port Macquarie. <a href="http://www.ricardoes.com/">Ricardoes Tomatoes &amp; Strawberries</a> is located just ten minutes north of Port Macquarie and provides a unique experience for picking your own strawberries. You can spend around 2-3 hours here and make sure you don&rsquo;t miss the scones from the cafe. Port Macquarie is also a great place for whale watching and we headed off on an early morning trip to be with the whales. The boat ride (<a href="https://www.portjet.com.au/">PortJet</a>) in itself is an experience and to our luck, we were able to see around 3 whales up close. We also went to Dooragan National Park, Kattang, Perpendicular Point and Charles Hamsey lookout.</p>

<p><img alt="Whale watching and Strawberry picking, Port Macquarie" src="http://rahulpnath.com/images/port_macquarie.jpg" /></p>

<h3><a href="http://www.grandpacificdrive.com.au/">Grand Pacific Drive</a></h3>

<p>The Grand Pacific Drive makes a great one day trip as well as a multi-day trip for those who want to take their time along this stretch of land. Starting from Royal National Park and stretching all the way to Sapphire Coast, this makes a great drive with beautiful scenery and also a lot of places to visit. The <a href="http://www.grandpacificdrive.com.au/">Grand Pacific Drive</a> site has all the details that you need to plan your trip. It also has a trip planner that makes planning easier. If you want to cover most of the places along the way during a single trip, it is best to give it 2-3 days. During my trip, I stopped over at Wollongong and only made my way till Kiama.</p>

<p><a href="http://www.grandpacificdrive.com.au/">
    <img src="http://rahulpnath.com/images/sydney_trip_gpd.png" class="center" alt="Grand Pacific Drive" />
</a></p>

<h3><a href="https://www.visitnsw.com/destinations/blue-mountains?nst=0">Blue Mountains</a></h3>

<p>Just 90 minutes from Sydney by car, the Blue Mountains has a lot of attractions worth visiting, making it a good place for an extended weekend trip. Wentworth Falls, Echo Point, and Three Sisters are some of the popular lookouts. <a href="https://www.scenicworld.com.au/">Scenic World</a> offers some good rides and entertainment for kids. I liked the worlds steepest incline railway ride in particular. The entry tickets are a bit overpriced though.</p>

<p><img alt="Three Sisters, Blue Mountains" class="center" src="http://rahulpnath.com/images/three_sisters_blue_mountains.jpg" /></p>

<p>Jenolan Caves is another one hour drive from the Blue Mountains and is a must-do. It&rsquo;s great for people of all ages and if you have kids they will love it. Make sure you check the different <a href="http://www.jenolancaves.org.au/">cave options</a> and choose one that fits the people in your group. Booking a spot in advance might help and make sure you arrive on time. The drive up there might be a bit slower so give enough buffer time before your cave walk starts.</p>

<h3><a href="https://visitcanberra.com.au/">Canberra</a></h3>

<p>Unlike Sydney, Canberra is a planned city and you can tell that from the moment you enter it. It&rsquo;s a beautiful little city with lots of variety of things to visit. We started off with the <a href="https://www.cockingtongreen.com.au/">Cockington Green Gardens</a> followed by the <a href="http://nationaldinosaurmuseum.com.au/">National Dinosaur museum</a>. You can spend almost half a day with these and try out the <a href="https://visitcanberra.com.au/eat-and-drink/57031e8c5d234a7604ea80b2/the-hamlet">Hamlet, Food Trucks</a>. The <a href="https://www.aph.gov.au/Visit_Parliament">Parliment House</a> and <a href="https://www.awm.gov.au/">Australian War Memorial</a> is also worth visiting. If you time your visit during September-October you can also see the <a href="https://visitcanberra.com.au/events/56b23aea266140594567dbbe/floriade">Floriade</a> - the tulip flower festival.</p>

<p><img alt="Floriade Tulip Festival, Canberra" class="center" src="http://rahulpnath.com/images/canberra_tulip_festival.jpg" /></p>

<p>Nelson Bay, Hunter Valley, Orange, Port Stephens etc are some of the places that are on our list but could not make it yet. I moved over to Brisbane end of last year and not sure when I will have another chance to explore more around Sydney. But I have new places to look forward to now - Exploring Brisbane!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up Build and Deploy Pipeline for a .NET Core Console Application]]></title>
    <link href="http://rahulpnath.com/blog/build-and-deploy-a-net-core-console-application/"/>
    <updated>2018-01-03T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/build-and-deploy-a-net-core-console-application</id>
    <content type="html"><![CDATA[<p>I was given a console application written in .NET Core 2.0 and asked to set up a continuous deployment pipeline using <a href="https://www.jetbrains.com/teamcity/">TeamCity</a> and <a href="https://octopus.com/">Octopus Deploy</a>. I struggled a bit with some parts, so thought it&rsquo;s worth putting together a post on how I went about it. If you have a better or different way of doing things, please shout out in the comments below.</p>

<p>At the end of this post, we will have a console application that is automatically deployed to a server and running, anytime a change is pushed to the associated source control repository.</p>

<h3>Setting Up TeamCity</h3>

<p>Create a <a href="https://confluence.jetbrains.com/display/TCD10/Creating+and+Editing+Projects">New Project</a> and add a <a href="https://confluence.jetbrains.com/display/TCD10/Creating+and+Editing+Build+Configurations">new build configuration</a> just like you would for any other project. Since the application is in .NET Core, install the <a href="https://github.com/JetBrains/teamcity-dotnet-plugin">.NET CLI plugin</a> on the TeamCity server.</p>

<p><img src="http://rahulpnath.com/images/net_core_teamcity_build_steps.png" alt="Build Steps to build .Net Core"></p>

<p>The first three build steps use the .NET CLI to <a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-restore?tabs=netcore2x">Restore</a>, <a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-build?tabs=netcore2x">Build</a> and <a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-publish?tabs=netcore2x">Publish</a> the application. Thee three steps restore the dependencies of the project, builds it and publishes all the relevant DLL&rsquo;s into the publish folder.</p>

<p>The published application now needs to be packaged for deployment. In my case, deployments are managed using Octopus Deploy. For .NET projects, the preferred way of packaging for Octopus is using <a href="https://octopus.com/docs/packaging-applications/creating-packages/nuget-packages/using-octopack">Octopack</a>. However, OctoPack does not support .NET Core projects. The recommendation is to either use <a href="https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-pack?tabs=netcore2x">dotnet pack</a> or <a href="https://octopus.com/docs/packaging-applications/creating-packages/nuget-packages/using-octo.exe">Octo.exe pack</a>. Using the latter I have set up a Command Line build step to pack the contents of the published folder into a zip (.nupkg) file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>octo pack --id ApplicationName --version %build.number% --basePath published-app
</span></code></pre></td></tr></table></div></figure>


<p>The NuGet package is published to the NuGet server used by Octopus. Using the <a href="https://octopus.com/docs/api-and-integration/teamcity">Octopus Deploy: Create Release</a> build step, a new release is triggered in Octopus Deploy.</p>

<h3>Setting Up Octopus Deploy</h3>

<p>Create a <a href="https://octopus.com/docs/deployment-process/projects">new project</a> in Octopus Deploy to manage deployments. Under the Process tab, I have two <a href="https://octopus.com/docs/deployment-process/steps">steps</a> - one to deploy the Package and another to start the application.</p>

<p><img src="http://rahulpnath.com/images/net_core_octopus_deploy_process.png" alt="Octopus Deploy Process Steps"></p>

<p>For the Deploy Package step I have enabled Custom Deployment Scripts and <a href="https://octopus.com/docs/deploying-applications/deploying-asp.net-core-web-applications/json-configuration-variables-feature">JSON Configuration variables</a>. Under the pre-deployment script, I stop any existing .NET applications. If multiple .NET applications are running on the box, select your application explicitly.</p>

<figure class='code'><figcaption><span>Pre Deployment Script</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nb">Stop-Process</span> <span class="n">-Name</span> <span class="n">dotnet</span> <span class="n">-Force</span> <span class="n">-ErrorAction</span> <span class="n">SilentlyContinue</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once the package is deployed, the custom script starts up the application.</p>

<figure class='code'><figcaption><span>Run App</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="n">cd</span> <span class="n">C</span><span class="err">:</span><span class="p">\</span><span class="n">DeploymentFolder</span>
</span><span class='line'><span class="nb">Start-Process</span> <span class="n">dotnet</span> <span class="p">.\</span><span class="n">ApplicationName</span><span class="p">.</span><span class="n">dll</span>
</span></code></pre></td></tr></table></div></figure>


<p>With all that set, any time a change is pushed into the source control repository, TeamCity picks that up, build and triggers a deployment to the configured environments in Octopus Deploy. Hope this helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Text Editing - Convert Text Casing]]></title>
    <link href="http://rahulpnath.com/blog/text-editing-convert-text-casing/"/>
    <updated>2018-01-02T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/text-editing-convert-text-casing</id>
    <content type="html"><![CDATA[<p>Often when working with SQL queries, I come across the need to capitalize SQL keywords across in a large query. For, e.g., to capitalize SELECT, WHERE, FROM clauses in an SQL query. When it is a large query/stored procedure, it is faster done using some text editor. Sublime Text is my preferred editor for such kind of text manipulations.</p>

<p>Sublime Text Editor comes with a few built-in text casing converters that we can use, to convert text from one case to another. Using the <a href="https://en.wikipedia.org/wiki/Simultaneous_editing">simultaneous editing</a> feature, we can combine it with case conversion and manipulate large documents easily.</p>

<p><img src="http://rahulpnath.com/images/textediting_convert_case.png" alt="Convert case options in sublime text" ></p>

<p>For example, let&rsquo;s say I have this below SQL query. As you can notice the SELECT and FROM keywords are cased differently across the query.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">select</span> <span class="o">*</span> <span class="k">From</span> <span class="n">Table1</span>
</span><span class='line'><span class="k">select</span> <span class="o">*</span> <span class="k">From</span> <span class="n">Table2</span>
</span><span class='line'><span class="k">select</span> <span class="o">*</span> <span class="k">From</span> <span class="n">Table3</span>
</span><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">Table4</span>
</span><span class='line'><span class="k">Select</span> <span class="o">*</span> <span class="k">From</span> <span class="n">Table5</span>
</span></code></pre></td></tr></table></div></figure>


<p>To standardize this (preferably capitalize all), highlight one of the &lsquo;select&rsquo; keywords and highlight all occurrences of the keyword (ALT + F3). Once all occurrences of &lsquo;select&rsquo; is highlighted, bring up the <a href="http://docs.sublimetext.info/en/latest/extensibility/command_palette.html">command pallete</a> (CTRL + SHIFT + P on windows) and search for &lsquo;Convert Case&rsquo;. From the options listed choose the case that you want to convert. All selected occurrences of the keyword will now be in the selected case.</p>

<p>Hope this helps you when you have a lot of text case manipulations to be done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2017: What Went Well, What Didn't and Goals]]></title>
    <link href="http://rahulpnath.com/blog/2017-recap/"/>
    <updated>2017-12-29T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/2017-recap</id>
    <content type="html"><![CDATA[<p><img class="center" alt="Posts per month - 2016" src="http://rahulpnath.com/images/happy_new_year.png"/></p>

<p><a href="http://www.rahulpnath.com/blog/2016-recap/">A year</a> has gone by so fast, and it is again time to do a year review.</p>

<blockquote><p><strong>TLDR;</strong></p>

<p>2017 was the transformation year. Regular exercise and healthy eating helped <a href="http://www.rahulpnath.com/blog/how-i-lost-13-kilos-in-one-and-half-months/">loose around 20 kilos</a>. Lots of travel and blogging made it an excellent year. Reading, Photography and Open source did not go that great. Looking forward to 2018!</p></blockquote>

<h3>What went well</h3>

<h4><strong>Blogging</strong></h4>

<p>It has been both good and a bad year as far as this blog. Including the &lsquo;<a href="http://www.rahulpnath.com/blog/category/tipow/">Tip of the Week</a>&rsquo; series I wrote seventy-six posts this year with an average of over six posts per month. This is the good part, as it is well past the goal of a <em>minimum four posts a month</em> goal set last year. But looking at the actual posts per month graph below, it is clear that I have fallen short of it on an actual month by month basis. Up until August, I had a steady stream of posts coming in, from when it started dropping down, with even months (November) with no posts. Mainly it&rsquo;s my laziness to blame, but I can also tell reasons like Vietnam trip, Shifting to Brisbane, etc.</p>

<p><img src="http://rahulpnath.com/images/2017_postpermonth.png" alt="Posts per month in the year 2017" /></p>

<h4><strong>Running</strong></h4>

<p>I had started running towards the end of December 2016. One of my goals for 2017 was running, and it has had a good improvement. Ran over 750 kilometers including a half marathon. I am yet to participate in any running events and am planning to in the coming year. I have also started cycling, and it is an excellent way to cross train.</p>

<p><a href="https://2017.strava.com/en-us/videos/92aff78b819c502351b85b8ef27e35025cd97adf/">
    <img src="http://rahulpnath.com/images/2017_sport.jpg" alt="Year in Sport" />
</a></p>

<h4><strong>Travel</strong></h4>

<p>Did our first international holiday to Vietnam for ten days and was a great experience. Also went around Australia visiting Blue Mountains, Canberra, Port Macquarie, Brisbane and lots of <a href="http://www.rahulpnath.com/blog/one-day-trips-around-sydney/">one-day trips around Sydney</a>. Mandarin Picking, Strawberry picking and Whale watching were some of the top activities for the year.</p>

<p><img src="http://rahulpnath.com/images/strawberyy_picking.jpg" alt="Strawberry Picking, Ricardoes" /></p>

<h3>What didn&rsquo;t go well</h3>

<ul>
<li><p><strong>Reading</strong> Had set out with a <a href="https://www.goodreads.com/challenges/5493-2017-reading-challenge">goal of 21 books</a> but ended up finishing only ten books. Of the books I read liked <a href="https://www.amazon.com/Mindset-Psychology-Carol-S-Dweck/dp/0345472322">Mindset</a> and <a href="https://www.amazon.com/How-Win-Friends-Influence-People/dp/1439167346/">How to Win Friends and Influence People,</a> was the best.</p></li>
<li><p><strong>Photography</strong>
One trip every three months and post photos were one another goal. The travel part went good (see above), but my DSLR always remained in the bag. Except for a few pictures on the phone camera, there was not much photography done.</p></li>
<li><p><strong>FSharp</strong>
FSharp was again on and off this year. Apart from a <a href="http://www.rahulpnath.com/blog/todoist-template-transformer-transform-tasks-to-x-days-from-now/">small utility that I created for Todoist</a>, I did not do much F# work.</p></li>
</ul>


<h3>Goals for 2018</h3>

<ul>
<li><p><strong>Blogging</strong> Stick to 4 posts a month. Need to get back on schedule.</p></li>
<li><p><strong>Running</strong> Attend few running events. Run a marathon.</p></li>
<li><p><strong>Swimming</strong> Having started cycling along with running, has got me thinking about a triathlon. The only thing between is swimming, and I have no clue how to swim. Learning to swim is one of the key goals for the upcoming year. Target is to be able to swim one km.</p></li>
<li><p><strong>Open Source</strong> Start working on a side project. Need to find a matching project first.</p></li>
<li><p><strong>Reading</strong> Read 15 books</p></li>
</ul>


<p>Wishing you all a Happy and Prosperous New Year!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Laps in Training Mode - Garmin Watches]]></title>
    <link href="http://rahulpnath.com/blog/laps-in-training-mode-garmin-watches/"/>
    <updated>2017-12-28T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/laps-in-training-mode-garmin-watches</id>
    <content type="html"><![CDATA[<p>I recently upgraded to a Garmin Fenix 3 HR from my <a href="http://www.rahulpnath.com/blog/three_months_to_a_half_marathon/">Forerunner 630</a>. After a few runs with the Fenix 3, I realized that in <a href="https://twitter.com/rahulpnath/status/928145529606873088">Training Mode it does not do auto lap</a>. I have a custom training workout for a 10k with no repeat modes in it. This workout was what I used on my FR630, and it used to auto lap at 1km. That no longer happens in the Fenix 3 HR.</p>

<blockquote><p><strong>Software Details</strong></p>

<p><em>Fenix 3 HR</em>: 4.70</p>

<p><em>Forerunner 630</em>: 7.50(bdd586f)</p></blockquote>

<p><img src="http://rahulpnath.com/images/garmin_auto_lap_training.png" alt="Garming Auto Lap Not working in Training Mode, Fenix 3 HR" /></p>

<p>After googling around, I understood the auto lap under training mode is a feature only available to specific models/software versions. One of the reasoning behind it is auto lap might create issues if people are training in intervals larger than 1km. Breaking into laps at every 1km will make it harder/nearly impossible to compare their intervals. For workouts that you want auto lap at 1km (or at any custom distances), you can use Repeat feature as shown below. Setting up the workout as 10 x 1km helps to analyze the run at 1km intervals.</p>

<p><img src="http://rahulpnath.com/images/garmin_auto_lap_training_repeat.png" alt="Garming Auto Lap Using Repeat, Fenix 3 HR" /></p>

<p>Depending on the model/software version of your Garmin watch you might have to tweak your workout plans. Hope this helps</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scheduling Recurring Jobs With a Cool-Off Period]]></title>
    <link href="http://rahulpnath.com/blog/scheduling-recurring-jobs-with-a-cool-off-period/"/>
    <updated>2017-12-24T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/scheduling-recurring-jobs-with-a-cool-off-period</id>
    <content type="html"><![CDATA[<p><a href="https://flic.kr/p/8ys6Hs" class="center" ><img class="center" alt="Scheduling" src="http://rahulpnath.com/images\scheduling_jobs.jpg" /></a></p>

<p>At one of my clients, they had a requirement of scheduling various rules to sent our alert messages via SMS, Email, etc. A Rule consists of below and a few other properties</p>

<ul>
<li><strong>Stored Procedure</strong>: The Stored Procedure (yes you read it correctly) to check if an alert needs to be raised</li>
<li><strong>Polling Interval</strong>: The time interval in which a Rule needs to be checked.</li>
<li><strong>Cool-Off Period</strong>: Time to wait before running Rule again after an alert was raised.</li>
</ul>


<p>All Rules are stored in a database. New rules can be added and existing ones updated via an external application. Since the client is not yet in the Cloud, using any of Azure Functions, Lambda, Web Jobs, etc. are out of the question. It needs to be a service running on-premise, so I decided to keep it as a Windows service.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'> <span class="k">public</span> <span class="k">class</span> <span class="nc">Rule</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">StoredProc</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">TimeSpan</span> <span class="n">PollingInterval</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">TimeSpan</span> <span class="n">CoolOffPeriod</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because of my past good experiences with <a href="https://www.hangfire.io/">HangFire</a> I initially set off using that only to discover soon that it can schedule jobs only to the minute level. Even though this is a <a href="https://github.com/HangfireIO/Hangfire/issues/167">feature that has been discussed for a long time</a>, it&rsquo;s yet to be implemented. Since some of the rules are critical to the business, they want to be notified as soon as possible. This means having a polling interval in seconds for those rules.</p>

<p>After reaching out to my <a href="http://www.rahulpnath.com/blog/finding-a-job-abroad/">friends at Readify</a>, I decided to use <a href="https://www.quartz-scheduler.net/">Quartz.net</a>. Many had good experiences using it in the past and recommended it highly. One another option that came up was <a href="https://github.com/fluentscheduler/FluentScheduler">FluentScheduler</a>. There was no particular reason to go with Quartz.net.</p>

<blockquote><p><em>Quartz.NET is a full-featured, open source job scheduling system that can be used from smallest apps to large-scale enterprise systems.</em></p></blockquote>

<p>Setting up and getting started with Quartz scheduler is fast and easy. The library has a <a href="https://www.quartz-scheduler.net/documentation/index.html">well-written documentation</a>. You can update the applications configuration file to tweak various attributes of the scheduler.</p>

<figure class='code'><figcaption><span>App/Web.config file</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>  <span class="nt">&lt;configSections&gt;</span>
</span><span class='line'>    <span class="nt">&lt;section</span> <span class="na">name=</span><span class="s">&quot;quartz&quot;</span> <span class="na">type=</span><span class="s">&quot;System.Configuration.NameValueSectionHandler, System, Version=1.0.5000.0,Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/configSections&gt;</span>
</span><span class='line'>  <span class="nt">&lt;quartz&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;quartz.scheduler.instanceName&quot;</span> <span class="na">value=</span><span class="s">&quot;TestScheduler&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;quartz.jobStore.type&quot;</span> <span class="na">value=</span><span class="s">&quot;Quartz.Simpl.RAMJobStore, Quartz&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/quartz&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="http://www.quartz-scheduler.org/api/2.2.1/org/quartz/simpl/RAMJobStore.html">RAMJobStore</a> indicates the store to use for storing job. There are other job stores available if you want persistence of jobs anytime the application restarts.</p>

<h3>Setting Up Jobs</h3>

<p>Basically, there are three jobs - Alert Job, CoolOff Job, and Refresh Job - set up for the whole application. The Alert and Refresh Jobs are scheduled on application start. The CoolOff Job is triggered by the Alert Job as required. Any data that is required by the job is passed in using <a href="https://www.quartz-scheduler.net/documentation/quartz-2.x/tutorial/more-about-jobs.html#jobdatamap">JobDataMap</a>.</p>

<figure class='code'><figcaption><span>Schedule an Alert Job</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="kt">var</span> <span class="n">job</span> <span class="p">=</span> <span class="n">JobBuilder</span><span class="p">.</span><span class="n">Create</span><span class="p">&lt;</span><span class="n">AlertJob</span><span class="p">&gt;()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">WithIdentity</span><span class="p">(</span><span class="n">rule</span><span class="p">.</span><span class="n">GetJobKey</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="n">WithDescription</span><span class="p">(</span><span class="n">rule</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SetJobData</span><span class="p">(</span><span class="n">rule</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">trigger</span> <span class="p">=</span> <span class="n">TriggerBuilder</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Create</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">WithIdentity</span><span class="p">(</span><span class="n">rule</span><span class="p">.</span><span class="n">GetTriggerKey</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="n">StartNow</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">WithSimpleSchedule</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span>
</span><span class='line'>        <span class="p">.</span><span class="n">WithIntervalInSeconds</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">rule</span><span class="p">.</span><span class="n">PollingInterval</span><span class="p">.</span><span class="n">TotalSeconds</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="n">RepeatForever</span><span class="p">())</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">scheduler</span><span class="p">.</span><span class="n">ScheduleJob</span><span class="p">(</span><span class="n">job</span><span class="p">,</span> <span class="n">trigger</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4><strong>Alert Jobs</strong></h4>

<p>The Alert Job is responsible for checking the stored procedure and sending the alerts if required. If an alert is sent, it starts the CoolOff Job and pauses the current job instance. THe DisallowConcurrentExecution prevents multiple instances of the Job having the same key does not execute concurrently. We explicitly set the Job Key based on the Rule Id. This prevents any duplicate messages getting sent out if any of the job instances takes more time to execute than its set polling interval.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[DisallowConcurrentExecution]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">AlertJob</span> <span class="p">:</span> <span class="n">Job</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Execute</span><span class="p">(</span><span class="n">IJobExecutionContext</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">alert</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">GetRuleFromJobData</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">message</span> <span class="p">=</span> <span class="n">GetAlertMessage</span><span class="p">(</span><span class="n">alert</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">message</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">SendMessage</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
</span><span class='line'>            <span class="n">CoolOff</span><span class="p">(</span><span class="n">alert</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">CoolOff</span><span class="p">(</span><span class="n">Rule</span> <span class="n">rule</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">job</span> <span class="p">=</span> <span class="n">JobBuilder</span><span class="p">.</span><span class="n">Create</span><span class="p">&lt;</span><span class="n">CoolOffJob</span><span class="p">&gt;()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">WithIdentity</span><span class="p">(</span><span class="n">jobKey</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">WithDescription</span><span class="p">(</span><span class="n">rule</span><span class="p">.</span><span class="n">MessageTitle</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">SetJobData</span><span class="p">(</span><span class="n">rule</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="kt">var</span> <span class="n">trigger</span> <span class="p">=</span> <span class="n">TriggerBuilder</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Create</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">WithIdentity</span><span class="p">(</span><span class="n">rule</span><span class="p">.</span><span class="n">GetCoolOffTriggerKey</span><span class="p">())</span>
</span><span class='line'>            <span class="p">.</span><span class="n">StartAt</span><span class="p">(</span><span class="n">rule</span><span class="p">.</span><span class="n">GetCoolOffDateTimeOffset</span><span class="p">())</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Build</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">scheduler</span><span class="p">.</span><span class="n">PauseJob</span><span class="p">(</span><span class="n">rule</span><span class="p">.</span><span class="n">GetJobKey</span><span class="p">());</span>
</span><span class='line'>        <span class="n">scheduler</span><span class="p">.</span><span class="n">ScheduleJob</span><span class="p">(</span><span class="n">job</span><span class="p">,</span> <span class="n">trigger</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><strong>Cool-Off Job</strong></h4>

<p>Cool-Off Jobs is a one time job scheduled by the Alert Job after an alert is sent successfully. The CoolOff job is scheduled to start after the Cool-Off time as configured for the alert. This triggers the job only after the set amount of time. It Resumes the original Rule Job to continue execution.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">CoolOffJob</span> <span class="p">:</span> <span class="n">IJob</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Execute</span><span class="p">(</span><span class="n">IJobExecutionContext</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">alert</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">GetRuleFromJobData</span><span class="p">();</span>
</span><span class='line'>        <span class="n">ScheduleHelper</span><span class="p">.</span><span class="n">ResumeJob</span><span class="p">(</span><span class="n">alert</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><strong>Refresh Job</strong></h4>

<p>The Refresh Job is a recurring job, that polls the database for any changes to the Rules themselves If any change is detected,it removes the existing schedules for the alert and adds the updated alert job.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[DisallowConcurrentExecution]</span>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">RefreshJob</span> <span class="p">:</span> <span class="n">IJob</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Execute</span><span class="p">(</span><span class="n">IJobExecutionContext</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">allRules</span> <span class="p">=</span> <span class="n">GetAllRules</span><span class="p">();</span>
</span><span class='line'>        <span class="n">ScheduleHelper</span><span class="p">.</span><span class="n">RefreshRules</span><span class="p">(</span><span class="n">allRules</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With these three jobs, all the rules get scheduled at the start of the application and run continuously. Anytime a change is made to the rule itself, the Refresh Job refreshes it within the time interval that it is scheduled for.</p>

<div class="alert alert-info">
<b>Tip:</b>If there are a lot of rules with the same polling interval it will be good to stagger their starting time using a delayed start per job instance. Doing that will make sure that all jobs do not get polled for at the same time.
</div>


<p>So far I have found the Quartz library stable and reliable and have not faced any issues with it. The library is also quite flexible and adapts well to the different needs.</p>

<p>Hope this helps. Merry Xmas!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Postman - Chaining Requests to Speed Up Manual API Tests]]></title>
    <link href="http://rahulpnath.com/blog/postman-chaining-requests-to-speed-up-manual-api-tests/"/>
    <updated>2017-12-11T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/postman-chaining-requests-to-speed-up-manual-api-tests</id>
    <content type="html"><![CDATA[<p>I was recently playing around with <a href="https://www.messagemedia.com.au/">MessageMedia API</a> trying to <a href="https://developers.messagemedia.com/code/messages-api-documentation/">send SMS and get the status of the SMS sent</a>. Sending the SMS and getting the status of the last sent SMS always happened in succession when testing it manually. Once I send the message, I waited for the API response, grabbed the message id from the response and used that to form the get status request.</p>

<p><a href="https://www.getpostman.com/">Postman</a> is a useful tool if you are building or testing APIs. It allows to create, send and manage API requests.</p>

<p><img src="http://rahulpnath.com/images/postman_chaining_requests.png" alt="Postman Chaining Requests" /></p>

<p>I added two requests and saved it to a collection in Postman - one to Send Message and other to Get Message status. I have created an environment variable for holding the message id. For the request that sends a message, the below Test snippet is added. It parses the response body of the request and extracts the message id of the last send message. This is then saved to the environment variable. The <a href="https://www.getpostman.com/docs/postman/scripts/test_scripts">Test</a> snippet is always run after performing the request.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">jsonData</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">responseBody</span><span class="p">);</span>
</span><span class='line'><span class="nx">postman</span><span class="p">.</span><span class="nx">setEnvironmentVariable</span><span class="p">(</span><span class="s2">&quot;messageId&quot;</span><span class="p">,</span> <span class="nx">jsonData</span><span class="p">.</span><span class="nx">messages</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">message_id</span><span class="p">);</span>
</span><span class='line'><span class="nx">tests</span><span class="p">[</span><span class="s2">&quot;Success&quot;</span><span class="p">]</span><span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Get message request uses the messageId from the environment variables to construct its URL. The URL looks like below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>https://api.messagemedia.com/v1/messages/{{messageId}}
</span></code></pre></td></tr></table></div></figure>


<p>When executing this request, it fetches the messageId from the environment variable, which is set by the previous request. You no longer have to copy message id manually and use it in the URL. This is how we chain the data from one request to another request. Chaining requests is also useful in automated testing using Postman. Hope this helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Text Editing - Extract Data]]></title>
    <link href="http://rahulpnath.com/blog/text-editing-extract-data/"/>
    <updated>2017-10-19T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/text-editing-extract-data</id>
    <content type="html"><![CDATA[<p>At times you might need to extract data from a large text. Let&rsquo;s say you have a JSON response, and you want to extract all the <em>id</em> fields in the response and <a href="http://www.rahulpnath.com/blog/text-editing-split-or-combine-multiple-lines/">combine them as comma separated</a>. Here&rsquo;s how you can easily extract data from large text using Sublime (or any other text editor that supports simultaneous editing).</p>

<figure class='code'><figcaption><span>https://jsonplaceholder.typicode.com/posts</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;userId&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;sunt aut facere repellat provident occaecati excepturi optio reprehenderit&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;body&quot;</span><span class="p">:</span> <span class="s2">&quot;quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;userId&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;qui est esse&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;body&quot;</span><span class="p">:</span> <span class="s2">&quot;est rerum tempore vitae\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\nqui aperiam non debitis possimus qui neque nisi nulla&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="err">...</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again the key here is to select the recurring pattern first. In this case, it is <em>&ldquo;id&rdquo;:</em> and then selecting all occurrences of that. Once all occurrences are selected, we can select the whole line and extract that out. Repeat the same to remove the <em>id</em> text. Then follow the same steps we used to <a href="http://www.rahulpnath.com/blog/text-editing-split-or-combine-multiple-lines/">combine text</a>.</p>

<div style="text-align: center;">
    <iframe width="560" height="315" src="https://www.youtube.com/embed/ouKm7Wkldp0" frameborder="0" allowfullscreen></iframe>
</div>


<p>Hope this helps you to extract data from large text files.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authenticating with Azure Key Vault Using Managed Service Identity]]></title>
    <link href="http://rahulpnath.com/blog/authenticating-with-azure-key-vault-using-managed-service-identity/"/>
    <updated>2017-10-18T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/authenticating-with-azure-key-vault-using-managed-service-identity</id>
    <content type="html"><![CDATA[<p><strong><em>How do you secure the access keys to the Key Vault itself?</em></strong>.</p>

<p>If you use ClientId/Secret to authenticate with a key vault, then you are likely to end up having these in the web.config file (<a href="http://www.rahulpnath.com/blog/keeping-sensitive-configuration-data-out-of-source-control/">there still are ways around</a>) which is what we initially set out to avoid, by using Azure Key Vault. The recommended approach till now was to use certificate-based authentication so that you need to have only the thumbprint id of the certificate in the web.config and you can deploy the certificate along with the application. If you are not familiar with either way of authenticating with Key Vault, then check out this <a href="http://www.rahulpnath.com/blog/authenticating-a-client-application-with-azure-key-vault/">article</a>. With the Secret or certificate-based authentication, we also run into the problem of credentials expiring which in turn can lead to application downtime.</p>

<p>Managed Service Identity (MSI) solves this problem by allowing an Azure App Service, Azure Virtual Machines or Azure Functions to connect to Key Vault (and a few other services) without any explicit credentials in the code.</p>

<blockquote><p><em><a href="https://docs.microsoft.com/en-us/azure/active-directory/msi-overview">Managed Service Identity</a> (MSI) makes solving this problem simpler by giving Azure services an automatically managed identity in Azure Active Directory (Azure AD). You can use this identity to authenticate to any service that supports Azure AD authentication, including Key Vault, without having any credentials in your code.</em></p></blockquote>

<p>MSI can be enabled through the Azure Portal. E.g., to enable MSI for App Service, the portal has an option as shown below.</p>

<p><img src="http://rahulpnath.com/images/keyvault_managed_service_identity.png" class="center" alt="Enable Managed Service Identity for Azure App Service" /></p>

<p>Once enabled we can add an access policy in the key vault to give permissions to the Azure App service. Search by the app service name and assign the required access policies.</p>

<p>For an application to access the key vault, we need to use <em>AzureServiceTokenProvider</em> from <a href="https://www.nuget.org/packages/Micros">Microsoft.Azure.Services.AppAuthentication</a> NuGet package. Instead of using the ClientCredential or ClientAssertionCertificate to acquire the token, we will use AzureServiceTokenProvider to acquire the token for us.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">azureServiceTokenProvider</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AzureServiceTokenProvider</span><span class="p">();</span>
</span><span class='line'><span class="kt">var</span> <span class="n">keyVaultClient</span> <span class="p">=</span> <span class="k">new</span> <span class="n">KeyVaultClient</span><span class="p">(</span><span class="k">new</span> <span class="n">KeyVaultClient</span><span class="p">.</span><span class="n">AuthenticationCallback</span><span class="p">(</span><span class="n">azureServiceTokenProvider</span><span class="p">.</span><span class="n">KeyVaultTokenCallback</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>The <a href="https://azure.microsoft.com/en-us/resources/samples/app-service-msi-keyvault-dotnet/">AzureServiceTokenProvider</a> class tries the following methods to get an access token:-</em></p>

<ol>
<li><em>Managed Service Identity (MSI) - for scenarios where the code is deployed to Azure, and the Azure resource supports MSI.</em></li>
<li><em>Azure CLI (for local development) - Azure CLI version 2.0.12 and above supports the get-access-token option. AzureServiceTokenProvider uses this option to get an access token for local development.</em></li>
<li><em>Active Directory Integrated Authentication (for local development). To use integrated Windows authentication, your domain’s Active Directory must be federated with Azure Active Directory. Your application must be running on a domain-joined machine under a user’s domain credentials.</em></li>
</ol>


<h3>Local Development</h3>

<p>For the AzureServiceTokenProvider to work locally we need to install the <a href="https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest">Azure CLI</a> and also setup an environment variable - <em>AzureServicesAuthConnectionString</em>. Depending on whether you want to use ClientId/Secret or ClientId/Certificate-based authentication the value for the environment variable changes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>AzureServicesAuthConnectionString to RunAs=App;AppId=AppId;TenantId=TenantId;AppKey=Secret.
</span><span class='line'>Or
</span><span class='line'>RunAs=App;AppId=AppId;TenantId=TenantId;CertificateThumbprint=Thumbprint;CertificateStoreLocation=CurrentUser
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://rahulpnath.com/images/kkeyvault_msi_tenantId.png" class="center" alt="Get Tenant Id and AppId" /></p>

<p>As shown above, you can get the TenantId and AppId from the App Registrations page in the Azure portal. Clicking on the Endpoints button reveals a list of URL&rsquo;s which has the TenantId GUID. The AppId is displayed against each of the AD application. Once you set the environment variable, the application will be able to connect to Key Vault without any additional configuration entries in web/app config.</p>

<p>Azure Managed Service Identity makes it easier to connect to Key Vault and removes the need of having any sensitive information in the application configuration file. It also helps remove the overhead of renewing the certificate/secrets used to connect to the Vault. One less thing to worry about the application!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Text Editing - Split or Combine Multiple Lines]]></title>
    <link href="http://rahulpnath.com/blog/text-editing-split-or-combine-multiple-lines/"/>
    <updated>2017-10-13T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/text-editing-split-or-combine-multiple-lines</id>
    <content type="html"><![CDATA[<p>As a developer, I often end up needing to manipulate text. Sometimes this text can get quite large, and it might take a while to do it manually. If you have a text editor under your <a href="http://www.rahulpnath.com/blog/tools-that-I-use/">tool belt</a>, it often helps in situations like that. Let&rsquo;s looks at one of the common scenarios that I come across and how we can solve that using a text editor. I use <a href="https://www.sublimetext.com/">Sublime Text</a> as my go-to editor for such text editing hacks, but you can do this in any text editor that supports <a href="https://en.wikipedia.org/wiki/Simultaneous_editing">simultaneous editing</a>.</p>

<p>Let&rsquo;s say I just get a list of comma separated values and need to insert double (or single) quotes around each value to use in a SQL query. To demonstrate this, I ended up going to <a href="https://www.random.org/integers/">random.org</a> to generate a list of random values and had to use the same technique that I was to demonstrate as in the SQL query case. I generated 12 random numbers, and the site gave a tab separated list of values, as shown below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>91    66    31    11    90
</span><span class='line'>80    1    24    48    61
</span><span class='line'>61    66
</span></code></pre></td></tr></table></div></figure>


<p>I now need to convert this into a comma-separated list. Let&rsquo;s see how we can go about doing this.</p>

<ol>
<li>Select the recurring character pattern. In this case, it is the tab space.</li>
<li>Select all occurrences of the pattern. (Alt + F3 - Find All in Sublime)</li>
<li>Act on all the occurrences. In this case, I want to remove them, so I use <em>Del</em></li>
<li>Since I want to introduce a comma between each of the numbers, I first split them into multiple lines using <em>Enter</em>. Now I have all the numbers on a separate line.</li>
<li>Select all the numbers and insert a cursor at the end of each. ( Ctrl + Shift + L)</li>
<li>Insert comma. We still have the cursor at the end of all lines, so just pressing <em>Delete</em> again combines all the lines into one. Remove the trailing comma.</li>
</ol>


<div style="text-align: center;">
    <iframe width="560" height="315" src="https://www.youtube.com/embed/nDDWviJ5xHM" frameborder="0" allowfullscreen></iframe>
</div>


<p>Though this is a specific example, I hope you get the general idea on how to go about manipulating text, to split and combine as required. I hope you will be able to insert double (or single) quotes around each value in the comma separated values that we have now, to use in a SQL query!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up an Electron Application using create-react-app Template]]></title>
    <link href="http://rahulpnath.com/blog/electron-and-react/"/>
    <updated>2017-10-10T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/electron-and-react</id>
    <content type="html"><![CDATA[<p><a href="https://electron.atom.io/">Electron</a> is a great way to build cross-platform desktop applications using HTML, CSS and JavaScript. I was surprised when I first came across Electron to see many of the applications that I use daily was developed in electron and I never knew about it. Since then I was interested in learning more about developing an application using Electron. Recently I was playing around with an idea for a side project and decided to use Electron as I wanted a desktop application. TDK react</p>

<h3>Setting up the React Application</h3>

<p>With the <a href="https://github.com/facebookincubator/create-react-app">create-react-app</a> template generator, it is easy to setup and get up and running a react application. All you need to run are the below commands, and you have everything set up for a react application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install -g create-react-app
</span><span class='line'>
</span><span class='line'>create_react_app electron_react
</span><span class='line'><span class="nb">cd </span>electron_react
</span><span class='line'>npm start
</span></code></pre></td></tr></table></div></figure>


<p>The above commands will create an &lsquo;electron-react&rsquo; folder with all the code and set up the app at *<a href="http://localhost:3000*">http://localhost:3000*</a> in development mode.</p>

<h3>Setting up Electron</h3>

<p>Now that we have a react application setup, let us integrate electron with it. The below command installs electron package.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>npm install electron
</span></code></pre></td></tr></table></div></figure>


<p>A <a href="https://github.com/electron/electron-quick-start">basic Electron application</a> needs just these files:</p>

<ul>
<li><em>package.json</em> - Points to the app&rsquo;s main file and lists its details and dependencies. We already have this as part of the react application.</li>
<li><em>main.js</em> - Starts the app and creates a browser window to render HTML. This is the app&rsquo;s main process. We will add this file.</li>
<li><em>index.html</em> - A web page to render. This is the app&rsquo;s renderer process. We already have this as part of the react application.</li>
</ul>


<p>Let&rsquo;s start by adding a main.js file. We will keep the code to the bare minimum. All we are doing here is adding a function <em>createWindow</em> which uses <em><a href="https://electron.atom.io/docs/api/browser-window/">BrowserWindow</a></em> from the electron package, to create a new window instance. The window loads the development server URL. We will modify this URL later to run independently without a hosted server so that it can be packaged and deployed easily. The <a href="https://electron.atom.io/docs/api/app/">app&rsquo;s</a> <a href="https://electron.atom.io/docs/api/app/#event-ready">ready</a> event is wired to create the new window.</p>

<figure class='code'><figcaption><span>main.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="p">{</span><span class="nx">app</span><span class="p">,</span> <span class="nx">BrowserWindow</span><span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;electron&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">mainWindow</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">createWindow</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">mainWindow</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BrowserWindow</span><span class="p">({</span> <span class="nx">width</span><span class="o">:</span> <span class="mi">800</span><span class="p">,</span> <span class="nx">height</span><span class="o">:</span> <span class="mi">600</span><span class="p">});</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">startUrl</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DEV_URL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">mainWindow</span><span class="p">.</span><span class="nx">loadURL</span><span class="p">(</span><span class="nx">startUrl</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">mainWindow</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;closed&#39;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">mainWindow</span> <span class="o">=</span> <span class="kc">null</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;ready&#39;</span><span class="p">,</span> <span class="nx">createWindow</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>After updating the package.json with the electron application main entry point, we are all set to run the application.</p>

<figure class='code'><figcaption><span>package.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="s2">&quot;main&quot;</span>: <span class="s2">&quot;src/main.js&quot;</span>,
</span></code></pre></td></tr></table></div></figure>


<p>Fire up two consoles and launch the react application in one using <em>npm start</em> and the electron application in the other using <em>&lsquo;set DEV_URL=<a href="http://localhost:3000">http://localhost:3000</a> &amp;&amp; electron .&rsquo;</em></p>

<p><img class="center" alt="Electron React" src="http://rahulpnath.com/images/electron_react.png"></p>

<h3>Setting up for Deployment</h3>

<p>Opening up two consoles and starting up the react server first will start becoming a pain soon. To avoid this, we can use two npm packages to start both the tasks one after the other.</p>

<ul>
<li><a href="https://www.npmjs.com/package/concurrently">concurrently</a>: Run multiple commands concurrently.</li>
<li><a href="https://www.npmjs.com/package/wait-on">wait-on</a>: Wait for files, ports, sockets, http(s) resources to become available</li>
</ul>


<p>Install both the packages and modify the <em>package.json</em> as shown below.</p>

<figure class='code'><figcaption><span>package.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="s2">&quot;react-start&quot;</span>: <span class="s2">&quot;react-scripts start&quot;</span>,
</span><span class='line'><span class="s2">&quot;electron-dev&quot;</span>: <span class="s2">&quot;set DEV_URL=http://localhost:3000 &amp;&amp; electron .&quot;</span>,
</span><span class='line'><span class="s2">&quot;start&quot;</span>: <span class="s2">&quot;concurrently \&quot;npm run react-start\&quot; \&quot;wait-on http://localhost:3000/ &amp;&amp; npm run electron-dev\&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running <em>npm start</em> now launches the react application, waits for the server to be up and running and then launches the electron application.</p>

<p>The electron app depends on the react application being hosted locally to run. Let&rsquo;s update <em>main.js</em> so that it can run from the generated output of the react application. Running <em>npm build</em> generates the website contents into the build folder.</p>

<figure class='code'><figcaption><span>main.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;path&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;url&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'> <span class="kr">const</span> <span class="nx">startUrl</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DEV_URL</span> <span class="o">||</span>
</span><span class='line'>    <span class="nx">url</span><span class="p">.</span><span class="nx">format</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">pathname</span><span class="o">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;/../build/index.html&#39;</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">protocol</span><span class="o">:</span> <span class="s1">&#39;file:&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">slashes</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="nx">mainWindow</span><span class="p">.</span><span class="nx">loadURL</span><span class="p">(</span><span class="nx">startUrl</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Set the <em><a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#building-for-relative-paths">homepage</a></em> property in package.json (<em>&ldquo;homepage&rdquo;: &ldquo;./&rdquo;</em>) to enable relative paths on the generated <em>index.html</em> file. Once this is done, we can generate the site using <em>npm run build</em> and run the electron application using <em>&lsquo;electron .&rsquo;</em>. This will launch the application from the <em>build</em> folder.</p>

<p>Hope this helps you to jump start with your Electron app development using React.</p>

<p><strong>References</strong></p>

<ul>
<li><a href="https://medium.freecodecamp.org/building-an-electron-application-with-create-react-app-97945861647c">How to build an Electron app using create-react-app. No webpack configuration or “ejecting” necessary.</a></li>
<li><a href="https://github.com/facebookincubator/create-react-app">create-react-app</a></li>
<li><a href="https://github.com/electron/electron-quick-start">Electron: Quick Start Guide</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating a Large PDF from Website Contents - Merging PDF Files]]></title>
    <link href="http://rahulpnath.com/blog/generating-a-large-pdf-from-website-contents-part-iii/"/>
    <updated>2017-09-19T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/generating-a-large-pdf-from-website-contents-part-iii</id>
    <content type="html"><![CDATA[<p>In the previous post, <a href="http://www.rahulpnath.com/blog/generating-a-large-pdf-from-website-contents-part-ii/">Generating a Large PDF from Website Contents - HTML to PDF, Bookmarks and Handling Empty Pages</a>, we saw how to generate a PDF from HTML and add bookmarks to the generated PDF files. The PDF file generated is for an individual section which now needs to be merged to form a single PDF file. The individual PDF files contain the relevant content for the section and related bookmarks, which needs to be combined into a single PDF file.</p>

<p>One of the important things to keep intact when merging is the document hierarchy. The Sections, Sub-Categories, and Categories should align correctly so that the final bookmark tree and the Table of Contents appear correctly. It is best to maintain the list of individual PDF document streams in the same hierarchy as required. Since we know the required structure right from the UI, this can be easily achieved by using a data structure similar as shown below</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">DocumentSection</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">MemoryStream</span> <span class="n">PDFDocument</span> <span class="p">{</span><span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">DocumentSection</span><span class="p">&gt;</span> <span class="n">ChildSections</span> <span class="p">{</span><span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">...</span> <span class="c1">// Any additional details that you need</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above structure allows us to maintain a tree-like structure of the document. The structure is the same as that is provided to the user to select the PDF options. I used the <a href="https://www.nuget.org/packages/iTextSharp-LGPL/">iTextSharp</a> library to merge PDF documents. To interact with the PDF, we first need to create a PdfReader object from the stream. Using the  SimpleBookmark class, we can get the existing bookmarks for the PDF.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">pdfReader</span> <span class="p">=</span> <span class="k">new</span> <span class="n">PdfReader</span><span class="p">(</span><span class="n">stream</span><span class="p">);</span>
</span><span class='line'><span class="n">ArrayList</span> <span class="n">bookmarks</span> <span class="p">=</span> <span class="n">SimpleBookmark</span><span class="p">.</span><span class="n">GetBookmark</span><span class="p">(</span><span class="n">pdfReader</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>iText representation of bookmarks is a bit complex. It represents them as an ArrayList of Hashtables. The Hashtable has keys like Action, Title, Page, Kids, etc. Kids property represents child bookmarks and is the same ArrayList type. Since it was hard to work with this structure, I created a wrapper class to interact easily with the bookmarks.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Bookmark</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Bookmark</span><span class="p">(</span>
</span><span class='line'>        <span class="kt">string</span> <span class="n">title</span><span class="p">,</span> <span class="kt">string</span> <span class="n">destinationType</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pageNumber</span><span class="p">,</span>
</span><span class='line'>        <span class="kt">float</span> <span class="n">xLeft</span><span class="p">,</span> <span class="kt">float</span> <span class="n">yTop</span><span class="p">,</span> <span class="kt">float</span> <span class="n">zZoom</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Children</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Bookmark</span><span class="p">&gt;();</span>
</span><span class='line'>        <span class="n">Title</span> <span class="p">=</span> <span class="n">title</span><span class="p">;</span>
</span><span class='line'>        <span class="n">PageNumber</span> <span class="p">=</span> <span class="n">pageNumber</span><span class="p">;</span>
</span><span class='line'>        <span class="n">DestinationType</span> <span class="p">=</span> <span class="n">destinationType</span> <span class="p">??</span> <span class="s">&quot;XYZ&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">XLeft</span> <span class="p">=</span> <span class="n">xLeft</span><span class="p">;</span>
</span><span class='line'>        <span class="n">YTop</span> <span class="p">=</span> <span class="n">yTop</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ZZoom</span> <span class="p">=</span> <span class="n">zZoom</span><span class="p">;</span>
</span><span class='line'>        <span class="n">PageBreak</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">...</span> <span class="c1">// Class properties for the constructor parameters</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">ArrayList</span> <span class="nf">ToiTextBookmark</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">ArrayList</span> <span class="n">arrayList</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ArrayList</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">ToiTextBookmark</span><span class="p">(</span><span class="k">this</span><span class="p">),</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">arrayList</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="n">Hashtable</span> <span class="nf">ToiTextBookmark</span><span class="p">(</span><span class="n">Bookmark</span> <span class="n">bookmark</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">kids</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">hashTable</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Hashtable</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'><span class="na">            [&quot;Action&quot;]</span> <span class="p">=</span> <span class="s">&quot;GoTo&quot;</span><span class="p">,</span>
</span><span class='line'><span class="na">            [&quot;Title&quot;]</span> <span class="p">=</span> <span class="n">bookmark</span><span class="p">.</span><span class="n">Title</span><span class="p">,</span>
</span><span class='line'><span class="na">            [&quot;Page&quot;]</span> <span class="p">=</span> <span class="err">$</span><span class="s">@&quot;{bookmark.PageNumber} {bookmark.DestinationType} </span>
</span><span class='line'><span class="s">                         {bookmark.XLeft} {bookmark.YTop} {bookmark.ZZoom}&quot;</span><span class="p">,</span>
</span><span class='line'><span class="na">            [&quot;Kids&quot;]</span> <span class="p">=</span> <span class="n">kids</span><span class="p">,</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">childBookmark</span> <span class="k">in</span> <span class="n">bookmark</span><span class="p">.</span><span class="n">Children</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">kids</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">ToiTextBookmark</span><span class="p">(</span><span class="n">childBookmark</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">hashTable</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Recursively iterating through the list of DocumentSections, I add all the bookmarks to a root Bookmark class. The root bookmark class represents the full bookmark of the PDF file. The PageNumber is offset using a counter variable. The counter variable is incremented by the number of pages in each of PDF section (<em>pdfReader.NumberOfPages</em>) as it gets merged to the bookmark root. This ensures that the bookmark points to the correct bookmark page in the combined PDF file.</p>

<p>The individual documents are then merged by iterating through all the generated document sections. Once done we get the final PDF as a byte array which is returned to the user.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">byte</span><span class="p">[]</span> <span class="nf">MergeSections</span><span class="p">(</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DocumentSection</span><span class="p">&gt;</span> <span class="n">documentSections</span><span class="p">,</span> <span class="n">Bookmark</span> <span class="n">bookmarkRoot</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">pageNumber</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MemoryStream</span><span class="p">())</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">document</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Document</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">pdfWriter</span> <span class="p">=</span> <span class="n">PdfWriter</span><span class="p">.</span><span class="n">GetInstance</span><span class="p">(</span><span class="n">document</span><span class="p">,</span> <span class="n">stream</span><span class="p">);</span>
</span><span class='line'>        <span class="n">document</span><span class="p">.</span><span class="n">Open</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">pdfContent</span> <span class="p">=</span> <span class="n">pdfWriter</span><span class="p">.</span><span class="n">DirectContent</span><span class="p">;</span>
</span><span class='line'>        <span class="n">MergeSectionIntoDocument</span><span class="p">(</span><span class="n">documentSections</span><span class="p">,</span> <span class="n">document</span><span class="p">,</span> <span class="n">pdfContent</span><span class="p">,</span> <span class="n">pdfWriter</span><span class="p">,</span> <span class="n">pageNumber</span><span class="p">);</span>
</span><span class='line'>        <span class="n">pdfWriter</span><span class="p">.</span><span class="n">Outlines</span> <span class="p">=</span> <span class="n">bookmarkRoot</span><span class="p">.</span><span class="n">ToiTextBookmark</span><span class="p">();</span>
</span><span class='line'>        <span class="n">document</span><span class="p">.</span><span class="n">Close</span><span class="p">();</span>
</span><span class='line'>        <span class="n">stream</span><span class="p">.</span><span class="n">Flush</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">stream</span><span class="p">.</span><span class="n">ToArray</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">void</span> <span class="nf">MergeSectionIntoDocument</span><span class="p">(</span>
</span><span class='line'>    <span class="n">List</span><span class="p">&lt;</span><span class="n">DocumentSection</span><span class="p">&gt;</span> <span class="n">documentSections</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Document</span> <span class="n">document</span><span class="p">,</span>
</span><span class='line'>    <span class="n">PdfContentByte</span> <span class="n">pdfContent</span><span class="p">,</span>
</span><span class='line'>    <span class="n">PdfWriter</span> <span class="n">pdfWriter</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">pageNumber</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">documentSection</span> <span class="k">in</span> <span class="n">documentSections</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="n">documentSection</span><span class="p">.</span><span class="n">DocumentStream</span><span class="p">;</span>
</span><span class='line'>        <span class="n">stream</span><span class="p">.</span><span class="n">Position</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">pdfReader</span> <span class="p">=</span> <span class="k">new</span> <span class="n">PdfReader</span><span class="p">(</span><span class="n">stream</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">var</span> <span class="n">i</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;=</span> <span class="n">pdfReader</span><span class="p">.</span><span class="n">NumberOfPages</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">page</span> <span class="p">=</span> <span class="n">pdfWriter</span><span class="p">.</span><span class="n">GetImportedPage</span><span class="p">(</span><span class="n">pdfReader</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span><span class='line'>            <span class="n">document</span><span class="p">.</span><span class="n">SetPageSize</span><span class="p">(</span><span class="k">new</span> <span class="n">iTextSharp</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">Rectangle</span><span class="p">(</span><span class="m">0.0F</span><span class="p">,</span> <span class="m">0.0F</span><span class="p">,</span> <span class="n">page</span><span class="p">.</span><span class="n">Width</span><span class="p">,</span> <span class="n">page</span><span class="p">.</span><span class="n">Height</span><span class="p">));</span>
</span><span class='line'>            <span class="n">document</span><span class="p">.</span><span class="n">NewPage</span><span class="p">();</span>
</span><span class='line'>            <span class="n">pageNumber</span><span class="p">++;</span>
</span><span class='line'>            <span class="n">pdfContent</span><span class="p">.</span><span class="n">AddTemplate</span><span class="p">(</span><span class="n">page</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="n">AddPageNumber</span><span class="p">(</span><span class="n">pdfContent</span><span class="p">,</span> <span class="n">document</span><span class="p">,</span> <span class="n">pageNumber</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">documentSection</span><span class="p">.</span><span class="n">ChildSections</span><span class="p">.</span><span class="n">Any</span><span class="p">())</span>
</span><span class='line'>            <span class="n">MergeSectionIntoDocument</span><span class="p">(</span><span class="n">documentSection</span><span class="p">.</span><span class="n">ChildSections</span><span class="p">,</span> <span class="n">document</span><span class="p">,</span> <span class="n">pdfContent</span><span class="p">,</span> <span class="n">pdfWriter</span><span class="p">,</span> <span class="n">pageNumber</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To generate a Table of Contents (ToC), we can use the root bookmark information. We need to manually create a PDF page, read the bookmark text and add links to the page with the required font and styling. iText provides API&rsquo;s to create custom PDF pages.</p>

<p>We are now able to generate a single PDF based on the website contents.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Electronically Sign PDF - No More Printing and Scanning]]></title>
    <link href="http://rahulpnath.com/blog/electronically-sign-pdf-no-more-printing-and-scanning/"/>
    <updated>2017-09-09T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/electronically-sign-pdf-no-more-printing-and-scanning</id>
    <content type="html"><![CDATA[<p>Very often I need to sign forms, receipts, invoices in PDF format and send them across to someone else. Printing the PDF, signing them physically and scanning them back (of course using <a href="http://www.rahulpnath.com/blog/office-lens-scan-documents-with-your-phone/">Office Lens</a>) is how I used to do this until a while back. Since I don&rsquo;t have a printer at home, I always had to wait till I reach office. Also, I did not like wasting paper and ink just to put a signature.</p>

<p>Adobe PDF reader allows us to &lsquo;Fill and Sign&rsquo; documents. Using this option we can add signatures without needing to print them. Follow the below steps to set up your Adobe Reader to sign any document.</p>

<p><strong>1.</strong> Sign on a white paper and take a picture. Upload the picture onto your computer and crop the image using your favorite <a href="http://www.rahulpnath.com/blog/paint-dot-net/">image editor</a>. You should have something similar as shown below.</p>

<p><img src="http://rahulpnath.com/images/pdf_signature.png" alt="Your Signature" class="center" /></p>

<p><strong>2.</strong> Open the PDF file that you need to sign with <a href="https://get.adobe.com/reader/">Adobe Reader</a>.</p>

<p><strong>3.</strong> Open &lsquo;Fill and Sign&rsquo; option. You can do this either from the &lsquo;Tools Pane&rsquo; (Shift + F4 on windows) or the menu &lsquo;View -> Tools -> Fill and Sign.&rsquo;</p>

<p><strong>4.</strong> Under the Sign option, you can choose a signature image. Choose the image you created before and save.</p>

<p><img src="http://rahulpnath.com/images/adobe_add_sign.png" alt="Add your Signature" class="center" /></p>

<p>You are all set to sign documents now. Anytime you want to sign a document, choose &lsquo;Fill and Sign&rsquo; and you will see your signature under the Sign button. Click the signature and place it anywhere on the document that you want to sign. No more printing and scanning them back again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Office Lens - Scan Documents With Your Phone]]></title>
    <link href="http://rahulpnath.com/blog/office-lens-scan-documents-with-your-phone/"/>
    <updated>2017-09-02T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/office-lens-scan-documents-with-your-phone</id>
    <content type="html"><![CDATA[<p>Scanning physical documents can be cumbersome using a scanner, especially if you do not have easy access to one. Taking pictures with the default camera application on the phone might not give the best of results that you are expecting. Also, you will mostly end up needing to trim such photos of unwanted elements.</p>

<p>Microsoft Office Lens is the perfect application for scanning documents and whiteboards. Office Lens focuses documents in the camera frame and allows you to capture just what is required. It enhances the selected document sections. Below is an example of the highlight and the captured document.</p>

<p><img src="http://rahulpnath.com/images/office_lens.png" alt="Office Lens Capture" class="center" ></p>

<h4><strong>Features</strong></h4>

<ul>
<li>Capture and crop a picture of a whiteboard or blackboard, and share your meeting notes with colleagues.</li>
<li>Make digital copies of your printed documents, business cards or posters, and trim them precisely.</li>
<li>Printed text will be automatically recognized (using OCR) by converting Word and PDF, so you can search for words in images and copy and edit them.</li>
</ul>


<p>Office Lens is available on all platforms. Download the <a href="https://play.google.com/store/apps/details?id=com.microsoft.office.officelens&amp;hl=en">Android</a>, <a href="https://itunes.apple.com/au/app/office-lens/id975925059?mt=8">iOS</a> or the <a href="https://www.microsoft.com/en-au/store/p/office-lens/9wzdncrfj3t8">Windows</a> version from the stores. Next time you want to scan something just Office Lens it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: The Headphones Rule]]></title>
    <link href="http://rahulpnath.com/blog/the-headphones-rule/"/>
    <updated>2017-08-30T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/the-headphones-rule</id>
    <content type="html"><![CDATA[<p><img src="http://rahulpnath.com/images/headphone_rule.png" class="center" alt="The Headphones Rule" ></p>

<p>&lsquo;<em>I need some undistracted time</em>.&rsquo;</p>

<p>This was one of the things that came up in my team&rsquo;s retrospective yesterday. Having some undistracted time is necessary for getting things done. It&rsquo;s a good practice to have a consensus among the team members on how to manage disruptions and indicate whether you are open for a chat.</p>

<p><a href="http://theheadphonesrule.com/">The Headphone Rule</a> is an interesting way to indicate whether a person is open to interactions or not.</p>

<blockquote><p><em>no headphones, you can talk to me.</em></p>

<p><em>1 headphone, you can talk to me about work</em></p>

<p><em>2 headphones, do not talk to me.</em></p></blockquote>

<p>For people who do not use a headphone, some other technique needs to be used (like sticky notes, colored lights, etc.). Luckily in my team, everyone uses headphones, and it was an acceptable solution. Irrespective of the way you choose it is important to have some agreed way to indicate whether you are interruptible or not. It helps you and the team to have some undistracted time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Visual Studio Dev Essentials]]></title>
    <link href="http://rahulpnath.com/blog/visual-studio-dev-essentials/"/>
    <updated>2017-08-25T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/visual-studio-dev-essentials</id>
    <content type="html"><![CDATA[<p>If you are a .NET developer and looking for some awesome free stuff, then check out <a href="https://www.visualstudio.com/dev-essentials/">Visual Studio Dev Essentials</a>. You get loads of free stuff</p>

<blockquote><p><em>Free tools, cloud services, and training</em></p>

<p><em>Get everything you need to build and deploy your app on any platform. With state-of-the-art tools, the power of the cloud, training, and support, it’s our most comprehensive free developer program ever.</em></p></blockquote>

<p><img src="http://rahulpnath.com/images/vs_dev_essentials.png" alt="center" alt="Visual Studio Dev Essentials" ></p>

<p>Some of the key attractions of the program are</p>

<ul>
<li>$300 Azure Credit for a year</li>
<li>Access to Xamarin University Training</li>
<li>Pluralsight access for three months</li>
<li>WintellectNOW access for three months</li>
</ul>


<p>All you need is a Windows Live ID to signup. Get it if you have not already!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NDC Sydney 2017]]></title>
    <link href="http://rahulpnath.com/blog/ndc-sydney-2017/"/>
    <updated>2017-08-21T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/ndc-sydney-2017</id>
    <content type="html"><![CDATA[<p>Last week was a busy one at <a href="http://ndcsydney.com/">NDC Sydney</a> and was happy to be back there <a href="http://www.rahulpnath.com/blog/ndc-sydney/">for the second time</a>.The conference was three days long with 117 speakers, 37 technologies, and 151 talks. Some of the popular speakers were <a href="https://fsharpforfunandprofit.com/">Scott Wlaschin</a>, <a href="http://odetocode.com/about/scott-allen">Scott Allen</a>,<a href="https://www.troyhunt.com/">Troy Hunt</a>, <a href="https://twitter.com/DamianEdwards">Damian Edwards</a>, <a href="http://blog.stevensanderson.com/">Steve Sanderson</a> and <a href="http://ndcsydney.com/speakers/">a lot more</a>.</p>

<p><img class="center" alt="NDC Sydney" src="http://rahulpnath.com/images/ndc_sydney_2017.png" /></p>

<h3>Sessions</h3>

<p>Each talk is one hour long and <a href="http://ndcsydney.com/agenda/">eight talks happen at the same time</a>. Below are the talks I attended:</p>

<ul>
<li><a href="http://ndcsydney.com/talk/keynote-using-eeg-and-machine-learning-to-perform-lie-detection/">Keynote: Using EEG and Machine Learning to Perform Lie Detection</a></li>
<li><a href="http://ndcsydney.com/talk/a-teams-transition-to-continuous-delivery-1/">A teams transition to Continuous Delivery</a></li>
<li><a href="http://ndcsydney.com/talk/docker-from-scratch/">Docker, FROM scratch</a></li>
<li><a href="http://ndcsydney.com/talk/technical-debt/">The Technical Debt Prevention Clinic</a></li>
<li><a href="http://ndcsydney.com/talk/how-to-start-and-run-a-software-lifestyle-business/">How to start and run a software lifestyle business</a></li>
<li><a href="http://ndcsydney.com/talk/asynchronous-programming-from-the-ground-up/">Asynchronous Programming From The Ground Up</a></li>
<li><a href="http://ndcsydney.com/talk/building-docker-applications-with-net-tooling-cross-platform-support-and-migration/">Building Docker Applications with .NET - tooling, cross platform support and migration</a></li>
<li><a href="http://ndcsydney.com/talk/hack_your_career/">Hack Your Career</a></li>
<li><a href="http://ndcsydney.com/talk/writing-high-performance-code-in-net/">Writing high performance code in .NET</a></li>
<li><a href="http://ndcsydney.com/talk/growing-serverless-code-with-azure-functions-and-f/">Growing Serverless code with Azure Functions and F#</a></li>
<li><a href="http://ndcsydney.com/talk/the-websites-down-stories-and-lessons-on-keeping-your-website-up/">&ldquo;The website&rsquo;s down!&rdquo; Stories and lessons on keeping your website up</a></li>
<li><a href="http://ndcsydney.com/talk/self-aware-applications-automatic-production-monitoring/">Self-Aware Applications: Automatic Production Monitoring</a></li>
<li><a href="http://ndcsydney.com/talk/domain-modeling-made-functional/">Domain Modeling Made Functional</a></li>
<li><a href="http://ndcsydney.com/talk/interactive-c-development-with-roslyn/">Interactive C# Development with Roslyn</a></li>
<li><a href="http://ndcsydney.com/talk/building-resilient-applications-in-microsoft-azure/">Building Resilient Applications In Microsoft Azure</a></li>
<li><a href="http://ndcsydney.com/talk/functional-design-patterns/">Functional Design Patterns</a></li>
<li><a href="http://ndcsydney.com/talk/logic-vs-side-effects-functional-goodness-you-dont-hear-about/">Logic vs. side effects: functional goodness you don&rsquo;t hear about</a></li>
<li><a href="http://ndcsydney.com/talk/how-one-team-built-their-first-microservice/">How one team built their first microservice</a></li>
</ul>


<p>All sessions are recorded and are <a href="https://vimeo.com/ndcconferences">available here</a>. The Sydney 2017 ones will soon be there. Overall it was a good event but did not match the one last year. Last year there were more of the popular speakers and the talk content was also more interesting. But still, I am glad that NDC Sydney is still happening, and it gives a good exposure and networking possibilities for developers. Thanks to Readify for sponsoring my tickets and it’s one of the <a href="http://www.rahulpnath.com/blog/finding-a-job-abroad/">good things about working with Readify</a>.</p>

<p>Hope to see you next year as well!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Learn Touch Typing]]></title>
    <link href="http://rahulpnath.com/blog/learn-touch-typing/"/>
    <updated>2017-08-18T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/learn-touch-typing</id>
    <content type="html"><![CDATA[<blockquote><p><em>We are typists first, and programmers second.</em></p>

<p>-<a href="https://blog.codinghorror.com/we-are-typists-first-programmers-second/"><em>Jeff Atwood</em></a></p></blockquote>

<p>If you are like me, spending a lot of time with a computer, it&rsquo;s worth you take the time to learn to type without looking at the keyboard a.k.a touch typing (if you currently type by the <a href="https://en.wikipedia.org/wiki/Typing#Hunt_and_peck">hunt and peck method</a>). Though productivity cannot be measured by the number of words you type per minute, it&rsquo;s good to learn to touch type. There are various applications that help you to improve your typing speed. Some of them are online and some offline desktop applications. Pick one that suits you and improve your typing speed.</p>

<p><img src="http://rahulpnath.com/images/touch_typing.gif" alt="Touch Typing layout" alt="center" ></p>

<p>I learned to touch type only a couple of years back,  getting inspired after reading <a href="http://amzn.to/2hmblsw">Learn Anything in 20  Hours</a>. In the book, the author explains how he learned a new keyboard layout, Colemak, in just 20 hours.  The book explains the full process and setup used by the author. It uses various tools like <a href="https://wwwtyro.github.io/keyzen/">Keyzen</a>, <a href="http://type-fu.com/">Type-fu</a>, <a href="https://github.com/webiest/amphetype">Amphetype</a>. More than the tools it is the process and the approach to the learning that is interesting. A <a href="https://first20hours.com/typing/">summary of the tools and approaches</a> is available here but highly recommend reading the book. I found the approach very helpful and effective and used to learn QWERTY layout.</p>

<p>Irrespective of the way you choose to learn touch typing, it might seem a bit hard at the start. Keep at it for some time snd you will soon see an improvement in your typing speed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating a Large PDF from Website Contents - HTML to PDF, Bookmarks and Handling Empty Pages]]></title>
    <link href="http://rahulpnath.com/blog/generating-a-large-pdf-from-website-contents-part-ii/"/>
    <updated>2017-08-16T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/generating-a-large-pdf-from-website-contents-part-ii</id>
    <content type="html"><![CDATA[<p>In the previous post, <a href="http://rahulpnath.com/blog/generating-a-large-pdf-from-website-contents">Generating a Large PDF from Website Contents</a> we saw from a high level the approach taken to generate PDF files from a Content Management System (CMS) website. In this post, we will delve further into the details of each of those areas.</p>

<h3>HTML To PDF</h3>

<p>There are a lot of libraries and services that support converting HTML to PDF. We chose this mechanism mainly for keeping the content formatting simple and reusable. Most of the PDF data was to be structured like the website content. This means we can reuse (read copy/paste) the HTML styling for the PDF content as well.</p>

<p>We used <a href="https://www.essentialobjects.com/Products/EOPdf/Default.aspx">Essential Objects HTML to PDF Converter</a> library. Our website is hosted as an Azure Web App and the <a href="https://www.essentialobjects.com/doc/pdf/install/deploy.aspx">Essential Objects library does not work in the Azure sandbox environment</a>. The <a href="https://github.com/projectkudu/kudu/wiki/Azure-Web-App-sandbox#pdf-generation-from-html">Azure Sandbox restriction</a> affects most of the HTML to PDF libraries. The recommended approach to use those libraries is to host the PDF conversion logic on an Azure Virtual Machine, which is what we also ended up doing. Alternatively, you can choose to use one of the <a href="https://stackoverflow.com/questions/5344176/is-there-a-web-service-for-converting-html-to-pdf">HTML to PDF hosted services</a>.</p>

<p>The below code snippet is what you need to convert an HTML URL endpoint to PDF. It uses the HtmlToPdf class from the <a href="https://www.nuget.org/packages/EO.Pdf/">EO.Pdf Nuget package</a>. The HtmlToPdfOptions specifies various conversion and formatting options. You can set margin space, common headers, footers, etc. for the generated PDF content. It also provides extensibility points in the PDF conversion pipeline.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">FileContentResult</span> <span class="nf">Convert</span><span class="p">(</span><span class="kt">string</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">pdfStream</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MemoryStream</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">pdfDocument</span> <span class="p">=</span> <span class="k">new</span> <span class="n">PdfDocument</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">pdfOptions</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">GetPdfOptions</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">HtmlToPdf</span><span class="p">.</span><span class="n">ConvertUrl</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">pdfDocument</span><span class="p">,</span> <span class="n">pdfOptions</span><span class="p">);</span>
</span><span class='line'>    <span class="n">pdfDocument</span><span class="p">.</span><span class="n">Save</span><span class="p">(</span><span class="n">pdfStream</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">FileContentResult</span><span class="p">(</span><span class="n">pdfStream</span><span class="p">.</span><span class="n">ToArray</span><span class="p">(),</span> <span class="s">&quot;application/pdf&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong><em>HTML Formatting Tip</em></strong></p>

<p><em>You might want to avoid content being split across multiple pages. E.g., images, charts, etc. In this cases, you can use the <a href="https://css-tricks.com/almanac/properties/p/page-break/">page-break-*</a> CSS property to adjust page breaks. <a href="https://www.essentialobjects.com/doc/pdf/htmltopdf/paging.aspx">Essentials objects honors the page-break-*</a> settings and adjusts the content when converting into PDF.</em></p></blockquote>

<h3>Bookmarks</h3>

<p><em>A <a href="https://helpx.adobe.com/acrobat/using/page-thumbnails-bookmarks-pdfs.html#about_bookmarks">bookmark</a> is a type of link with representative text in the Bookmarks panel in the navigation pane. Each bookmark goes to a different view or page in the document. Bookmarks are generated automatically during PDF creation from the table-of-contents entries of a document.</em></p>

<p>We generate a lot of small PDF files (per section and category/sub-category) and then merge them together to form the larger PDF. Each of the sections has one or more entries towards Table Of Contents (TOC). We decided to generate bookmarks first per each generated PDF. When merging the individual PDF, the bookmarks are merged first, and then the TOC is created from the full bookmark tree.</p>

<p>Bookmarks can be created automatically or manually using Essential Objects library. Most of the other libraries also provide similar functionality. Using the <a href="https://www.essentialobjects.com/doc/EO.Pdf.HtmlToPdfOptions.AutoBookmark.html">AutoBookmark property</a> we can have bookmarks created automatically based on HTML header (H1-H6) elements. If this does not fit with your scenario, then you can create them manually. In our case, we insert hidden HTML tags to specify bookmarks. Bookmark hierarchy is represented using custom attributes as shown below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;bookmark&quot;</span> <span class="na">id=</span><span class="s">&quot;TOC_Category1&quot;</span> <span class="na">name=</span><span class="s">&quot;Category1&quot;</span><span class="nt">&gt;</span>Category 1<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>...
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;bookmark&quot;</span> <span class="na">id=</span><span class="s">&quot;TOC_Category1_Section1&quot;</span> <span class="na">name=</span><span class="s">&quot;Section1&quot;</span> <span class="na">tocParent=</span><span class="s">&quot;TOC_Category1&quot;</span><span class="nt">&gt;</span>Section 1<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>...
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;bookmark&quot;</span> <span class="na">id=</span><span class="s">&quot;TOC_Category1_Section2&quot;</span> <span class="na">name=</span><span class="s">&quot;Section2&quot;</span> <span class="na">tocParent=</span><span class="s">&quot;TOC_Category1&quot;</span><span class="nt">&gt;</span>Section 2<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>Once the PDF is created from the URL, we parse the HTML content for elements with <em>bookmark</em> class and manually add the bookmarks into the generated PDF. The <em><a href="https://www.essentialobjects.com/doc/EO.Pdf.HtmlDocument.GetElementsByClassName_overload_1.html">GetElementsByClassName</a></em> and the <em><a href="https://www.essentialobjects.com/doc/EO.Pdf.HtmlElement.CreateBookmark_overloads.html">CreateBookmark</a></em> methods help us to create bookmarks from the hidden HTML elements in the page.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="p">...</span>
</span><span class='line'> <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">HtmlToPdf</span><span class="p">.</span><span class="n">ConvertUrl</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">pdfDocument</span><span class="p">,</span> <span class="n">pdfOptions</span><span class="p">);</span>
</span><span class='line'> <span class="n">BuildBookmarkTree</span><span class="p">(</span><span class="n">pdfDocument</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
</span><span class='line'> <span class="n">pdfDocument</span><span class="p">.</span><span class="n">Save</span><span class="p">(</span><span class="n">pdfStream</span><span class="p">);</span>
</span><span class='line'> <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">BuildBookmarkTree</span><span class="p">(</span><span class="n">PdfDocument</span> <span class="n">pdfDocument</span><span class="p">,</span> <span class="n">HtmlToPdfResult</span> <span class="n">htmlToPdfResult</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">bookmarkElements</span> <span class="p">=</span> <span class="n">htmlToPdfResult</span><span class="p">.</span><span class="n">HtmlDocument</span><span class="p">.</span><span class="n">GetElementsByClassName</span><span class="p">(</span><span class="s">&quot;bookmark&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">htmlElement</span> <span class="k">in</span> <span class="n">bookmarkElements</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">bookmark</span> <span class="p">=</span> <span class="n">htmlElement</span><span class="p">.</span><span class="n">CreateBookmark</span><span class="p">();</span>
</span><span class='line'>        <span class="p">...</span> <span class="c1">// Custom logic to build the bookmark hierarchy</span>
</span><span class='line'>        <span class="c1">// based on custom attributes or whatever approach you choose.</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">pdfDocument</span><span class="p">.</span><span class="n">Bookmarks</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">bookmark</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Handling Empty Pages</h3>

<p>In our case, the content is from a CMS, and the user gets an option to select what categories/sub-categories and sections of data to be displayed in the generated PDF. At times it happens that some of the selected combinations might not have any data in the system. To avoid printing a blank page (or an error page) in the generated PDF, we can check the conversion result to check for the returned content. Whenever the content does not exists the HTML endpoint returns an <a href="https://msdn.microsoft.com/en-us/library/system.web.mvc.emptyresult(v=vs.118">EmptyResult class</a>.aspx). At the PDF conversion side, you can check if the response is empty and accordingly perform your logic to ignore the generated PDF.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">HtmlToPdfResultExtensions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="nf">IsEmptyResponse</span><span class="p">(</span><span class="k">this</span> <span class="n">HtmlToPdfResult</span> <span class="n">htmlToPdfResult</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">htmlToPdfResult</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span>
</span><span class='line'>            <span class="n">htmlToPdfResult</span><span class="p">.</span><span class="n">HtmlDocument</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span>
</span><span class='line'>            <span class="n">htmlToPdfResult</span><span class="p">.</span><span class="n">HtmlDocument</span><span class="p">.</span><span class="n">Body</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">&amp;&amp;</span>
</span><span class='line'>            <span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">htmlToPdfResult</span><span class="p">.</span><span class="n">HtmlDocument</span><span class="p">.</span><span class="n">Body</span><span class="p">.</span><span class="n">InnerText</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once the individual PDF files are created for each of the section and category/subcategory combination, we can merge them together to generate the full PDF. We will see in the next post how to merge the bookmarks together along with shifting the PDF pages and generating Table of Contents from the bookmarks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Analyze Your Site Performance]]></title>
    <link href="http://rahulpnath.com/blog/analyze-your-site-performance/"/>
    <updated>2017-08-11T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/analyze-your-site-performance</id>
    <content type="html"><![CDATA[<p>If you own a website, then it is good to check their performance now and then. Various factors affect the site speed, and it&rsquo;s better to use some tools to do the job for you.</p>

<p><a href="https://developers.google.com/speed/pagespeed/">Google PageSpeed</a> is a set of tools from Google designed to check and optimize websites performance. PageSpeed Insights is one of the tools in the suite that helps identify the ways to make your site faster and mobile friendly. The tools check for common good practices and provide a score out of 100 points. <em>PageSpeed Insights only considers the network-independent aspects of page performance: the server configuration, the HTML structure of a page, and its use of external resources such as images, JavaScript, and CSS.</em></p>

<p><img src="http://rahulpnath.com/images/PageInsights.png" alt="PageInsights" class="center" ></p>

<p><a href="http://yslow.org/">YSlow</a> is a similar tool from Yahoo!, that analyzes web pages for performance. It is available as a browser extension and has one for all popular ones. It provides a grade for the web page based on a predefined ruleset or a user-defined ruleset. The grade is calculated based on the <a href="http://yslow.org/ruleset-matrix/">YSlow Ruleset Matrix</a>.</p>

<p><img src="http://rahulpnath.com/images/yslow.png" alt="YSlow" class="center" ></p>

<p>I have been implementing some of the recommendations from the above tools on this blog, but as you can see from the above results, there is still more to be done. Hope you find this helpful for your sites.</p>
]]></content>
  </entry>
  
</feed>
