<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rahul Nath]]></title>
  <link href="http://rahulpnath.com/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2017-02-16T00:01:59+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Screenshots with Snagit]]></title>
    <link href="http://rahulpnath.com/blog/screenshots-with-snagit/"/>
    <updated>2017-02-16T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/screenshots-with-snagit</id>
    <content type="html"><![CDATA[<p>I have been using <a href="https://www.techsmith.com/screen-capture.html">Snagit</a> for over one and half years and been loving it. Snagit gives you a way to create and edit screenshots or record videos to show a process, provide detailed feedback, or share information with the people who need it most. It tucks away neatly to the side of your screen and is there up and ready when you want to grab a screen capture or record a quick video. The screen capture is easily triggered using keyboard shortcuts (Ctrl + Alt + S by default). Once captured, it takes you to the Snagit editor where you can add a lot more details to the captured image.</p>

<p><img alt="Snagit" class="center" src="http://rahulpnath.com/images/snagit.gif" /></p>

<p>Some of the  features that I often use are:</p>

<ul>
<li><strong>Blur (or Redact)</strong>: Use to hide or disguise sensitive information. Often my screenshots contain sensitive content which I want to blur.</li>
<li><strong>Step</strong>: Add a series of numbers or letters to label steps or items in a capture. This feature helps in guiding a step by step process in a screenshot.</li>
<li><strong>Crop</strong>: Common feature in all image editors.</li>
<li><strong>Spotlight &amp; Magnify</strong>: Magnify, blur or dim a selected area of the picture. This feature is useful to highlight specific parts of the image.</li>
<li><strong>Callouts, Text, and Arrows</strong>: Again pretty much standard with most image editors.</li>
</ul>


<p>Snagit has been a great fit for blogging and makes creating screenshots easy. Communicating with images is much faster with these great features. If you take a lot of screenshots give <a href="https://www.techsmith.com/download/snagit/">Snagit a try</a>, you will love it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Moving Selected Lines in Visual Studio]]></title>
    <link href="http://rahulpnath.com/blog/moving-selected-lines-in-visual-studio/"/>
    <updated>2017-02-09T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/moving-selected-lines-in-visual-studio</id>
    <content type="html"><![CDATA[<p>Often when coding, I need to move pieces of code up or down. It could be a group of lines of code or an entire function that I need to shift up or down. In earlier versions of Visual Studio, I had to select the lines of code, cut them from current place, move the cursor to the desired position and paste it. That&rsquo;s a lot of keystrokes for getting a simple thing done. In the latest versions of Visual Studio (I am currently on VS2015) we can use  <strong>Alt + Up/Down</strong> to move the selection up or down. This also works for the current line without selecting it.</p>

<p><img alt="Defensive Coding" src="http://rahulpnath.com/images/visualstudio_moveselectedlines.gif" /></p>

<p>Hope this helps to move code around faster!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Defensive Coding]]></title>
    <link href="http://rahulpnath.com/blog/defensive-coding/"/>
    <updated>2017-02-07T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/defensive-coding</id>
    <content type="html"><![CDATA[<p>Often when writing code or in code review discussions it comes up - &lsquo;<em>Should I be doing a null check here?</em>.&rsquo; and we start off long discussions. Like in most cases, there is no definite answer to this. In this post let us examine some of the pros and cons of having defensive checks and how and when we can avoid it to make the code more readable.</p>

<p><img alt="Defensive Coding" src="http://rahulpnath.com/images/defensive_coding.jpg" /></p>

<p>Let&rsquo;s see an example to explore more. The below code aggregated details from different repository classes and returns a combined model. I have kept this simple with just three dependencies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">PersonDetails</span> <span class="nf">GetPersonDetails</span><span class="p">(</span><span class="n">Guid</span> <span class="n">personId</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">person</span> <span class="p">=</span> <span class="n">personRepository</span><span class="p">.</span><span class="n">GetPerson</span><span class="p">(</span><span class="n">personId</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">subscriptionPlan</span> <span class="p">=</span> <span class="n">subscriptionRepository</span><span class="p">.</span><span class="n">GetSubscriptionForPerson</span><span class="p">(</span><span class="n">person</span><span class="p">.</span><span class="n">Email</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">billingSummary</span> <span class="p">=</span> <span class="n">billingRepository</span><span class="p">.</span><span class="n">GetSummary</span><span class="p">(</span><span class="n">subscriptionPlan</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">PersonDetails</span><span class="p">()</span> <span class="p">{...};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you see, there are no null checks on any of the values returned from external dependencies. The code expects all calls to be successful with no exceptions - &lsquo;<a href="https://en.wikipedia.org/wiki/Happy_path">happy path</a>&rsquo; scenario.
The problem is when an error happens; the exception stack trace will look like something below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Object reference not set to an instance of an object.
</span><span class='line'>at UserQuery.GetPersonDetails(Guid personId)
</span><span class='line'>  at UserQuery.Main()
</span></code></pre></td></tr></table></div></figure>


<p>We will not be able to tell which of the values was null, making it hard to debug the error. We have to manually go through the code checking how each of the dependencies retrieves values and check which one possibly was null. Debugging takes a lot of time and might be difficult depending on the complexity of the dependencies. The advantage of the above code though is that it is readable and there is <strong><em>noise</em></strong> in the code.</p>

<h3>Extensive Defense</h3>

<p>Let us now modify the above example to see how it would be to add defensive code and check for nulls.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">PersonDetails</span> <span class="nf">GetPersonDetails</span><span class="p">(</span><span class="n">Guid</span> <span class="n">personId</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">personId</span> <span class="p">==</span> <span class="n">Guid</span><span class="p">.</span><span class="n">Empty</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="n">nameof</span><span class="p">(</span><span class="n">personId</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">person</span> <span class="p">=</span> <span class="n">personRepository</span><span class="p">.</span><span class="n">GetPerson</span><span class="p">(</span><span class="n">personId</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">person</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">&quot;Person is null&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">person</span><span class="p">.</span><span class="n">Email</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">&quot;Email is null for person &quot;</span> <span class="p">+</span> <span class="n">personId</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">subscriptionPlan</span> <span class="p">=</span> <span class="n">subscriptionRepository</span><span class="p">.</span><span class="n">GetSubscriptionForPerson</span><span class="p">(</span><span class="n">person</span><span class="p">.</span><span class="n">Email</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">subscriptionPlan</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">&quot;Subscription Plan is null&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">billingSummary</span> <span class="p">=</span> <span class="n">billingRepository</span><span class="p">.</span><span class="n">GetSummary</span><span class="p">(</span><span class="n">subscriptionPlan</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">billingSummary</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">(</span><span class="s">&quot;BillingSummary is null&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">PersonDetails</span><span class="p">()</span> <span class="p">{</span> <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p> The defensive checks added for guarding against invalid values makes the code harder to read. Defensive checks are there for incoming parameters as well and validate if they are null/default value (for Guid). However when an error happens the stack trace will mention the name of the property which was null. Debugging is fast and easy and makes the exception message useful. But we don&rsquo;t want our code filled with defensive checks like this.</p>

<h3>Team Conventions and Practices</h3>

<p>Let us dig a bit deeper into why we had to put in the defensive checks in the first place. We had to check for null on <em>person</em> since the repository decided to return a null when it could not find the person given an id. Does it even make sense or add any value in returning a null reference from the repository? Unless the business works in a way that there is a high possibility of something returning null this does not add any value. Even in cases like that, we should revert to other options which we will see in a while. When most of the time we expect a person to exists, it is better for the repository to throw an exception right away that the person does not exist. If the validations and the defensive checks are performed at the boundaries, then we do not need to do a null check anymore when getting a person or any similar functions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">Person</span> <span class="nf">GetPerson</span><span class="p">(</span><span class="n">Guid</span> <span class="n">personId</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">personId</span> <span class="p">==</span> <span class="n">Guid</span><span class="p">.</span><span class="n">Empty</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="n">nameof</span><span class="p">(</span><span class="n">personId</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">person</span> <span class="p">=</span> <span class="n">DataContext</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="n">personId</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">person</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">UserDoesNotExistsException</span><span class="p">(</span><span class="s">&quot;Person does not exists with id &quot;</span><span class="p">,</span> <span class="n">personId</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">person</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For cases where there are possibilities of a value existing or not you can resort to <a href="http://www.rahulpnath.com/blog/stronger-code-contracts/">Stronger Code Contracts</a>. Using the Maybe type to indicate a value might or might not be present is a good way to force defensive checks. Maybe type ensures that any consumer of the code handles the case where the object does not exist. Readability of the code also improves in this case.</p>

<p>If you have noticed in the above code when checking for null&rsquo;s, I checked the Email property for null as well. Setting up team conventions that properties cannot be null, help reduce defensive checks for it. You could use various techniques to ensure properties are not null like setting a default value for the property in the constructor, <a href="https://en.wikipedia.org/wiki/Null_Object_pattern">Null object pattern</a>, checking for null&rsquo;s when setting property values or modeling the object in a way that optional parameters are not direct properties on the object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="n">Email</span> <span class="n">email</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Person</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>       <span class="n">Email</span> <span class="p">=</span> <span class="n">Email</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">Email</span> <span class="n">Email</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">email</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="k">set</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">value</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="s">&quot;email cannot be null&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">email</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the updated repository code and the property changes, we can rewrite the original code much similar as it was before introducing the defensive checks. The guard clauses at the start of the function, checking for the parameters is still important. Validating for input parameters helps find the problems earlier in the code stack and follows the <a href="https://en.wikipedia.org/wiki/Fail-fast">fail fast</a> pattern. It helps us find exactly where the null was introduced and address the issue faster. The defensive code is at the beginning of the function and can be easily skipped over while reading. If you are not that keen to write this on all functions, you can also write some helper classes which Validates a list of parameters (<a href="https://msdn.microsoft.com/en-au/library/w5zay9db.aspx">params</a>). I prefer the explicit check and used to skipping over them when reading code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">PersonDetails</span> <span class="nf">GetPersonDetails</span><span class="p">(</span><span class="n">Guid</span> <span class="n">personId</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="n">personId</span> <span class="p">==</span> <span class="n">Guid</span><span class="p">.</span><span class="n">Empty</span><span class="p">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="n">nameof</span><span class="p">(</span><span class="n">personId</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">var</span> <span class="n">person</span> <span class="p">=</span> <span class="n">personRepository</span><span class="p">.</span><span class="n">GetPerson</span><span class="p">(</span><span class="n">personId</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">subscriptionPlan</span> <span class="p">=</span> <span class="n">subscriptionRepository</span><span class="p">.</span><span class="n">GetSubscriptionForPerson</span><span class="p">(</span><span class="n">person</span><span class="p">.</span><span class="n">Email</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">billingSummary</span> <span class="p">=</span> <span class="n">billingRepository</span><span class="p">.</span><span class="n">GetSummary</span><span class="p">(</span><span class="n">subscriptionPlan</span><span class="p">.</span><span class="n">Id</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nf">PersonDetails</span><span class="p">()</span> <span class="p">{...};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Value Objects and Defensive Coding</h3>

<p>Let us now look at other ways to improve defensive checks on properties. Modeling properties as <a href="http://www.rahulpnath.com/blog/thinking-beyond-primitive-values-value-objects/">Value Objects</a> helps contain the defensive code within the property. Like in the above case where email cannot be null, the checks to make sure that it is a valid email can be within the Email class. Containing this logic in the class removes the need for the rest of the code to check for it. If an email object exists, it will be valid. It is the same with names, date ranges, money, etc. The lesser we expose primitive type properties, the less defensive code we need to write. It also removes the problems of checking <em>string.IsNullOrEmpty</em> at some places and just for nulls at others.</p>

<p>Though this is not an extensive examination of all possible cases, we have still seen some common scenarios. Defensive coding is required. It is about striking a balance and making <a href="http://www.rahulpnath.com/blog/stronger-code-contracts/">code contracts stronger</a> to convey the intent. The defensive checks are within the classes responsible for the object and exist at a central place. It removes the need to check for it elsewhere in the code. This is a simple application of <a href="https://en.wikipedia.org/wiki/Encapsulation_(computer_programming">Encapsulation</a>. So the next time you check for null make sure it is where it should be!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Lost 13 Kilos in One and Half Months]]></title>
    <link href="http://rahulpnath.com/blog/how-i-lost-13-kilos-in-one-and-half-months/"/>
    <updated>2017-02-04T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/how-i-lost-13-kilos-in-one-and-half-months</id>
    <content type="html"><![CDATA[<p>Getting fit is one of the goals that I have set for myself this year. I have started running since mid of December and also controlling my diet.</p>

<div class="alert alert-warning">
<strong>DISCLAIMER!</strong> I am not a doctor or a dietitian. The below are just my personal experiences and has worked for me. If you feel you have a medical problem or are in need of professional help, please contact a professional. Always consult a doctor before starting a new diet or exercise program.
</div>


<blockquote><p><strong>TLDR;</strong></p>

<ul>
<li>Have Parvathy (my wife) support me throughout.</li>
<li>Running 1-2 times a week</li>
<li>No carbs till Dinner: Smoothie, Veggies, and nuts till dinner. Dinner is Chappathi and curry (mostly vegetables).</li>
<li>150+ Pushups Daily, spread across the day</li>
<li>No Sugar</li>
</ul>
</blockquote>

<p>I was around 95 kilos when I started out in December. At the time of writing, I weigh 82 kilos. Yes, I have lost 13 kilos over the past one and half months. This is the first time I have seen such drastic changes in my body, and I believe it&rsquo;s because of the strict diet more than anything. Below are the various aspects of what I have been following.</p>

<figure>
    <img alt="Before and After" src="http://rahulpnath.com/images/weigth_Before and After.jpg" />
    <figcaption><em>Here is the before and after.</em></figcaption>
</figure>


<h3>Exercises</h3>

<p> I started with running once a week. But now I am so into it I try to run two to three times a week. I use <a href="https://www.runtastic.com/en/users/4b76cfab-734e-1658-b5e4-600759a3b066">Runtastic</a> to track my runs. Last week I purchased the premium plan for Runtastic and looking forward to starting one of their 10k <a href="https://www.runtastic.com/en/training-plans/10k">training plans</a> and <a href="https://www.runtastic.com/en/results">runtastic results</a> on days that I do not run. I use a <a href="https://www.bose.com.au/en_au/products/headphones/earphones/soundsport-in-ear-headphones-audio.html#v=soundsport_ie_headphones_ii_audio_charcoal">Bose SoundSport in-ear audio only headphones</a>  headphones (the cheapest in their range) for music during the runs. Luckily Bose was running a half price on those models when I purchased.</p>

<p> I do push-ups every day and get 150+ (25 * 6+) every day. I split this out throughout the day - 75 before I head off to work and 75 once back. I get enough time in the morning to space it at 30-minute intervals as I <a href="http://www.rahulpnath.com/blog/morning_routine/">wake up at four</a>. I plan to replace push-ups with Runtastic Results starting next week.</p>

<p> <img alt="My Running History" src="http://rahulpnath.com/images/weight_running.jpg" /></p>

<h3>Diet</h3>

<p>Breakfast (<em>7:30 am</em>): Green Smoothie (+ eggs on days that I run) or Avocado and eggs.
Lunch (<em>12 pm</em>): Raw vegetables (Carrot, Cucumber, spinach, kale, beetroot, corn, sprouts)
Dinner (<em>6:30 pm</em>: Wheat Dosa or Chappathi + Vegetable Curry
Snacks: Anytime I feel hungry I have one of these - Nuts (Almonds, walnuts, sunflower seeds, etc.), Carrot, Banana and Peanut butter. Usually, I end up having just the nuts at around 10 30 in the morning.</p>

<p><img alt="Diet" src="http://rahulpnath.com/images/weight_diet.jpg" /></p>

<p>When eating out, I keep an eye on carbs and other junk. Try to eat grilled instead of fried. Usually, we eat out on weekends as we will be traveling places. We usually have a hearty lunch on weekends. Parvathy and I decided to have fruits for dinner on those days. I try to take fruits that contain less sugar like kiwi, berries, etc. But we do have apples, mangoes, watermelon, etc. but in moderation. The fruit choices are more driven by what&rsquo;s available at the place <a href="http://www.rahulpnath.com/blog/finding-a-job-abroad/">I live now</a>.</p>

<p>Sugar: I try my best to avoid it fully. To start with I quit tea and coffee. Believe me, I was a tea addict and I needed lots of it. It was hard, but then Parvathy quit it one day, and I got inspired by her. I still remember that last tea I took when I decided I am having no more of it. It&rsquo;s hard but doable!. I don&rsquo;t have any ice-cream, fruit juice, carbonated drinks, energy drinks, pastries, etc.</p>

<h3>Family Outings</h3>

<p>We used to spend a lot of our weekends in shopping malls till a while back. We decided to change that to more of outdoor activities. So it&rsquo;s either the beach, boating, parks, walks, etc. This has increased our general activity levels and help burn extra calories. And mostly I have &lsquo;an extra weight&rsquo; to carry around; you can tell that from the photos :). Gautham also enjoys these outdoor activities, and there&rsquo;s more for him to learn in each of those short trips. On weekdays we go for a walk after dinner, shop around for groceries, etc. and run any other errands so that we are free during weekends.</p>

<p>With the new routine, I now feel great to be back in shape. I have never been this light since a long time, and I am happy to be in clothes that I had locked up in my bags. Since the new routine takes an hour out of <a href="http://www.rahulpnath.com/blog/morning_routine/">my morning routine</a> I have to optimize myself further to keep up with blogging, videos and learning new things. I am still trying to find a balance but for this. Hoping to continue with this new routine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Quick Launch in Visual Studio]]></title>
    <link href="http://rahulpnath.com/blog/quick-launch-in-visual-studio/"/>
    <updated>2017-02-02T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/quick-launch-in-visual-studio</id>
    <content type="html"><![CDATA[<p><img alt="Visual Studio Quick Launch" src="http://rahulpnath.com/images/visualstudio_quicklaunch.png" /></p>

<p>As a .NET developer, I spent the majority of my time in Visual Studio. Knowing to navigate fast within the IDE or quickly find what I want is important. Many times finding specific settings or navigating to individual windows can take a while, especially if you are not familiar with it and don&rsquo;t know exactly where to look. Visual Studio has a quick launch toolbar that is designed exactly for this. Be it opening the Package Manager Console or changing the font style you can use the quick launch to search and navigate to it.</p>

<blockquote><p><em>You can use <a href="https://msdn.microsoft.com/en-us/library/hh417697.aspx">Quick Launch</a> to quickly search and execute actions for IDE assets such as options, templates, menus. You can&rsquo;t use Quick Launch to search for code and symbols. The Quick Launch search box is located at the top-right corner of the menu bar and is accessible by choosing the <strong>Ctrl+Q</strong> keys.</em></p></blockquote>

<p>The added advantage is that you can use the quick launch bar to <strong><em>learn new keyboard shortcuts</em></strong>. Searching for an item also shows the keyboard shortcut for it next to it. Over time you can remember the direct keyboard shortcut and avoid quick launch as well.</p>

<p><img alt="Visual Studio Quick Launch learn keyboard shortcuts" src="http://rahulpnath.com/images/visualstudio_quicklaunch_keyboardShortcuts.png" /></p>

<p>Knowing the tools that you use is an important part of development. Able to navigate fast within the IDE enables to remove any time wasted poking around the IDE. Use that time to read and write code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avoid State Mutation]]></title>
    <link href="http://rahulpnath.com/blog/avoid-state-mutation/"/>
    <updated>2017-02-01T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/avoid-state-mutation</id>
    <content type="html"><![CDATA[<p>How many times have you had to navigate down a long chain of function calls to find out that some code deep down was changing the value of an object passed to it? The change could either be setting the value to null or modifying the value in itself. When passing around reference types, it&rsquo;s easy to run into this situation very often.  This happens not just when debugging existing code, but also when looking at the code we have just finished writing. Maintaining state transitions and object state based on the order in which functions are invoked on them can soon become confusing and buggy. So the best way is to try and avoid them in the first place.</p>

<p><img alt="Avoid State Mutation" src="http://rahulpnath.com/images/mutation.png" /></p>

<h3>What is state Mutation</h3>

<p>The process of changing the value of a variable or an object over time after creation is called mutation. In simpler terms when you are changing the value of an object, you are mutating the state. I am sure that everyone would have had some time getting their head around the below statement when starting off with programming (I did)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">x</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="n">x</span> <span class="p">=</span> <span class="n">x</span> <span class="p">+</span> <span class="m">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>By second nature (depending on the programming languages one is exposed to e.g. csharp, java, etc.) you would say the above statement is perfectly fine and not think twice about anything. But show it to someone who is new to programming. They will find it hard to understand those two statements, the same phase that we have all gone through. &lsquo;=&rsquo; has turned into an assignment operator while it is an equality operator in mathematics. There are languages where &lsquo;=&rsquo; still stands for equality (like FSharp). In the example above the value of x is mutated - it is changed from 1 to 2.</p>

<blockquote><p><em>The process of actually changing a variable’s value over time, within a single context, is called mutation.</em></p></blockquote>

<h3>Risks of Mutation</h3>

<p>Mutable types can pose risks when passing a mutable value as function parameters or when returning mutable values from functions.</p>

<h4><strong>Passing Mutable Value</strong></h4>

<p>Let us take a simple example below. I have a list of integers, and I want to check if the first item of the incoming list and the sorted one are same. I have a simple sort method which implements <a href="https://en.wikipedia.org/wiki/Bubble_sort">Bubble sort</a>. What do you think will be the output?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;()</span> <span class="p">{</span> <span class="m">2</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">3</span> <span class="p">};</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">sortedList</span> <span class="p">=</span> <span class="n">Sort</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">sortedList</span><span class="p">.</span><span class="n">First</span><span class="p">()</span> <span class="p">==</span> <span class="n">list</span><span class="p">.</span><span class="n">First</span><span class="p">())</span>
</span><span class='line'>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;First item is in place&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">Sort</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">list</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">listEvaluated</span> <span class="p">=</span> <span class="n">list</span> <span class="k">as</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="p">??</span> <span class="n">list</span><span class="p">.</span><span class="n">ToList</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">size</span> <span class="p">=</span> <span class="n">listEvaluated</span><span class="p">.</span><span class="n">Count</span><span class="p">();</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;</span> <span class="p">(</span><span class="n">size</span> <span class="p">-</span> <span class="n">i</span><span class="p">);</span> <span class="n">j</span><span class="p">++)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">listEvaluated</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="p">&gt;</span> <span class="n">listEvaluated</span><span class="p">[</span><span class="n">j</span> <span class="p">+</span> <span class="m">1</span><span class="p">])</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">temp</span> <span class="p">=</span> <span class="n">listEvaluated</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class='line'>                <span class="n">listEvaluated</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="p">=</span> <span class="n">listEvaluated</span><span class="p">[</span><span class="n">j</span> <span class="p">+</span> <span class="m">1</span><span class="p">];</span>
</span><span class='line'>                <span class="n">listEvaluated</span><span class="p">[</span><span class="n">j</span> <span class="p">+</span> <span class="m">1</span><span class="p">]</span> <span class="p">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">listEvaluated</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, it prints out the message that the <em>First item is in place</em>. Before getting into the details of the issue, let us set our expectations correct. When calling the Sort method, we do not expect it to change the contents of the original list. Given that the function&rsquo;s signature is that of a Query (returns a value), we expect it not to create any <a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science">side effects</a>). According to <a href="https://en.wikipedia.org/wiki/Command%E2%80%93query_separation">Command Query Separation</a> (CQS) by Bertrand Meyer in <a href="http://amzn.to/2hZ4P9C">Object Oriented Software Construction</a></p>

<blockquote><p><em>Every method should either be a command that performs an action, or a query that returns data to the caller, but not both. In other words, Asking a question should not change the answer. More formally, methods should return a value only if they are referentially transparent and hence possess no side effects.</em></p></blockquote>

<p>Applying CQS means that any method can either be a Query or a Command. A command changes the state of the system but does not return a value (void). A query does not change the state of the system and returns a value and should be idempotent. Such functions are also referred to as <a href="https://en.wikipedia.org/wiki/Pure_function">pure functions</a>. The above Sort function only partially confirms to being a query. It does return the same output given the same input, the sorted list. But it changes the state of the system and has side effects - it mutates the list passed. The issue in the implementation of the Sort is that it casts the list passed in as <em>IList<int></em>, if it is already one. So when the parameter list is of type IList, listEvaluated points to the same list. If you force copy the list irrespective of it being a list or not will fix the issue. I will discuss more on how this kind of a conditional evaluation got in here in a separate post.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">listEvaluated</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">ToList</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This kind of change is only possible if the development team owns the Sort function. If this is a third-party library that you are consuming then the only way to avoid the problem will be to send in a copy of the list. Even trying to pass the list <a href="https://msdn.microsoft.com/en-us/library/e78dcd75(v=vs.110).aspx">AsReadOnly</a> will not work here. Check it out if you are not sure why.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">sortedList</span> <span class="p">=</span> <span class="n">Sort</span><span class="p">(</span><span class="n">list</span><span class="p">.</span><span class="n">ToList</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above solution does not imply that every time we need to pass in a list to a function we should defensively copy it (using ToList). <em>It depends</em>. Within a development team, there can be a convention that it sticks to CQS principle. In case of exceptions, make sure that it is communicated to everyone. Communication to developers is done best by naming the function to reflect that or adding a comment that shows up in the IDE intellisense (if any). For code that you consume from third parties or open sources make sure you understand well how the library behaves and check the documentation before using it. Ensure you have <a href="http://www.rahulpnath.com/blog/category/tdd/">unit tests</a> asserting the assumptions and behavior in all cases.</p>

<h4><strong>Returning Mutable Values</strong></h4>

<p>Let us take an example to see the possible effects of returning mutable values from a function. Below is a configuration helper class which returns a configuration object. The helper method is used in three different places of the application shown as <em>config1, config2, config3</em>. In one of the cases, the business logic requires the Duration value to be twice that in configuration. Since the real configuration helper reaches out to the database for its values, it was decided to cache the values after the first call. The ConfigurationHelper uses &lsquo;<em><a href="https://en.wikipedia.org/wiki/Singleton_pattern">Singleton Pattern</a></em> to achieve the caching Below is the implementation. Do you see any problems?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">config1</span> <span class="p">=</span> <span class="n">ConfigurationHelper</span><span class="p">.</span><span class="n">Get</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">config1</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">config2</span> <span class="p">=</span> <span class="n">ConfigurationHelper</span><span class="p">.</span><span class="n">Get</span><span class="p">();</span>
</span><span class='line'>    <span class="n">config2</span><span class="p">.</span><span class="n">Duration</span> <span class="p">=</span> <span class="n">config2</span><span class="p">.</span><span class="n">Duration</span> <span class="p">*</span> <span class="m">2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">config2</span><span class="p">);</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">config3</span> <span class="p">=</span> <span class="n">ConfigurationHelper</span><span class="p">.</span><span class="n">Get</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">config3</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">ConfigurationHelper</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">static</span> <span class="n">Configuration</span> <span class="n">configuration</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">Configuration</span> <span class="nf">Get</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">configuration</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'>            <span class="n">configuration</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Configuration</span> <span class="p">{</span> <span class="n">Duration</span> <span class="p">=</span> <span class="m">1</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">configuration</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Configuration</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">Duration</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first caller will get the configuration value 1, as expected. The second caller also gets the configuration value 1, but it goes on to set the value as two times, so it becomes 2. The third caller, which does not have any idea of the second caller or its specific business requirements also gets the configuration value as 2. They get a wrong configuration because the second caller updated the same object that the ConfigurationHelper holds. Again this is a side effect of how the ConfigurationHelper returns the configuration. There are two or more ways to solve this problem. The ConfigurationHelper class can return a new instance of the Configuration class every time someone requests for it. To return a new instance requires removing the private variable and the conditional check associated with it. Removing the check is similar to the defensive copying that we discussed in the previous example and also every call to get the configuration, now needs to hit the database. One could argue that only one caller mutates the object and it is unnecessary to create a new instance for the rest. We can remove the public setter&rsquo;s on the Configuration class properties. Without a setter, the second caller cannot change the Duration property of the Configuration class. Removing the setter means that we add a constructor as well to take in the parameters that it requires as below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Configuration</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">Duration</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Configuration</span><span class="p">(</span><span class="kt">int</span> <span class="n">duration</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>            <span class="n">Duration</span> <span class="p">=</span> <span class="n">duration</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above ensures that nobody can change the value of the configuration object once created. So the second caller can longer assign the new duration value to the same object. If it wants to continue using a configuration object it needs to create a new Configuration object with the new duration. If there are more properties on the configuration object you can create extension methods like WithDuration to create a new Configuration class copying all the values as is from the old object and replace just the Duration.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">ConfigurationExtension</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="n">Configuration</span> <span class="nf">WithDuration</span><span class="p">(</span><span class="k">this</span> <span class="n">Configuration</span> <span class="n">configuration</span><span class="p">,</span> <span class="kt">int</span> <span class="n">duration</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">Configuration</span><span class="p">(</span><span class="n">duration</span><span class="p">,</span> <span class="n">configuration</span><span class="p">.</span><span class="n">OtherValue</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we have seen the above two cases, mutation can cause undesired effects unless those are intended for. It does not mean that mutating is bad and you should stop it immediately. But if you start writing your code using immutable types, <a href="http://www.rahulpnath.com/blog/thinking-beyond-primitive-values-value-objects/">Value Objects</a>, etc. you will slowly move to a point where you no longer need to mutate values. When you do not mutate state, it is easier to reason about code. You no longer need to wade through those method calls to find who is changing the value of a property. Immutability is one of the key features of functional languages and changes how programs are written. You take away most of the problems involved in multi-threading when a function can no longer mutate the state of the object. So the next time you make change check if you are changing the state of the object, think twice and see if you can find a way around!</p>

<p><strong>References:</strong></p>

<ul>
<li><a href="http://web.cs.wpi.edu/~cs2102/common/kathi-notes/mutation-part2.html">Mutation</a></li>
<li><a href="http://web.mit.edu/6.005/www/fa15/classes/09-immutability/">Mutability &amp; Immutability</a></li>
<li><a href="https://www.cs.utexas.edu/~wcook/anatomy/anatomy.htm#Mutable">Mutable State</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Cmder - Portable Console Emulator for Windows]]></title>
    <link href="http://rahulpnath.com/blog/cmder-portable-console-emulator-for-windows/"/>
    <updated>2017-01-25T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/cmder-portable-console-emulator-for-windows</id>
    <content type="html"><![CDATA[<div style="text-align: center;">
    <iframe width="560" height="315" src="https://www.youtube.com/embed/fpxx8hlNTzc" frameborder="0" allowfullscreen></iframe>
</div>


<p>I have been using Cmder as my command line for around two years and been loving it. I am not a super user of the command line, but try to use it more and more.</p>

<blockquote><p><em>Cmder is a software package created out of pure frustration over the absence of good console emulator on Windows. It is based on ConEmu with major config overhaul, comes with a Monokai color scheme, and a custom prompt layout.</em></p></blockquote>

<p>This is not right with Windows 10, as there is a new command prompt which has a lot more features. I have not yet thought of moving to that as Cmder has been working well for me.</p>

<h4><strong>Installation and setting up</strong></h4>

<p>Cmder is open source and free to download from <a href="http://cmder.net/">Cmder.net</a>. One of the advantages of Cmder is its portability. You can carry it with you on a USB stick or in the Cloud, so all your settings can go anywhere you go. Installation is simple, all you need to do is download the latest release, extract the archive and run Cmder executable. Check out the documentation if you face any difficulties.</p>

<h4><strong>Features I Like</strong></h4>

<p>Able to <strong><em>paste into the console using the Windows shortcut Ctrl + V</em></strong> is one of the key things that got me started with this command line tool. It also supports most of the other text traversal keyboard shortcuts of Windows.</p>

<p>Cmder supports <strong><em>multiple console tabs within a window</em></strong>. Tabs makes having multiple consoles open and managing them easy. All tab manipulation has associated keyboard shortcuts making it even faster. When creating a new tab, using Ctrl + T, you can choose to run different predefined tasks on command line startup. You can also set the user and user rights to run them as. Setting up the predefined tasks is under Settings -> Startup->Tasks.  I have added <strong><em>custom tasks</em></strong> for PowerShell, and Visual Studio developer command prompt as that is what I use mostly.</p>

<div id="customtasks" ></div>


<figure class='code'><figcaption><span>Powershell Administrator Task</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>*PowerShell -ExecutionPolicy Bypass -NoLogo -NoProfile -NoExit -Command
</span><span class='line'>&quot;Invoke-Expression &#39;. &#39;&#39;%ConEmuDir%\..\profile.ps1&#39;&#39;&#39;&quot; -new_console:d:&quot;%USERPROFILE%&quot;
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Visual Studio Developer Prompt Task</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>cmd /k &quot;&quot;%ConEmuDir%\..\init.bat&quot; &amp;
</span><span class='line'>&quot;C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\Tools\VsDevCmd.bat&quot;&quot;
</span><span class='line'>-new_console:d:%USERPROFILE%
</span></code></pre></td></tr></table></div></figure>


<p><strong><em>Alias</em></strong> is one of the key features that keeps me to Cmder. You can create short commands to map to longer commands. Aliases avoid typing long commands every time you want to perform that action. You can see all existing aliases by running alias command. I use this feature a lot. Most of the git commands are aliases, so I do not have to type them every time. For e.g., when on a git repository I can type <em>gs</em> to run git status. You can also pass arguments to alias. To do a git commit with a message I run <em>gc The commit message</em>. Aliases support optional parameters through the $1-9 or the $*.</p>

<p>To define a alias <em>alias gs=git status</em>. Below are some of the alias examples.</p>

<figure class='code'><figcaption><span>Alias Examples</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>gl=git log --oneline --all --graph --decorate  $*
</span><span class='line'>gs=git status
</span><span class='line'>ga=git add -A
</span><span class='line'>gc=git commit -m &quot;$*&quot;
</span><span class='line'>gcb=git checkout -b $*
</span><span class='line'>gpsu=git push --set-upstream origin $*
</span></code></pre></td></tr></table></div></figure>


<p>Check out the <a href="https://www.youtube.com/watch?v=fpxx8hlNTzc">video</a> for a walk-through of the setup and its usage. Cmder allows to get things done fast and looks great. Try it out to see if it works for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recording My First Screencast]]></title>
    <link href="http://rahulpnath.com/blog/recording-my-first-screencast/"/>
    <updated>2017-01-18T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/recording-my-first-screencast</id>
    <content type="html"><![CDATA[<p>Screencast helps to connect with people in a different way and adds a personal touch (sound and visual). It makes learning new things faster, by seeing it in action. Most of the fine details (which can be missed while writing a blog post) get captured in screencasting and this helps in better understanding. I have been long wanting to create screencasts and start a <a href="https://www.youtube.com/c/RahulNath">YouTube channel</a>. Finally, this <a href="http://www.rahulpnath.com/blog/2016-recap/">happened in 2016</a> and here is how the recording experience went.</p>

<blockquote><p><em>A <a href="https://en.wikipedia.org/wiki/Screencast">screencast</a> is a digital recording of computer screen output, also known as a video screen capture, often containing audio narration.</em></p></blockquote>

<h3>Presentation</h3>

<p>I chose to do my first screencast as a slide share presentation, as it was something that I was comfortable with. Since there are not many videos on <a href="http://www.rahulpnath.com/blog/category/azure-key-vault/">Azure Key Vault</a> and I have been blogging extensively about it, I didn&rsquo;t have to think twice about the topic. I scripted the whole presentation, to every word that I would say. Scripting for a video is different from writing a blog post as it has to be conversational with a video. Also, there are a lot more details that need to be covered and talked about as it is all visible on the recording.</p>

<p>Since I did not have an external monitor I wanted a presentation application that allows presenter notes and syncs them across multiple devices. This would allow me to record the screen and read off the presenter notes side by side. <a href="http://slides.com/">Slides</a> had exactly what I wanted. It allows to add presenter notes for each slide and allows <a href="http://help.slides.com/knowledgebase/articles/333925-remote-control">remote controlling</a> the presentation from multiple devices. So I can launch it as a full-screen presentation on my laptop for recording screen and have an iPad or mobile launch the same presentation as a presenter where the notes show up. This helped me follow the script while recording the video. It would have been much easier with multiple monitors, but I just did not want to get one just for this and I have been trying to get used with a single screen. Alternatively, I could have taken a printout of the script.</p>

<p><img alt="Using slides on multiple devices" src="http://rahulpnath.com/images/screencast_slides_multidevice.jpg" /></p>

<h3>Microphone</h3>

<p>An external microphone is absolutely necessary to record your sound well. The microphone that comes built into the laptop is not suited for recording good quality audio. It picks a lot more of the background noises, room noise, typing etc and creates a lot of disturbance in the recording. There are a lot of options available when it comes to getting an external microphone. Most of the microphones are either <a href="http://ehomerecordingstudio.com/best-condenser-mics/">Condenser Mics</a> or <a href="http://ehomerecordingstudio.com/dynamic-studio-microphone/">Dynamic Mics</a>. Microphones also have different connectivity options like <a href="https://en.wikipedia.org/wiki/XLR_connector">XLR</a>, <a href="https://en.wikipedia.org/wiki/USB">USB</a> etc. For a home recording setup USB is easier to get started with so I decided to get one with a <a href="http://ehomerecordingstudio.com/usb-microphones/">USB connectivity</a>.</p>

<p>I got the <a href="http://www.rode.com/microphones/podcaster">Rode Podcaster</a> with a <a href="http://www.rode.com/accessories/psa1">boom arm</a> and <a href="http://www.rode.com/accessories/psm1">shock mount</a>. The Rode Podcaster is a dynamic USB mic and is a popular choice amongst many people out there. It&rsquo;s a bit higher on the price side (depends on your budget though) but delivers great value. It cuts off most of the room noise and takes in only your voice which is exactly what I wanted. You need to get really close into the mic, so a boom arm helps.</p>

<p><img alt="Screencast Microphone, Rode Podcaster" src="http://rahulpnath.com/images/screencast_microphone_rode.jpg" /></p>

<h3>Software</h3>

<p>Choosing the software was much easier than getting the microphone. <a href="http://www.adobe.com/au/products/premiere.html?sdid=VBF1KRFN&amp;mv=search&amp;s_kwcid=AL!3085!3!107609177344!e!!g!!adobe%20premiere&amp;ef_id=Ve-MSAAABFDV-qvS:20170101175215:s">Adobe Premiere</a> or <a href="http://shop.techsmith.com/store/techsm/en_AU/pd/productID.289432000">Camtasia</a> are the most popular screen recording software&rsquo;s in the windows world. I have a lot of friends already using Camtasia and was happy with it. So I decided to stick with Camtasia and bought a license (Thanks to <a href="http://www.rahulpnath.com/blog/finding-a-job-abroad/">Readify&rsquo;s</a> Software Allowance, I did not have to spend a lot from my pocket).</p>

<p>For recording audio, I use <a href="http://www.audacityteam.org/">Audacity</a>, which is an open source software and available free of cost. I am yet to learn some audio processing techniques and for now just use noise removal, amplify and compression. Also since the Rode microphone does not pick a lot of external noise the audio did not require much processing. At first, I tried recording with a <a href="http://www.samsontech.com/samson/products/microphones/usb-microphones/gomic/">Samson GO mic</a> but felt that it picked it a lot more room noise and it needed a lot more audio processing.</p>

<h3>Recording</h3>

<p>With the hardware and software sorted now comes the hardest part of it all - Recording!!. I knew there would be difficulties along the way, but never thought it would be this hard. After reading around I understood that a popular technique that people use for recording is to record the audio and video separately for webcasts/screen recordings. I decide to take the same approach but just that did it in the wrong order (which I found after the first recording). For my first video I did the video first and the audio later. This meant that I recorded my screen performing all the slide movements and the code sample demo and then tried to fit the audio onto it. This was the biggest mistake in my complete recording, but I realized it only towards the end of the recording. Recording video was easy but fitting in the sound to it was hard. I had to do multiple (innumerous) takes and have to stop so often every now and then. And since I am yet to learn <em>how to talk naturally when in front of a microphone</em>, my voice was all over the place. Some bits had more bass, some a bit low others high, some fast others slow. I struggled with it for a long time and finally somehow got to get it all together. But though it was nowhere close to the quality that I set out for or would love to have in videos that I watch, I decided to ship it. For the <a href="https://www.youtube.com/watch?v=JbshGF4ZwGE">second recording</a>, I recorded the audio first and then fitted in the video onto it. This was so much easier and I have a more consistent voice in that, though there is a noticeable change in the middle.</p>

<p>I am planning to do more recordings in the upcoming months so that I get more comfortable with it. <strong><em>If it hurts, do it more often</em></strong>. Kindly leave your feedback on the videos.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Finding Keyboard Shortcuts on Websites]]></title>
    <link href="http://rahulpnath.com/blog/finding-keyboard-shortcuts-on-websites/"/>
    <updated>2017-01-16T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/finding-keyboard-shortcuts-on-websites</id>
    <content type="html"><![CDATA[<p><img alt="Keyboard Shortcuts" src="http://rahulpnath.com/images/keyboard_shortcuts.jpg" /></p>

<p>I prefer to use the keyboard to navigate within sites I use frequently. Keyboard enables to navigate faster within site and perform tasks quicker. The <a href="http://www.rahulpnath.com/blog/review-six-months-and-counting-logitech-mx-master/">Logitech MX Master</a> mouse provides a lot of capabilities to navigate. But I find the keyboard faster to perform repetitive actions - like posting a new status update on social media sites, managing tasks in Jira, TFS online, GitHub, responding to emails, Todoist, etc. Finding keyboard shortcuts on these various sites can itself be a daunting task. One might need to google to get the shortcuts or find the relevant documentation on the site. Luckily most of the popular sites today display a pop-up modal with all the keyboard shortcuts for the site when pressing <strong>Shift + ?</strong>. Note that this might not work on all the sites out there. But for most of the common ones that I use l, I find it working.</p>

<p>So the next time you spend a lot of time on a website try hitting <strong>Shift + ?</strong> to look for supported keyboard shortcuts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Productivity Noise with Noisli]]></title>
    <link href="http://rahulpnath.com/blog/productivity-noise-with-noisli/"/>
    <updated>2017-01-11T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/productivity-noise-with-noisli</id>
    <content type="html"><![CDATA[<p>If you are the kind of person that likes to listen to some music while working, then this one is for you. Music is proven to have significant effects on improving focus while working. But it is also quite possible to get fully immersed in the music and forget all about work. Different kinds of music contribute to improving concentration while not getting immersed in the music itself. I usually <a href="http://theheadphonesrule.com/">wear my headphones</a> at work while working and listen to music.</p>

<blockquote><p><em>Music helps to minimize distractions and helps you reach a state of <a href="http://amzn.to/2jlYIgV">Flow</a>, which is ideal for improving productivity.</em></p></blockquote>

<p>At times I like to hear to just some background noises simulating different environments. <a href="https://www.noisli.com/">Noisli</a> is an application that helps mix different sounds and create your perfect environment. The sounds could either be working in a restaurant or while it&rsquo;s raining with thunder, in a forest, by the side of the fire, etc. It helps create the mood that you want and helps recreate it with sound. Since the noises are of a fixed pattern, you soon get used to it and improves concentration at work.</p>

<p><img class="center" alt="Noisli - Favorite Combos" src="http://rahulpnath.com/images/noisli_favorite.png" /></p>

<p>Here are my favorite mixes in Noisli.
<a href="https://www.noisli.com/get_combo_by_link/W5rvjLZXcoJbooq">Rain Mix</a>, <a href="https://www.noisli.com/get_combo_by_link/vjUpcG2OAXxKVSU">Jungle</a>, <a href="https://www.noisli.com/get_combo_by_link/uhRXMysAIcVEbHF">TRain</a>, <a href="https://www.noisli.com/get_combo_by_link/gFKhnETdoybxcmc">HotelRainFire</a></p>

<p>You can use Noisli directly from the <a href="https://www.noisli.com/">website</a> or use any of their <a href="https://www.noisli.com/apps">Apps and Extensions</a>. Find out what works for you and leave a comment on your favorite combos.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simulating delays in HTTP Calls For Manual Tests]]></title>
    <link href="http://rahulpnath.com/blog/simulating-delays-in-http-calls-for-manual-tests/"/>
    <updated>2017-01-09T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/simulating-delays-in-http-calls-for-manual-tests</id>
    <content type="html"><![CDATA[<p>At one of my clients, we were facing an issue of missing some part of a form data when processing a <em>Submit</em> request on the form. As per the current design, the form autosaves data to the database as and when user types in. When the user finally submits the form to be processed the Controller gets all the relevant data from the database and sends for processing. But we noticed that the processing requests missed parts of data in the request send for processing even though the database had those values. This was a clear case where the forms submit request got processed even before all the forms data was saved. The UI was enabling the Submit button right after all the UI validations were made and asynchronously firing off saves to the database.</p>

<p>Let&rsquo;s not go into the design discussion of whether the UI should be sending in all the data to be processed as part of the Submit request as opposed to just sending a reference id and have the controller get all the data from the database (which it is currently doing). The quick fix for this problem was to enable the submit button only after all the asynchronous save requests (the ones for autosave) came back with a success response. The fix was simple but testing this was a challenge.</p>

<blockquote><p><em>We wanted to delay a few HTTP requests to check how the UI behaved</em></p></blockquote>

<p>When using automated tests there are a lot of frameworks that can help delay requests. But in this case, we were relying on manual tests.</p>

<h3>Using Fiddler to Delay Requests</h3>

<p><a href="http://www.telerik.com/fiddler">Fiddler</a> is an HTTP debugging proxy server application, that captures HTTP and HTTPS traffic and displays to the user. It is one of the <a href="http://www.rahulpnath.com/blog/tools-that-I-use/">tools that I use almost every other day</a>. In Fiddler, we can create rules on web requests and modify how they are handled and responded. Most of the functionality is available under the <a href="http://docs.telerik.com/fiddler/KnowledgeBase/AutoResponder#latency">AutoResponder</a> tab. We had seen earlier how to <a href="http://www.rahulpnath.com/blog/using-fiddler-to-help-in-manual-testing/">compose web requests and also simulate error conditions in Fiddler</a>. Here we will see how to use Fiddler to delay request/response time. In Fiddler, we can either delay the request itself being sent to the server or delay the handover of response back to the calling application once it is received from the server.</p>

<h4><strong>Delay</strong></h4>

<p>By setting <a href="http://docs.telerik.com/fiddler/KnowledgeBase/AutoResponder#delay">delay</a> on a request we can specify the time to delay sending the request to the server. The value is specified in milliseconds. When a request that <a href="http://docs.telerik.com/fiddler/KnowledgeBase/AutoResponder#matching-rules">matches</a> the condition set (in this case an EXACT match with a URL) fiddler delays sending this request to the server by the set amount of time.</p>

<blockquote><p><em>Delay sending request to the server by #### of milliseconds</em></p></blockquote>

<p>Drag&#8217;n Drop the request the URL (1) into the AutoResponder tab (2) and from the dropdown (3) under the Rule Editor choose delay and set the delay time. Click Save (4). Make sure that the request and rules are enabled (5 &amp; 6).</p>

<p><img class="center" alt="Posts per month - 2016" src="http://rahulpnath.com/images/fiddler_delay.png"/></p>

<h4><strong>Latency</strong></h4>

<p>By setting <a href="http://docs.telerik.com/fiddler/KnowledgeBase/AutoResponder#latency">latency</a> on a request we can specify the delay before a response is received. When a request that <a href="http://docs.telerik.com/fiddler/KnowledgeBase/AutoResponder#matching-rules">matches</a> the condition set fiddler sends the requests to the server immediately. Once the response is received it delays passing the response back to the calling application by the set delay time in milliseconds.</p>

<blockquote><p><em>Induce a delay (latency) before a response is returned.</em></p></blockquote>

<p>Drag&#8217;n Drop the request URL (1) into the AutoResponder tab (2). Right click on the URL and select &lsquo;Set Latency&rsquo; (3). Enter the latency time in milliseconds and OK. Make sure that rules and latency options are enabled (4 &amp; 5)</p>

<p><img class="center" alt="Posts per month - 2016" src="http://rahulpnath.com/images/fiddler_latency.png"/></p>

<p>Using these options we delayed all the autosave requests going off the form. This delayed saving the data in the database and the forms Submit request once processed did not have all the required data. It also helped us test after the fix and helped ensure that the submit button was enabled only after all form data was saved. In both the above examples, I chose EXACT match condition to set the delay/latency. This will delay only the specific requests. To modify all the requests you can use a different regex match condition. To simulate a random time delay or latency among different requests you can even use <a href="http://docs.telerik.com/fiddler/KnowledgeBase/FiddlerScript/ModifyRequestOrResponse">Fiddler Scripting</a> and set the delay time using a random number. This helps simulate a slow internet connection scenario and test how the application responds to it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Paste Without Formatting]]></title>
    <link href="http://rahulpnath.com/blog/paste-without-formatting/"/>
    <updated>2017-01-05T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/paste-without-formatting</id>
    <content type="html"><![CDATA[<p>I share a lot of information copying and pasting from websites. Most of the times I want to share just the text and not any formatting. To remove any text formatting, I copy it into Notepad and then onto the destination. Yesterday I found that using <strong>Ctrl + Shift + V</strong> to paste (instead of <em>Ctrl + V</em>) removes all text formatting.</p>

<p>As shown, when using Ctrl + V the text gets copied along with the formatting as shown below.</p>

<p><img alt="Paste With Formatting" src="http://rahulpnath.com/images/paste_with_formatting.png" /></p>

<p>When using Ctrl + Shift + V, only the text gets copied and the formatting is ignored.
<img alt="Paste Without Formatting" src="http://rahulpnath.com/images/paste_without_formatting.png" /></p>

<p>Using this shortcut saves time as I no longer need to open Notepad for this!</p>

<p>PS: As one of my readers rightly pointed out (below in the comments), this might not work on all applications. I have tried this on Chrome Browser and Lync For Business and worked fine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Code Reviews Effective]]></title>
    <link href="http://rahulpnath.com/blog/code-review/"/>
    <updated>2017-01-03T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/code-review</id>
    <content type="html"><![CDATA[<p>Code review is an essential practice of the development life cycle. It helps improve the code quality, unify team practices, share knowledge, mentoring etc. over a longer period of time. It helps find mistakes that are overlooked while developing and helps improve the overall quality of the software. This helps accelerate the deployment process as changes are more likely to pass through testing.</p>

<blockquote><p><em>Peer review—an activity in which people other than the author of a software deliverable examine it for defects and improvement opportunities—is one of the most powerful software quality tools available. Peer review methods include inspections, walkthroughs, peer desk checks, and other similar activities.</em></p>

<p>-<a href="http://www.processimpact.com/articles/humanizing_reviews.html"><strong> Karl E. Wiegers</strong></a></p></blockquote>

<p><img class="center" alt="Posts per month - 2016" src="http://rahulpnath.com/images/codereview_friendly.png"/></p>

<p>Below are some of my thoughts on the various aspects involved in a Code Review.</p>

<h3>Sending a Review</h3>

<p>Before sending for a code review make sure that only the necessary files for the change are added in the review. Often it happens that when we write code there are remains of things that we tried and discarded, like new files, packages, changes to project metadata files etc. Double check and make sure that the changes are what are just required. Ensure that the code builds successfully. If there are any build scripts that your team uses, make sure that those are run and passes successfully. When submitting a code review make sure that you reference the associated work item - be it a bug, story, task etc. Add <a href="http://www.rahulpnath.com/blog/category/testing/">tests</a>. Add in a description detailing the change and any reasoning behind it to add in more context. This will help the reviewer understand the code much faster. Add in relevant people for the review and submit a request. Check out <a href="http://blog.ploeh.dk/2015/01/15/10-tips-for-better-pull-requests/">some great tips for a better-looking review request</a>.</p>

<h3>Handling Review Comments</h3>

<p>One of the key things in a code review and one that&rsquo;s often missed and drives people frustrated is that they try to take it all in.</p>

<blockquote><p><em>Not all comments in a review needs to be addressed</em></p></blockquote>

<p>If a review comment points out a mistake in logic or business functionality or conflict with other code you need to fix them, unless you think the reviewer is wrong. But for suggestions on how better to structure your code or refactor into a more readable code, naming, style formatting etc needs addressing only if you feel they are adding value. But make sure to communicate well with the reviewer and reach an agreement.</p>

<p>Look at comments as a way to improve your code and help the team and business. Go in with a positive attitude. When seen as an overhead or an extra ritual, code reviews can be really painful and depressing. Make a note of commonly occurring comments or mistakes you are making and try to handle them at the time of development. Rather than mechanically going through the code review and making changes to the code, internalize on the change and try to see the benefits of a change. This helps to incorporate such suggestions in future reviews as well.</p>

<h3>Responding to a Code Review</h3>

<p>I usually find myself following the below three variations when coming to replying to a code review request</p>

<ul>
<li><p><strong>Comment and Wait</strong>
I leave comments on the review but do not approve. This means that I would like to have those comments actioned and a new pull request be raised for that. This often falls into those cases where there are logic or business issues.</p></li>
<li><p><strong>Comment and Approve</strong>
I leave comments (if any) but also approve the code review. This means that the code <em>Looks Good To Me</em> (LGTM), but would be better with the comments addressed. These comments generally relate to better formatting, improved on naming or refactoring readability.</p></li>
<li><p><strong>Add Relevant People</strong>
Add in reviewers that I feel are missed and relevant for the part of the code that is changed.  This I do irrespective of the above two options if I feel someone else needs to take a look. In these cases, if it was my review that gets added in an extra reviewer I would wait to get a sign off from that person too.</p></li>
</ul>


<h4><strong>Business Aspect</strong></h4>

<p>When reviewing code look first for the functionality that the code change addresses. It is possible that we get carried away just by the technical aspect of code and ignore the business aspect altogether. If you have <a href="https://www.leadingagile.com/2014/09/acceptance-criteria/">Acceptance Criteria</a> defined for tasks then it&rsquo;s worth reading it before doing the code review to get more context.</p>

<h4><strong>Technical aspect</strong></h4>

<p>Once the business aspect is covered have a look at the technical aspect of the change. Whether the code is decoupled, has the correct abstractions, follows team conventions (best if automated). Check for commonly occurring problems like improper usage of dispose pattern, magic numbers, large methods, all code flow paths not handled etc. See if the new code fits into the overall architecture of the application. Look for tests and ensure the validity of the test data. Look out for <a href="https://en.wikipedia.org/wiki/Overengineering">overengineering</a> or <a href="https://en.wikipedia.org/wiki/Not_invented_here">not invented here syndrome</a>.</p>

<h4><strong>Aesthetic</strong></h4>

<p>Code formatting is as important as the code itself. Code is read more often than written, so we should try and optimize code for reading. I would prefer to automate this as far as possible so that people don&rsquo;t need to look for these in reviews. I feel that is often time not well spent and also tends to lead to longer discussions (<a href="https://blog.codinghorror.com/death-to-the-space-infidels/">tabs vs Spaces</a>). When it is part of the build and automated people seldom complain about it and in a very short period of time, the formatting rules become second nature to them. If you currently do not have automated checks you can gradually <a href="http://www.rahulpnath.com/blog/introducing-code-formatting-into-a-large-codebase/">introduce formatting checks into your builds for a large code base</a>.</p>

<blockquote><p><em>Don&rsquo;t go by &lsquo;It&rsquo;s done like that everywhere so I will keep it the same&rsquo;</em></p></blockquote>

<p>There might be a lot of practices that is being followed over the period of time. But if you find any of the practices making it harder on a day-to-day functioning of the team, take a step towards changing the practice. I am not a fan of &lsquo;<em>clean it all at once</em>&rsquo; style of approach. I prefer to gradually introduce the change for two reasons</p>

<ul>
<li>No need to stop or allocate people to repeatedly do the same task of cleaning it everywhere. (Unless there is a very strong business justification to it)</li>
<li>You get gradually introduced to the new way of doing things. This gives time to reflect and compare with the old way. You have time to correct yourself if the new approach is not fitting well either or causing more trouble than previous.</li>
</ul>


<h3>Handling Conflicts</h3>

<p><img class="center" alt="Posts per month - 2016" src="http://rahulpnath.com/images/codereview_wtf.png"/></p>

<p>Foster environments where you don&rsquo;t curb discussions or other people&rsquo;s ideas but encourage everyone to actively participate and throw around even the stupidest of an idea.</p>

<blockquote><p><em>Psychological safety is a “shared belief, held by members of a team, that the group is a safe place for taking risks.” It is “a sense of confidence that the team will not embarrass, reject, or punish someone for speaking up,” Edmondson wrote in a 1999 paper. “It describes a team climate characterized by interpersonal trust and mutual respect in which people are comfortable being themselves.</em></p>

<p><a href="https://www.linkedin.com/pulse/what-google-learned-from-its-quest-build-perfect-team-charles-duhigg"><strong>- Charles Duhigg</strong>, <em>What Google Learned From Its Quest to Build the Perfect Team</em></a></p></blockquote>

<p>Code reviews should also be seen as a way to incorporate better practices from fellow developers and as a learning mechanism. Don&rsquo;t take comments personal, but look at it for what they are. When you have a conflicting opinion you can reply to the comment with your thoughts and cross check with the reviewer. Rarely it can happen that you have conflicting opinions on code review comments and you are not able to solve it among the people involved.  Walk up to the person (if you are co-located) or have a conversation over your teams messaging application. But make sure that it stays healthy. In case the discussion is not going the intended way you can involve senior team members or other fellow team members to seek their opinions too. If such kinds of conflicts are happening more often then the team needs to analyze the nature of review comments that these occur on, if it&rsquo;s between specific groups of people or any visible patterns and try to address them.</p>

<p>When taken in isolation any practices that a team does take time. So disregard any activity just because it adds more time to your process. When seen as part of the overall development cycle and the benefits it brings to the business, Code Reviews proves to be an essential practice. Different teams tend to have different guidelines and checklists for the reviews. Follow what works best for your team. Do you do code reviews as part of your development cycle? What do you feel important in a Code Review? Sound off in the comments!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-help Books]]></title>
    <link href="http://rahulpnath.com/blog/books/"/>
    <updated>2017-01-01T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/books</id>
    <content type="html"><![CDATA[<p>Over the past couple of years, I have read a lot of <a href="https://en.wikipedia.org/wiki/Self-help_book">Self-help books</a>. Here are a few that I liked and have drawn ideas from. Self-help books in itself is an easy way to procrastinate as you get an immediate high on knowing how optimized and productive your life can be. I have fallen for this a lot of times and its hard to keep away from it. Every time I read one of these books, I get the feeling that this is going to change my life. But then when I get to the end of the book all I need is more of it and ends up <a href="http://www.huffingtonpost.com/quora/why-self-help-books-rarel_b_9517224.html">starting with a new book</a>. Slowly with time I started to realize that all that is happening is reading and very little action.</p>

<p>To be successful with any of these books you need to draw ideas into your daily life and practice them. You need to build short term goals and get the behavior you are trying to create into you.</p>

<blockquote><p><em>Reading without action is just another way to procrastinate and is a waste of time.</em></p></blockquote>

<p>Take notes from the books, see how it can be incorporated into your daily life and improve one at a time. Revisit the notes often. I prefer reading this genre of books on the Kindle (<a href="http://www.rahulpnath.com/blog/ebook-or-hard-copy/">technical books I prefer physical copy</a>), as it requires little flipping back and forth.  On Kindle, you can <a href="https://www.amazon.com/gp/help/customer/display.html?nodeId=201241990">add or remove bookmarks, highlights, and notes at any location</a> and revisit this at a later point in time.</p>

<div>
<div class="row">
   <div class="col-sm-6 col-md-3">
      <div class="thumbnail">
         <a href="http://amzn.to/2hm8vDJ">
         <img src="http://rahulpnath.com/images/books_amillionthougts.jpg" data-holder-rendered="true" style="display: block;" >
         </a>
         <div class="caption">
            <h5>A Million Thoughts</b></h5>
         </div>
      </div>
   </div>
   <div class="col-sm-6 col-md-3">
      <div class="thumbnail">
         <a href="http://amzn.to/2gOYluc" >
         <img src="http://rahulpnath.com/images/books_powerofhabit.jpg" data-holder-rendered="true" style="display: block;">
         </a>
         <div class="caption">
            <h5><b>Power Of Habit</b></h5>
         </div>
      </div>
   </div>
   <div class="col-sm-6 col-md-3">
      <div class="thumbnail">
         <a href="http://amzn.to/2gsJaed" >
         <img src="http://rahulpnath.com/images/books_gtd.jpg" data-holder-rendered="true" style="display: block;">
         </a>
         <div class="caption">
            <h5><b>Getting Things Done</b></h5>
         </div>
      </div>
   </div>
   <div class="col-sm-6 col-md-3">
      <div class="thumbnail">
         <a href="http://amzn.to/2hsjXkq" >
         <img src="http://rahulpnath.com/images/books_warofart.jpg" data-holder-rendered="true" style="display: block;">
         </a>
         <div class="caption">
            <h5><b>The War of Art</b></h5>
         </div>
      </div>
   </div>
</div>
<div class="row">
<div class="col-sm-6 col-md-3">
   <div class="thumbnail">
      <a href="http://amzn.to/2hmeokB">
      <img src="http://rahulpnath.com/images/books_superhumanbyhabit.jpg" data-holder-rendered="true" style="display: block;" >
      </a>
      <div class="caption">
         <h5><b>Superhuman By Habit</b></h5>
      </div>
   </div>
</div>
<div class="col-sm-6 col-md-3">
   <div class="thumbnail">
      <a href="http://amzn.to/2gP4sig" >
      <img src="http://rahulpnath.com/images/books_winfriendsandinfluenceprople.jpg" data-holder-rendered="true" style="display: block;">
      </a>
      <div class="caption">
         <h5><b>How to Win Friends & Influence People</b></h5>
      </div>
   </div>
</div>
<div class="col-sm-6 col-md-3">
   <div class="thumbnail">
      <a href="http://amzn.to/2hmblsw" >
      <img src="http://rahulpnath.com/images/books_thefirsttwentyhours.jpg" data-holder-rendered="true" style="display: block;">
      </a>
      <div class="caption">
         <h5><b>The First 20 Hours</b></h5>
      </div>
   </div>
</div>
<div class="col-sm-6 col-md-3">
   <div class="thumbnail">
      <a href="http://amzn.to/2hsfy0H" >
      <img src="http://rahulpnath.com/images/books_thepassionateprogrammer.jpg" data-holder-rendered="true" style="display: block;">
      </a>
      <div class="caption">
         <h5><b>The Passionate Programmer</b></h5>
      </div>
   </div>
</div>
</div>
<div class="row">
   <div class="col-sm-6 col-md-3">
      <div class="thumbnail">
         <a href="http://amzn.to/2hsh1En">
         <img src="http://rahulpnath.com/images/books_eatthatfrog.jpg" data-holder-rendered="true" style="display: block;" >
         </a>
         <div class="caption">
            <h5><b>Eat That Frog</b></h5>
         </div>
      </div>
   </div>
   <div class="col-sm-6 col-md-3">
      <div class="thumbnail">
         <a href="http://amzn.to/2gsXmE0" >
         <img src="http://rahulpnath.com/images/books_smarterfasterbetter.jpg" data-holder-rendered="true" style="display: block;">
         </a>
         <div class="caption">
            <h5><b>Smarter Faster Better</b></h5>
         </div>
      </div>
   </div>
   <div class="col-sm-6 col-md-3">
      <div class="thumbnail">
         <a href="http://amzn.to/2hsr2kI" >
         <img src="http://rahulpnath.com/images/books_thecompoundeffect.jpg" data-holder-rendered="true" style="display: block;">
         </a>
         <div class="caption">
            <h5><b>The Compound Effect</b></h5>
         </div>
      </div>
   </div>
   <div class="col-sm-6 col-md-3">
      <div class="thumbnail">
         <a href="http://amzn.to/2hsoeUC" >
         <img src="http://rahulpnath.com/images/books_rework.jpg" data-holder-rendered="true" style="display: block;">
         </a>
         <div class="caption">
            <h5><b>Rework</b></h5>
         </div>
      </div>
   </div>
   </div>
   <div class="row">
   <div class="col-sm-6 col-md-3">
      <div class="thumbnail">
         <a href="http://amzn.to/2gJ7Uio">
         <img src="http://rahulpnath.com/images/books_fourhourworkweek.jpg" data-holder-rendered="true" style="display: block;" >
         </a>
         <div class="caption">
            <h5><b>Four Hour Work Week</b></h5>
         </div>
      </div>
   </div>
   <div class="col-sm-6 col-md-3">
      <div class="thumbnail">
         <a href="http://amzn.to/2hNVTUV" >
         <img src="http://rahulpnath.com/images/books_dothework.jpg" data-holder-rendered="true" style="display: block;">
         </a>
         <div class="caption">
            <h5><b>Do The Work</b></h5>
         </div>
      </div>
   </div>
   <div class="col-sm-6 col-md-3">
      <div class="thumbnail">
         <a href="http://amzn.to/2htP52l" >
         <img src="http://rahulpnath.com/images/books_zenhabits.jpg" data-holder-rendered="true" style="display: block;">
         </a>
         <div class="caption">
            <h5><b>Zen Habits</b></h5>
         </div>
      </div>
   </div>
   <div class="col-sm-6 col-md-3">
      <div class="thumbnail">
         <a href="http://amzn.to/2hFyZmZ" >
         <img src="http://rahulpnath.com/images/books_thepomodorotechnique.jpg" data-holder-rendered="true" style="display: block;">
         </a>
         <div class="caption">
            <h5><b>The Pomodoro Technique</b></h5>
         </div>
      </div>
   </div>
</div>
</div>


<p>Hope some of these helps you as well. Have a great year ahead!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016: What Went Well, What Didn't and Goals]]></title>
    <link href="http://rahulpnath.com/blog/2016-recap/"/>
    <updated>2016-12-20T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/2016-recap</id>
    <content type="html"><![CDATA[<p><a href="http://www.oldlaundrytheatre.co.uk/happy-new-year-from-all-at-the-old-laundry/">
<img class="center" alt="Posts per month - 2016" src="http://rahulpnath.com/images/2016_happy_new_year.png"/>
</a></p>

<p>2016 was a great year and I thought sharing some of the things that went well, those that didn&rsquo;t and setting goals for 2017.</p>

<blockquote><p><strong>TLDR;</strong></p>

<p><em>2016 was a great year and is the first one where I am writing a &lsquo;year in review&rsquo; post. Blogging, Videos, Open Source and Community contribution are some of the things that went well. FSharp, Reading, Travel, Photography and Exercise did not go that great. Looking forward to 2017 and planning to keep the goodness of 2016 and add some more to it</em></p></blockquote>

<h3>What went well</h3>

<h4><strong>Blogging</strong></h4>

<p>This has been a great year with my blog. On an average, I published four blog posts a month. It started with a self-challenge from March to write every day. I was able to come up with eight posts that month, but then felt it was not something that I could stick with consistently. So I kept a target of four posts per month and stuck to it for the rest of the year. I automated a lot of mundane tasks in my blogging workflow right from <a href="http://www.rahulpnath.com/blog/optimizing-octopress-workflow-for-new-posts/">creating draft posts</a> to <a href="http://www.rahulpnath.com/blog/continuos-delivery-of-octopress-blog-using-travisci-and-docker/">deploying posts</a> and <a href="http://www.rahulpnath.com/blog/automatic_deployment_of_future_posts_with_octopress/">scheduling posts for future deployment</a>. This has saved a lot of time for me and helps me stick just with the writing part of blogging!</p>

<p><img class="center" alt="Posts per month - 2016" src="http://rahulpnath.com/images/2016_postspermonth.png"/></p>

<p>Sticking with <a href="http://www.rahulpnath.com/blog/maintaining-a-blogging-schedule/">publishing posts on a regular interval</a> was more about deciding that I have to write every day. I set a &lsquo;mini habit&rsquo; to write every day - at least one line every day - and stuck to it. This helped me get over the initial inertia of starting to write a post. Having set this goal to myself I had to consistently come with topics to blog about. This very much changed the way that I approached <a href="http://www.rahulpnath.com/blog/finding-a-job-abroad/">my day job</a>. I always involved in it with the need to find something to share, in a way that I can abstract it out from the business dependencies. Most of the decisions and issues that happened to us (the development team) are now documented here. This acts as a documentation for any new joiners and makes the <a href="http://www.rahulpnath.com/blog/make-it-easy-for-the-new-person-joining-your-team-have-a-project-ramp-up-plan/">ramp up to the project a bit easier</a>. More than anything it definitely helps me find the solution when I come across the same issue again. So if you still don&rsquo;t have a blog of your own, there is no better time than now. Make it a new year resolution. <a href="http://www.rahulpnath.com/blog/own-your-urls/">Get a URL</a> and start writing. I have also been successful in getting a couple of people (at least four that I personally know of) to blog. Getting started is the biggest hurdle, the rest will fall in the due course of time.</p>

<h4><strong>Youtube Channel</strong></h4>

<p>Starting a <a href="https://www.youtube.com/c/RahulNath">Youtube channel</a> had been something I wanted to do for a long time. I have just got started with it and posted one video. I now understand why people say recording is hard - there is a lot to it and it takes time to be good at it. The only way to get better if something is hard is to do more of it - <em><a href="http://martinfowler.com/bliki/FrequencyReducesDifficulty.html">Frequency Reduces Difficulty</a></em> I plan to start with one video per month and see how it goes. I have been procrastinating on the second video for a while, <strike>will see if I can get it out before this year!</strike> <a href="https://www.youtube.com/watch?v=JbshGF4ZwGE">Got it out just in time!</a></p>

<h4><strong>Open Source and Forums</strong></h4>

<p>Contributing to Open Source projects is a good way to learn. I have always struggled to find projects/issues to contribute to. But then I learned that it is again just a matter of deciding and committing to. <a href="http://www.firsttimersonly.com/">First Timers only</a> a good way to find issues and projects that one can possible jump right into. I decided to start looking at projects that I use more on a day to day basis - Asmspy and Autofixture were something that interested me. There were a couple of open issues in AsmSpy, that I picked up and <a href="http://mikehadlow.com/">Mike Hadlow</a> was more than happy to merge them in. I also decided to set up <a href="https://github.com/mikehadlow/AsmSpy/issues/14">Chocolatey package for AsmSpy</a>. On Mike&rsquo;s request, I now manage the <a href="https://chocolatey.org/packages/asmspy/">chocolatey package account</a> and am a contributor on AsmSpy project. I automated the <a href="http://www.rahulpnath.com/blog/automated-deployment-of-asmspy-to-chocolatey-using-appveyor/">deployment pipeline for AsmSpy</a> so that I do not have to worry about deploying the chocolatey package every time a change is made. Also got to <a href="https://github.com/AutoFixture/AutoFixture/issues?q=mentions:rahulpnath+is:closed">contribute to a few issues with AutoFixture</a> which is managed by <a href="http://blog.ploeh.dk/">Mark Seemann (ploeh)</a>. I was also lucky enough to meet him in person at <a href="http://www.rahulpnath.com/blog/ndc-sydney/">NDC Sydney</a>.</p>

<p>I keep a look at the <a href="https://social.msdn.microsoft.com/Forums/azure/en-US/home?forum=AzureKeyVault">Azure Key Vault MSDN forum</a> and try to help every time a question comes up. Answering questions on forums is also a <a href="http://www.rahulpnath.com/blog/staying-in-the-learning-loop/">good way to learn</a>, find interesting problems and <a href="http://www.rahulpnath.com/blog/stars-do-count/">at times rewarding</a>.</p>

<h3>What didn&rsquo;t go well</h3>

<ul>
<li><p><strong>FSharp</strong>: Learning FSharp is something that I really want to, but it&rsquo;s not been happening that well. I am on and off with this and it keeps getting sidelined.</p></li>
<li><p><strong>Reading</strong>: Compared to <a href="https://www.goodreads.com/user_challenges/3539650">2015</a> my reading has been a lot down in <a href="https://www.goodreads.com/user_challenges/5380726">2016</a>. Though I have been listening to a lot more podcasts, I think I have to get back on with reading in the coming year.</p></li>
<li><p><strong>Travel &amp; Photography</strong>: There&rsquo;s not been much travel except for the long vacation back home and a few local places in Sydney. Though I have been clicking along I was lazy to process them. There are still lying on my camera waiting to be processed.</p></li>
<li><p><strong>Exercise</strong>: Getting enough exercise is something that I have really lacked last year and I think I have also put up some weight because of it. Except for the walk up and down from home to station for the office commute, there&rsquo;s not been much of my body moving.</p></li>
</ul>


<h3>Goals for 2017</h3>

<blockquote><p><em>In preparing for battle I have always found that plans are useless, but planning is indispensable.</em></p>

<p>― Dwight D. Eisenhower</p></blockquote>

<ul>
<li><strong>Blogging</strong>: Stick to at least four posts per month. Try to see if I can get up to 6-8. I will have to improve the time that I take to write a post for this. Handling images for the blog needs to be automated as I spent some time converting and optimizing them.</li>
<li><strong>Videos</strong>: Create a schedule for publishing videos and improve the quality and delivery of the videos.</li>
<li><strong>Reading</strong>: Set up a reading plan and read at least 21 books (1 more than what I did in 2015).</li>
<li><strong>FSharp</strong>: Learn, Contribute and Blog</li>
<li><strong>Travel &amp; Photography</strong>: One trip at least once in 3 months and post photos</li>
<li><strong>Exercise</strong>: Run/Bike at least once a week.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make Your Code Contracts Stronger]]></title>
    <link href="http://rahulpnath.com/blog/stronger-code-contracts/"/>
    <updated>2016-12-12T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/stronger-code-contracts</id>
    <content type="html"><![CDATA[<p>How often have you gone into a class to see the implementation when consuming the class or an interface? I do this almost every other day and it&rsquo;s mostly to check how the code handles boundary conditions. What does it do when there is no value to return, does it need all parameters etc. Reading code is hard and time-consuming, even if it&rsquo;s a code that you yourself have written a few minutes back. Imagine every developer having to go into the implementation detail anytime they consume a class?    Bertrand Meyer in connection with his design of the Eiffel programming language coined the term <a href="https://en.wikipedia.org/wiki/Design_by_contract">Design By Contract</a>, an approach for designing software. The central idea of Design By Contract is to improve the contracts shared between different components in the code base. In this post, we will see how we can improve our C# code and avoid unnecessary guard statements across out code base.</p>

<p><a href="http://nebula.wsimg.com/6e7b8057c7f32b90d4f144424c8a7ae1?AccessKeyId=00F174C5B1CCF865161D&disposition=0&alloworigin=1">
<img style="box-shadow:none;" class="center" alt="Stronger Code Contracts" src="http://rahulpnath.com/images/strong_code_contracts.jpg"/>
</a></p>

<h3>Leaky Abstraction</h3>

<p>These days in programming we tend to abstract a lot more than what we really need. <a href="http://www.rahulpnath.com/blog/category/dependency-injection/">Dependency Injection</a> and use of IOC containers have started forcing ourselves to think that everything needs to be an interface. But essentially this is not the case. But the bigger problem lies not in the abstraction, but on depending on the implementation details after abstracting. A <a href="https://en.wikipedia.org/wiki/Leaky_abstraction">leaky abstraction</a> is an abstraction that exposes details and limitations of its underlying implementation to its users that should ideally be hidden away.</p>

<blockquote><p><em>Consuming abstractions assuming a certain implementation is bad practice</em></p></blockquote>

<p>Recently I came across the below code during a code review. Even though an empty string was not a valid configuration value that was not being checked here as the repository implementation returns a null when there is no entry.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">string</span> <span class="n">config</span> <span class="p">=</span> <span class="n">repository</span><span class="p">.</span><span class="n">GetConfig</span><span class="p">();</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="n">config</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a common practice and I have myself fallen for this a lot of times. The fact that the repository returns only a null value is an abstraction detail and is not clear from the contract that it exposes. Anyone could change the repository to start returning an empty string. This will then start failing this code. When taken in isolation the code that uses &lsquo;config&rsquo; must check for null and empty to avoid invalid values. The abstraction contracts (function signatures) must convey whether it always returns a value, whether it can be empty or null. This helps remove unnecessary guarding code or makes guarding mandatory across the code base and also indicates a clear intent.</p>

<p>The <a href="https://en.wikipedia.org/wiki/Robustness_principle">Robustness Principle</a> is a general design guideline for software</p>

<blockquote><p><em>Be conservative in what you do, be liberal in what you accept from others (often reworded as &ldquo;Be conservative in what you send, be liberal in what you accept&rdquo;).</em></p></blockquote>

<p>Applying this principle in this context, we must be conservative in what we return from our function (be it a class or interface) contract. The contract should be as explicit as possible to indicate the nature of values that it returns.</p>

<h3>Stronger Return Types</h3>

<p>A repository returning a string is a weak contract, as it does not clearly express the nature of value it returns. It can return either of these three values - null, an empty string or a valid configuration string. In our application, assuming that null and empty string are invalid we should be having a single representation for this state in the application. C# by its very design encourages us to use this pattern as it embraces the concept of null&rsquo;s - <a href="https://www.linkedin.com/pulse/20141126171912-7082046-tony-hoare-invention-of-the-null-reference-a-billion-dollar-mistake">the billion dollar mistake</a>. But this does not mean we are restricted by it. We can bring in concepts from other languages to help us solve this problem. In F# for example, the Option type represents presence or absence of a value. This is similar to the <a href="https://msdn.microsoft.com/en-us/library/1t3y8s4s.aspx">Nullable type in C#</a>, but not just restricted to value types. <a href="http://fsharpforfunandprofit.com/posts/the-option-type/">Option type</a> is defined as union type with two cases : Some and None. Whenever consuming an option type the compiler forces us to handle both the cases</p>

<blockquote><p><em>In pure F#, <a href="https://fsharpforfunandprofit.com/posts/correctness-exhaustive-pattern-matching/">nulls cannot exist accidentally</a>. A string or object must always be assigned to something at creation, and is immutable thereafter</em></p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">let</span> <span class="nv">config</span> <span class="o">=</span> <span class="n">getConfig</span>
</span><span class='line'><span class="k">match</span> <span class="n">config</span> <span class="k">with</span>
</span><span class='line'><span class="o">|</span> <span class="n">None</span> <span class="o">-&gt;</span> <span class="n">printfn</span> <span class="s">&quot;Invalid config&quot;</span>
</span><span class='line'><span class="o">|</span> <span class="n">Some</span> <span class="n">c</span> <span class="o">-&gt;</span> <span class="n">printgn</span> <span class="s">&quot;Valid config&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Though C# does not have anything out of the box to define optional values, we can define one of our own. The <a href="https://github.com/ploeh/Booking/blob/master/BookingDomainModel/Maybe.cs">Maybe</a> class is one such implementation of an optional concept. The name is influenced by the option type in Haskell, <a href="https://wiki.haskell.org/Maybe">Maybe</a>. There are also other implementations of Maybe but the concept remains the same - we can represent an optional type in C#.  The code contracts are stronger using Maybe as a return type. If a function always returns a value, say a string, the function contract should remain as a string. If a function cannot return a value always and can return null/empty (assuming that these are invalid values) then it returns a <em>Maybe<string></em>. This makes it clearer for consuming code on whether they should check for null/empty values.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">config</span> <span class="p">=</span> <span class="n">repository</span><span class="p">.</span><span class="n">GetConfig</span><span class="p">();</span>
</span><span class='line'><span class="n">config</span><span class="p">.</span><span class="n">Do</span><span class="p">(</span><span class="k">value</span> <span class="p">=&gt;</span> <span class="n">LoadFromFile</span><span class="p">(</span><span class="k">value</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can write different extension methods on the Maybe class, depending on how you want to process the value. In the above example, I have a Do extension method that calls on to a function with the configuration value if any exists. By explicitly stating that a value may or may not be present we have more clarity in code. No longer do we need any unnecessary null checks in the case where a value is always present. This is best achieved when agreed upon as a convention by the development team and enforced through tooling (like code analysis).</p>

<h3>Value Objects</h3>

<p>One of the root problem for having a lot of null/empty checks scattered across the code is <a href="http://blog.ploeh.dk/2015/01/19/from-primitive-obsession-to-domain-modelling/">Primitive Obsession</a>. Just because you can represent a value as a string, it doesn&rsquo;t mean that you always should. Enforcing structural restrictions imposed by the business is best done by encapsulating these constraints within a class, also known as a <a href="http://www.rahulpnath.com/blog/thinking-beyond-primitive-values-value-objects/">Value Object</a>. This leads to classes for representing various non-nullable values for e.g. Name, configuration, Age etc. You can use this in conjunction with <a href="https://en.wikipedia.org/wiki/Null_Object_pattern">Null Object</a> pattern if required. A value object is a class whose equality is based on the value that it holds. So two class instances with same values will be treated equally. In F# you get this by default but in C# you need to override Equals and GetHashCode functions to enforce this equality.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Configuration</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="kt">string</span> <span class="n">configuration</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">Configuration</span><span class="p">(</span><span class="kt">string</span> <span class="n">configuration</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">configuration</span><span class="p">))</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="n">nameof</span><span class="p">(</span><span class="n">configuration</span><span class="p">),</span> <span class="s">&quot;Configuration value cannot be null&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">configuration</span> <span class="p">=</span> <span class="n">configuration</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// override Equals and GetHashCode</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Modeling concepts in the domain as classes helps you to contain the domain/business constraints in a single place. This prevents the need to have null checks elsewhere in the code. Value objects being immutable helps enforce class invariants.</p>

<p>The above two methods help create a stronger contract in code. As with any conventions, this is useful only when followed by the whole team. Conventions are best followed if enforced through tooling. You can create custom code analysis rules to enforce return type to be of type if any method is returning null. Even if you are introducing this into a large existing code base you can do this incrementally, by starting to enforce them on commits (if you are using git) like when <a href="http://www.rahulpnath.com/blog/introducing-code-formatting-into-a-large-codebase/">introducing styling into an existing project</a>. What other contracts do you find helpful to make the code more expressive?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solve the Business Problem, Don't Mimic The Process]]></title>
    <link href="http://rahulpnath.com/blog/solve-the-business-problem-dont-mimic-the-process/"/>
    <updated>2016-12-06T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/solve-the-business-problem-dont-mimic-the-process</id>
    <content type="html"><![CDATA[<p><a href="http://www.dhc-gmbh.com/en/kompetenzen/business-process-management/"><img class="center" alt="Business" src="http://rahulpnath.com/images/business_problem_automation.jpg"/></a></p>

<p>While working with clients I often get into conversations with the domain experts and people involved directly with the business. The discussions usually happen around what the process they are currently doing and how to automate those. Knowing the business process is helpful but getting influenced by that to design the solution is often not effective. Recently our team was in a conversation with a domain expert for a new feature request.</p>

<div class="alert alert-warning">
The series of events mentioned below were modified to fit into the conversational style used in the post.
</div>


<blockquote><p><em><strong>Domain Expert</strong> We need to charge customers a processing fee if they pay using an electronic payment method. Depending on the type of card (mastercard, visa etc) the processing charge percentage differs. The processing fees are always charged in the subsequent billing period after their current payment. For e.g. if a customer pays 1000$ for the month of November, then his December bill will have 2% card processing charge in the December invoice</em></p>

<p><em><strong>Team</strong> That sounds easy, think we have enough details to get started on this. Thank you.</em></p>

<p><em><strong>Domain Expert</strong> Perfect. Ahhh&hellip; Before you go, I think this can be a <a href="http://hangfire.io/">hangfire job</a> that runs on 29 every month, a few days before the billing date, 3rd, and generate these charges for the client. This is what we do manually at present. (And walks off)</em></p>

<p><em><strong>Team</strong> Discussing amongst themselves the team agreed that creating a recurring job is the way to go. Based on the assumption that this job will be run only once a month, the job was to read all the invoices from 29th of the previous month till 28th of the current month and charge the clients. The meeting was dismissed and off went everyone busy to get the new feature out</em></p></blockquote>

<h3>Business has Exceptions</h3>

<p>Problems started coming up the immediate month of feature deployment. Below is the sequence of events that happened.</p>

<ul>
<li><strong>29th</strong> : Nice work, team! The processing charges have been applied as expected.</li>
<li><strong>30th</strong> : Some of the invoices have wrong data. We have deleted them. Can you run the job?</li>
<li><strong>2nd</strong> : A few of our clients (as usual) paid late and we need to charge their processing fees. Can you run the job?</li>
<li><strong>15th</strong> : One of our clients is ending tomorrow, so we need to send them an invoice and it should include the processing fees for their last payment. Can you run the job?</li>
</ul>


<p>But wait! We had decided that we will run this job only once a month and that is the only time we need to process the charges. We cannot run that job over and over again.</p>

<blockquote><p><em>What I’ve noticed over the years is that our users find very creative ways to achieve their business objectives despite the limitations of the system that they’re working with. We developers ultimately see these as requirements, but they are better interpreted as <strong>workarounds</strong>.</em></p>

<p><strong><em>- <a href="http://udidahan.com/2013/04/28/queries-patterns-and-search-food-for-thought/">Udi Dahan</a></em></strong></p></blockquote>

<p>The business was right when it said that <em>&lsquo;This is what we do manually at present.</em> What they did not say though is that there were always exceptions. And in these cases, they did the same process, but just for those exceptions. Business process mostly will be around the majority of the cases and the exceptions always get handled ad-hoc. So for the business it&rsquo;s always that which takes a good part of their time that matters more.</p>

<h3>Finding the Way Out</h3>

<p>The problem, in this case, was that the team modeled the solution exactly as the business did manually. Think kind of a solution is most likely to fail in case of exceptions. The human brain can easily deal with these exceptions. But for a program to solve it that way it needs to be told so, which implies that there need to be alternate flow paths defined. So with the improved understanding of these exception cases, the team does another analysis through the problem. After some discussion the team re-defines their original problem statement - *We need to be able to run the job any number of times and it should have the same effect.</p>

<blockquote><p><em>A payment should get </em>one and only one<em> processing charge associated, no matter however times it is seen by the job.</em></p></blockquote>

<p>With the new implementation, we decided to maintain a list of payments (a strong identifier that does not change) we have seen and processed. So every time a payment is seen, it is matched to see if it is already processed. If a charge is not already applied, a charge is applied and added to the list of processed payments. This ensures that they can run the job anytime. The team added in capability to specify the time range to look for invoices. By default, this ranged from 29th - 28th. The team also added in a way to void out payment charges applied, so that whenever the invoices changed then can just clear that off and re-run the job. These changes gave the flexibility to meet the businesses exception cases.</p>

<h3>Idempotent</h3>

<blockquote><p><em>The term <a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/IdempotentReceiver.html">idempotent</a> is used in mathematics to describe a function that produces the same result if it is applied to itself, i.e. f(x) = f(f(x)). In Messaging this concept translates into a message that has the same effect whether it is received once or multiple times. This means that a message can safely be re-sent without causing any problems even if the receiver receives duplicates of the same message.</em></p></blockquote>

<p>Being idempotent is what we missed with the first implementation. There was an assumed &lsquo;idempotency&rsquo; that the job will be run only once a month. But this constraint is not something that the code had control of and something it could enforce. The job was also not idempotent at the granular level that it was affecting - payments. Asserting idempotency at the batch level fails when we want to re-run batches (when exceptions like the wrong invoice happens). Idempotency should be enforced at the unit level of change, which is what maintaining a list of processed payments helps with. Any payment that is not processed before will get processed now when the job is run. We can also ensure that the payment will only be processed at most once.</p>

<p>This is just an example where we fail to see beyond the business problem and also see the computing problems accompanying it. Not always will it be easy and fast to rewrite the code. Even if we fail to see these problems the business will eventually make us to. But it is when we can see the computing problems that accompanies a business problem that we start becoming better developers. Applying basic computing principles, probing the domain expert during discussions, sitting with domain experts while they work etc. are all good ways to start seeing the untold business processes. Hope this helps the next time you are into a meeting with domain expert or solving a business problem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expiry Notification for Azure Key Vault Keys and Secrets]]></title>
    <link href="http://rahulpnath.com/blog/expiry-notification-for-azure-key-vault-keys-and-secrets/"/>
    <updated>2016-12-01T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/expiry-notification-for-azure-key-vault-keys-and-secrets</id>
    <content type="html"><![CDATA[<p>I came across this <a href="https://social.msdn.microsoft.com/Forums/azure/en-US/90d4b814-f025-42a0-acac-b8c8bf9d8cf8/alert-or-event-on-secret-expiry?forum=AzureKeyVault">question</a> in Azure Key Vault forums looking for options to get notified when Key or Secrets in vault nears expiry. It&rsquo;s useful to know when Object&rsquo;s (Keys/Secrets) near expiry, to take necessary action. I decided to explore on my proposed solution of having a scheduled custom PowerShell script to notify when a key is about to expire. In this post, we will see how to get all objects nearing expiry and scheduling this using Azure Runbook to run daily.</p>

<h3>Getting Expiring Objects</h3>

<p>Both Keys and Secrets can be set with an Expiry date. The expiry date can be set when creating the Object or can be set on an existing Object. This can be set from the UI or using PowerShell scripts (setting the <a href="https://msdn.microsoft.com/en-us/library/dn868045.aspx">-Expires attribute</a>).</p>

<p><img class="center" alt="Azure Key Vault - Set Key Expiry" src="http://rahulpnath.com/images/vaultexpiry_key.png"/></p>

<p>Key Vault (at the time of writing) throws an <a href="https://social.msdn.microsoft.com/Forums/azure/en-US/c0d8953a-c117-4ca4-ad3d-e5d2b1868f9e/get-operation-not-permitted-for-some-of-the-secret-in-my-vault?forum=AzureKeyVault">exception</a> when an expired key is accessed over the API. Also, it does not provide any notification whenever a key/secret is about to expire. The last thing you want is your application go down because of an expired object in the vault. With the Get and List access on the vault, we can retrieve all the keys and secrets in the vault and loop through the elements to see objects that are nearing expiry.</p>

<p>The PowerShell script takes the Vault Name, number of days before with alert should be raised and flags to indicate whether all versions of keys/secrets should be checked for expiry. The full script is available <a href="https://github.com/rahulpnath/Blog/blob/master/KeyVaultExpiryAlerter/Expiry%20Alert.ps1">here</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$VaultName</span> <span class="p">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="nv">$IncludeAllKeyVersions</span> <span class="p">=</span> <span class="nv">$true</span>
</span><span class='line'><span class="nv">$IncludeAllSecretVersions</span> <span class="p">=</span> <span class="nv">$true</span>
</span><span class='line'><span class="nv">$AlertBeforeDays</span> <span class="p">=</span> <span class="n">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>All keys and secrets are converted into a common object model, which contains just the Identifier, Name, Version and the Expiry Date if it has one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="k">Function</span> <span class="nb">New-KeyVaultObject</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">param</span>
</span><span class='line'>    <span class="p">(</span>
</span><span class='line'>        <span class="no">[string]</span><span class="nv">$Id</span><span class="p">,</span>
</span><span class='line'>        <span class="no">[string]</span><span class="nv">$Name</span><span class="p">,</span>
</span><span class='line'>        <span class="no">[string]</span><span class="nv">$Version</span><span class="p">,</span>
</span><span class='line'>        <span class="no">[System.Nullable[DateTime]]</span><span class="nv">$Expires</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$server</span> <span class="p">=</span> <span class="nb">New-Object</span> <span class="n">-TypeName</span> <span class="n">PSObject</span>
</span><span class='line'>    <span class="nv">$server</span> <span class="p">|</span> <span class="nb">Add-Member</span> <span class="n">-MemberType</span> <span class="n">NoteProperty</span> <span class="n">-Name</span> <span class="n">Id</span> <span class="n">-Value</span> <span class="nv">$Id</span>
</span><span class='line'>    <span class="nv">$server</span> <span class="p">|</span> <span class="nb">Add-Member</span> <span class="n">-MemberType</span> <span class="n">NoteProperty</span> <span class="n">-Name</span> <span class="n">Name</span> <span class="n">-Value</span> <span class="nv">$Name</span>
</span><span class='line'>    <span class="nv">$server</span> <span class="p">|</span> <span class="nb">Add-Member</span> <span class="n">-MemberType</span> <span class="n">NoteProperty</span> <span class="n">-Name</span> <span class="n">Version</span> <span class="n">-Value</span> <span class="nv">$Version</span>
</span><span class='line'>    <span class="nv">$server</span> <span class="p">|</span> <span class="nb">Add-Member</span> <span class="n">-MemberType</span> <span class="n">NoteProperty</span> <span class="n">-Name</span> <span class="n">Expires</span> <span class="n">-Value</span> <span class="nv">$Expires</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$server</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Depending on the flag set for retrieving all key/secret version, it fetches objects from the vault and returns in the common object model above.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="k">function</span> <span class="nb">Get-AzureKeyVaultObjectKeys</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">param</span>
</span><span class='line'>  <span class="p">(</span>
</span><span class='line'>   <span class="no">[string]</span><span class="nv">$VaultName</span><span class="p">,</span>
</span><span class='line'>   <span class="no">[bool]</span><span class="nv">$IncludeAllVersions</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$vaultObjects</span> <span class="p">=</span> <span class="no">[System.Collections.ArrayList]</span><span class="p">@()</span>
</span><span class='line'>  <span class="nv">$allKeys</span> <span class="p">=</span> <span class="nb">Get-AzureKeyVaultKey</span> <span class="n">-VaultName</span> <span class="nv">$VaultName</span>
</span><span class='line'>  <span class="k">foreach</span> <span class="p">(</span><span class="nv">$key</span> <span class="k">in</span> <span class="nv">$allKeys</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$IncludeAllVersions</span><span class="p">){</span>
</span><span class='line'>     <span class="nv">$allSecretVersion</span> <span class="p">=</span> <span class="nb">Get-AzureKeyVaultKey</span> <span class="n">-VaultName</span> <span class="nv">$VaultName</span> <span class="n">-IncludeVersions</span> <span class="n">-Name</span> <span class="nv">$key</span><span class="p">.</span><span class="n">Name</span>
</span><span class='line'>     <span class="k">foreach</span><span class="p">(</span><span class="nv">$key</span> <span class="k">in</span> <span class="nv">$allSecretVersion</span><span class="p">){</span>
</span><span class='line'>         <span class="nv">$vaultObject</span> <span class="p">=</span> <span class="nb">New-KeyVaultObject</span> <span class="n">-Id</span> <span class="nv">$key</span><span class="p">.</span><span class="n">Id</span> <span class="n">-Name</span> <span class="nv">$key</span><span class="p">.</span><span class="n">Name</span> <span class="n">-Version</span> <span class="nv">$key</span><span class="p">.</span><span class="n">Version</span> <span class="n">-Expires</span> <span class="nv">$key</span><span class="p">.</span><span class="n">Expires</span>
</span><span class='line'>         <span class="nv">$vaultObjects</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="nv">$vaultObject</span><span class="p">)</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$vaultObject</span> <span class="p">=</span> <span class="nb">New-KeyVaultObject</span> <span class="n">-Id</span> <span class="nv">$key</span><span class="p">.</span><span class="n">Id</span> <span class="n">-Name</span> <span class="nv">$key</span><span class="p">.</span><span class="n">Name</span> <span class="n">-Version</span> <span class="nv">$key</span><span class="p">.</span><span class="n">Version</span> <span class="n">-Expires</span> <span class="nv">$key</span><span class="p">.</span><span class="n">Expires</span>
</span><span class='line'>      <span class="nv">$vaultObjects</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="nv">$vaultObject</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$vaultObjects</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">function</span> <span class="nb">Get-AzureKeyVaultObjectSecrets</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">param</span>
</span><span class='line'>  <span class="p">(</span>
</span><span class='line'>   <span class="no">[string]</span><span class="nv">$VaultName</span><span class="p">,</span>
</span><span class='line'>   <span class="no">[bool]</span><span class="nv">$IncludeAllVersions</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$vaultObjects</span> <span class="p">=</span> <span class="no">[System.Collections.ArrayList]</span><span class="p">@()</span>
</span><span class='line'>  <span class="nv">$allSecrets</span> <span class="p">=</span> <span class="nb">Get-AzureKeyVaultSecret</span> <span class="n">-VaultName</span> <span class="nv">$VaultName</span>
</span><span class='line'>  <span class="k">foreach</span> <span class="p">(</span><span class="nv">$secret</span> <span class="k">in</span> <span class="nv">$allSecrets</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nv">$IncludeAllVersions</span><span class="p">){</span>
</span><span class='line'>     <span class="nv">$allSecretVersion</span> <span class="p">=</span> <span class="nb">Get-AzureKeyVaultSecret</span> <span class="n">-VaultName</span> <span class="nv">$VaultName</span> <span class="n">-IncludeVersions</span> <span class="n">-Name</span> <span class="nv">$secret</span><span class="p">.</span><span class="n">Name</span>
</span><span class='line'>     <span class="k">foreach</span><span class="p">(</span><span class="nv">$secret</span> <span class="k">in</span> <span class="nv">$allSecretVersion</span><span class="p">){</span>
</span><span class='line'>         <span class="nv">$vaultObject</span> <span class="p">=</span> <span class="nb">New-KeyVaultObject</span> <span class="n">-Id</span> <span class="nv">$secret</span><span class="p">.</span><span class="n">Id</span> <span class="n">-Name</span> <span class="nv">$secret</span><span class="p">.</span><span class="n">Name</span> <span class="n">-Version</span> <span class="nv">$secret</span><span class="p">.</span><span class="n">Version</span> <span class="n">-Expires</span> <span class="nv">$secret</span><span class="p">.</span><span class="n">Expires</span>
</span><span class='line'>         <span class="nv">$vaultObjects</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="nv">$vaultObject</span><span class="p">)</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$vaultObject</span> <span class="p">=</span> <span class="nb">New-KeyVaultObject</span> <span class="n">-Id</span> <span class="nv">$secret</span><span class="p">.</span><span class="n">Id</span> <span class="n">-Name</span> <span class="nv">$secret</span><span class="p">.</span><span class="n">Name</span> <span class="n">-Version</span> <span class="nv">$secret</span><span class="p">.</span><span class="n">Version</span> <span class="n">-Expires</span> <span class="nv">$secret</span><span class="p">.</span><span class="n">Expires</span>
</span><span class='line'>      <span class="nv">$vaultObjects</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="nv">$vaultObject</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$vaultObjects</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have all the keys and secrets we want to check for expiry all we need to know is if there are any keys that are expiring in the upcoming days.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$allKeyVaultObjects</span> <span class="p">=</span> <span class="no">[System.Collections.ArrayList]</span><span class="p">@()</span>
</span><span class='line'><span class="nv">$allKeyVaultObjects</span><span class="p">.</span><span class="n">AddRange</span><span class="p">((</span><span class="nb">Get-AzureKeyVaultObjectKeys</span> <span class="n">-VaultName</span> <span class="nv">$VaultName</span> <span class="n">-IncludeAllVersions</span> <span class="nv">$IncludeAllKeyVersions</span><span class="p">))</span>
</span><span class='line'><span class="nv">$allKeyVaultObjects</span><span class="p">.</span><span class="n">AddRange</span><span class="p">((</span><span class="nb">Get-AzureKeyVaultObjectSecrets</span> <span class="n">-VaultName</span> <span class="nv">$VaultName</span> <span class="n">-IncludeAllVersions</span> <span class="nv">$IncludeAllSecretVersions</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Get expired Objects</span>
</span><span class='line'><span class="nv">$today</span> <span class="p">=</span> <span class="p">(</span><span class="nb">Get-Date</span><span class="p">).</span><span class="n">Date</span>
</span><span class='line'><span class="nv">$expiredKeyVaultObjects</span> <span class="p">=</span> <span class="no">[System.Collections.ArrayList]</span><span class="p">@()</span>
</span><span class='line'><span class="k">foreach</span><span class="p">(</span><span class="nv">$vaultObject</span> <span class="k">in</span> <span class="nv">$allKeyVaultObjects</span><span class="p">){</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="nv">$vaultObject</span><span class="p">.</span><span class="n">Expires</span> <span class="o">-and</span> <span class="nv">$vaultObject</span><span class="p">.</span><span class="n">Expires</span><span class="p">.</span><span class="n">AddDays</span><span class="p">(-</span><span class="nv">$AlertBeforeDays</span><span class="p">).</span><span class="n">Date</span> <span class="o">-lt</span> <span class="nv">$today</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c"># add to expiry list</span>
</span><span class='line'>  <span class="nv">$expiredKeyVaultObjects</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="nv">$vaultObject</span><span class="p">)</span> <span class="p">|</span> <span class="nb">Out-Null</span>
</span><span class='line'>  <span class="nb">Write-Output</span> <span class="s2">&quot;Expiring&quot;</span> <span class="nv">$vaultObject</span><span class="p">.</span><span class="n">Id</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Pass to Alerter $expiredKeyVaultObjects</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Scheduling Expiry Notification using Azure Runbook</h3>

<p>You can either run this manually every time you want to get a list of objects that are expired or nearing expiry. Alternatively, you can set up a scheduled task to run the script at a set frequency. Since you are already on Azure, you can try <a href="https://azure.microsoft.com/en-us/services/automation/">Azure Automation</a> and schedule the task for you. A Runbook in Azure Automation account can be granted access to the key vault. The Automation account should have &lsquo;Run as account&rsquo; setup and the service principal created for it can be used to assign Access Policies to access the vault. Check out the <a href="http://rahulpnath.com/blog/accessing-azure-key-vault-from-azure-runbook">Accessing Azure Key Vault From Azure Runbook</a> post for a step by step instruction on how to setup runbook to access key vault. You can then <a href="https://azure.microsoft.com/en-us/documentation/articles/automation-scheduling-a-runbook/">schedule the runbook</a> to execute at fixed time intervals. Feel free to modify the script to send email notifications or push notification or any other that matches your need.</p>

<p>Generally, it is a good practice to rotate your keys and secrets once in a while. Use the expiry attribute to set the expiry and force yourself to keep your sensitive configurations fresh. It&rsquo;s likely that such a notification feature will be built into the key vault. But till then Hope this helps to keep track of keys or secrets that are nearing expiry within the vault and take the necessary action to renew them. The full script is available <a href="https://github.com/rahulpnath/Blog/blob/master/KeyVaultExpiryAlerter/Expiry%20Alert.ps1">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accessing Azure Key Vault From Azure Runbook]]></title>
    <link href="http://rahulpnath.com/blog/accessing-azure-key-vault-from-azure-runbook/"/>
    <updated>2016-11-21T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/accessing-azure-key-vault-from-azure-runbook</id>
    <content type="html"><![CDATA[<p>Azure Automation is a new service in Azure that allows you to automate your Azure management tasks and to orchestrate actions across external systems from right within Azure. If you are new to Azure Automation, get started <a href="https://azure.microsoft.com/en-us/blog/azure-automation-runbook-management/">here</a>. Runbooks live within the Azure Automation account and can execute PowerShell scripts. In this post, I will walk you through on how to use Key Vault from an Azure Automation Runbook.</p>

<p>To create a Runbook go to &lsquo;Add a Runbook&rsquo; under  Automation Account, Runbooks as shown in the image below. Once created you can author your PowerShell script there.</p>

<p><img class="center" alt="Azure Automation Create a Runbook" src="http://rahulpnath.com/images/runbook_create.png"/></p>

<p>In this example I will get all the Keys from an existing key vault, using the <a href="https://msdn.microsoft.com/en-us/library/dn868053.aspx">Get-AzureKeyVaultKey</a> cmdlet. This returns all the key for the given key vault.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nb">Get-AzureKeyVaultKey</span> <span class="n">-VaultName</span> <span class="n">YoutubeVault</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we are to run this script now, it will fail for many reasons - we do not have the key vault cmdlets imported in the runbook nor have we given access to the automation account to access the keys in the vault. Running it gives me the below error.</p>

<p><span style='color:red'><em>Get-AzureKeyVaultKey : The term &lsquo;Get-AzureKeyVaultKey&rsquo; is not recognized as the name of a cmdlet, function script, file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again </em></span>.</p>

<p>Under &lsquo;Assets&rsquo; from the Azure Automation account Resources section select &lsquo;Modules&rsquo; (as shown in the image below) to add in Modules to the runbook. To execute key vault cmdlets in the runbook, we need to add <em>AzureRM.profile</em> and AzureRM.key vault. Search for this under &lsquo;Browse Gallery&rsquo; and import.</p>

<p><img class="center" alt="Azure Runbook Add KeyVault Module" src="http://rahulpnath.com/images/runbook_add_Module.png"/></p>

<p>To give Runbook access to the keys in the vault, it needs to be specified in the Access Policies of the key vault. The &lsquo;Run As Accounts&rsquo; feature will create a new service principal user in Azure Active Directory and assign the Contributor role to this user at the subscription. The &lsquo;Application ID&rsquo; from creating the run as account is used to assign Access Policies for the key vault. In this example, I give the &lsquo;list&rsquo; and &lsquo;get&rsquo; PermissionToKeys.</p>

<p><img class="center" alt="Azure Automation Runbook, set run as account" src="http://rahulpnath.com/images/runbook_run_as_accounts.png"/></p>

<p>You can use the <a href="https://azure.microsoft.com/en-us/documentation/articles/automation-sec-configure-azure-runas-account/#sample-code-to-authenticate-with-resource-manager-resources">sample code below</a>, taken from the AzureAutomationTutorialScript example runbook, to authenticate using the Run As account to manage Resource Manager resources with your runbooks. The <em>AzureRunAsConnection</em> is a connection asset automatically created when we created &lsquo;run as accounts&rsquo; above. This can be found under Assets -> Connections. After the authentication code, I run the same code above to get all the keys from the vault.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$connectionName</span> <span class="p">=</span> <span class="s2">&quot;AzureRunAsConnection&quot;</span>
</span><span class='line'><span class="k">try</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c"># Get the connection &quot;AzureRunAsConnection &quot;</span>
</span><span class='line'>    <span class="nv">$servicePrincipalConnection</span><span class="p">=</span><span class="nb">Get-AutomationConnection</span> <span class="n">-Name</span> <span class="nv">$connectionName</span>
</span><span class='line'>
</span><span class='line'>    <span class="s2">&quot;Logging in to Azure...&quot;</span>
</span><span class='line'>    <span class="nb">Add-AzureRmAccount</span> <span class="p">`</span>
</span><span class='line'>        <span class="n">-ServicePrincipal</span> <span class="p">`</span>
</span><span class='line'>        <span class="n">-TenantId</span> <span class="nv">$servicePrincipalConnection</span><span class="p">.</span><span class="n">TenantId</span> <span class="p">`</span>
</span><span class='line'>        <span class="n">-ApplicationId</span> <span class="nv">$servicePrincipalConnection</span><span class="p">.</span><span class="n">ApplicationId</span> <span class="p">`</span>
</span><span class='line'>        <span class="n">-CertificateThumbprint</span> <span class="nv">$servicePrincipalConnection</span><span class="p">.</span><span class="n">CertificateThumbprint</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">catch</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(!</span><span class="nv">$servicePrincipalConnection</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$ErrorMessage</span> <span class="p">=</span> <span class="s2">&quot;Connection $connectionName not found.&quot;</span>
</span><span class='line'>        <span class="k">throw</span> <span class="nv">$ErrorMessage</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="nb">Write-Error</span> <span class="n">-Message</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Exception</span>
</span><span class='line'>        <span class="k">throw</span> <span class="nv">$_</span><span class="p">.</span><span class="n">Exception</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Get-AzureKeyVaultKey</span> <span class="n">-VaultName</span> <span class="n">YoutubeVault</span>
</span></code></pre></td></tr></table></div></figure>


<p>On execution, the Runbook can connect to the key vault and retrieve all the keys. Based on the permissions set on the vault you can perform different actions on the key vault. This helps in automating a lot of tasks that otherwise needs to be done manually. Hope this helps you connect Runbooks with Key Vault.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Key Vault: Digital Signatures and Offline Verification]]></title>
    <link href="http://rahulpnath.com/blog/azure-key-vault-digital-signatures-and-offline-verification/"/>
    <updated>2016-11-15T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/azure-key-vault-digital-signatures-and-offline-verification</id>
    <content type="html"><![CDATA[<p>Digital Signature is a mechanism to ensure the validity of a digital document or message. Digital signatures use <a href="http://www.rahulpnath.com/blog/getting-started-with-azure-key-vault/">asymmetric cryptography</a> - uses a public and private key pair.</p>

<blockquote><p><em>A valid <a href="https://en.wikipedia.org/wiki/Digital_signature">digital signature</a> gives a recipient reason to believe that the message was created by a known sender (authentication), that the sender cannot deny having sent the message (non-repudiation), and that the message was not altered in transit (integrity)</em></p></blockquote>

<p>The below diagram shows the overview of the different steps involved in the Digital Signature process. We generate a hash of the data that we need to protect and encrypt the hash value using a private key pair. This signed hash is sent along with the original data. The receiver generates a hash of the data received and also decrypts the attached signature using the public key. If both the hashes are same, the signature is valid, and the document has not been tampered with.</p>

<p><a href="https://commons.wikimedia.org/wiki/File:Digital_Signature_diagram.svg"><img class="center" alt="Azure Key Vault - Verify Signature Offline" src="http://rahulpnath.com/images/signing_verification.png"/></a></p>

<p>Azure Key Vault supports sign and verify operations and can be used to implement Digital Signatures. In this post, we will explore how to sign and verify a message using Key Vault. Verifying the hash locally is the recommended approach as per the <a href="https://msdn.microsoft.com/en-us/library/azure/dn903623.aspx#BKMK_KeyOperations">documentation</a> and we will explore how this can be achieved.</p>

<blockquote><p><em>Verification of signed hashes is supported as a convenience operation for applications that may not have access to [public] key material; it is recommended that, for best application performance, verify operations are performed locally.</em></p></blockquote>

<h3>Signing Data</h3>

<p>Sign and Verify operations on Key Vault are allowed only on hashed data. So the application calling these API methods should locally hash the data before invoking the method. The algorithm property value passed to the Key Vault Client API depends on the hashing algorithm used to hash the data. Below are the <a href="https://msdn.microsoft.com/library/en-us/Mt149357.aspx">supported algorithms</a>.</p>

<ul>
<li><em>RS256: RSASSA-PKCS-v1_5 using SHA-256. The application supplied digest value must be computed using SHA-256 and must be 32 bytes in length.</em></li>
<li><em>RS384: RSASSA-PKCS-v1_5 using SHA-384. The application supplied digest value must be computed using SHA-384 and must be 48 bytes in length.</em></li>
<li><em>RS512: RSASSA-PKCS-v1_5 using SHA-512. The application supplied digest value must be computed using SHA-512 and must be 64 bytes in length.</em></li>
<li><em>RSNULL: See [RFC2437], a specialized use-case to enable certain TLS scenarios.</em></li>
</ul>


<p>The below code sample uses SHA-256 hashing algorithm to hash and sign the data.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">textToEncrypt</span> <span class="p">=</span> <span class="s">&quot;This is a test message&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kt">var</span> <span class="n">byteData</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">Unicode</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="n">textToEncrypt</span><span class="p">);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">hasher</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SHA256CryptoServiceProvider</span><span class="p">();</span>
</span><span class='line'><span class="kt">var</span> <span class="n">digest</span> <span class="p">=</span> <span class="n">hasher</span><span class="p">.</span><span class="n">ComputeHash</span><span class="p">(</span><span class="n">byteData</span><span class="p">);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">signedResult</span> <span class="p">=</span> <span class="k">await</span> <span class="n">keyVaultClient</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SignAsync</span><span class="p">(</span><span class="n">keyIdentifier</span><span class="p">,</span> <span class="n">JsonWebKeySignatureAlgorithm</span><span class="p">.</span><span class="n">RS256</span><span class="p">,</span> <span class="n">digest</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Verify Online</h3>

<p>To verify a signature online, the keyVaultClient supports a <a href="https://msdn.microsoft.com/en-us/library/microsoft.azure.keyvault.keyvaultclient.verifyasync.aspx">Verify method</a>. It takes the key identifier, algorithm, digest and signature to verify if the signature is valid for the given digest.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">isVerified</span> <span class="p">=</span> <span class="k">await</span> <span class="n">keyVaultClient</span>
</span><span class='line'>    <span class="p">.</span><span class="n">VerifyAsync</span><span class="p">(</span><span class="n">keyIdentifier</span><span class="p">,</span> <span class="n">JsonWebKeySignatureAlgorithm</span><span class="p">.</span><span class="n">RS256</span><span class="p">,</span> <span class="n">digest</span><span class="p">,</span> <span class="n">signedResult</span><span class="p">.</span><span class="n">Result</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Verify Offline</h3>

<p>To Verify offline, we need access to the public portion of the key used to sign the data. The client application that needs to verify signatures can connect to the vault and get the key details or use a public key shared out of band. The <a href="http://www.rahulpnath.com/blog/authenticating-a-client-application-with-azure-key-vault/">AD application used to authenticate</a> with the key vault should have Get access for retrieving the public key from the vault. Get access can be set using the PermissionToKeys switch when registering the AD application with the key vault. Assuming we have access to the public key as a JSON string, we can use the <a href="https://msdn.microsoft.com/en-us/library/system.security.cryptography.rsacryptoserviceprovider(v=vs.110).aspx">RSACryptoServiceProvider</a> to verify the signature offline.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">key</span> <span class="p">=</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="n">DeserializeObject</span><span class="p">&lt;</span><span class="n">JsonWebKey</span><span class="p">&gt;(</span><span class="n">jsonWebKey</span><span class="p">);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">rsa</span> <span class="p">=</span> <span class="k">new</span> <span class="n">RSACryptoServiceProvider</span><span class="p">();</span>
</span><span class='line'><span class="kt">var</span> <span class="n">p</span> <span class="p">=</span> <span class="k">new</span> <span class="n">RSAParameters</span><span class="p">()</span> <span class="p">{</span> <span class="n">Modulus</span> <span class="p">=</span> <span class="n">key</span><span class="p">.</span><span class="n">N</span><span class="p">,</span> <span class="n">Exponent</span> <span class="p">=</span> <span class="n">key</span><span class="p">.</span><span class="n">E</span> <span class="p">};</span>
</span><span class='line'><span class="n">rsa</span><span class="p">.</span><span class="n">ImportParameters</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'><span class="n">isVerified</span> <span class="p">=</span> <span class="n">rsa</span><span class="p">.</span><span class="n">VerifyHash</span><span class="p">(</span><span class="n">digest</span><span class="p">,</span> <span class="s">&quot;Sha256&quot;</span><span class="p">,</span> <span class="n">signedResult</span><span class="p">.</span><span class="n">Result</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The signature verification succeeds if the message and the signature were not tampered. If either of message or signature were  modified then the signature validation fails.</p>

<p>You can get the sample code <a href="https://github.com/rahulpnath/Blog/tree/master/VerifySignatureOffline">here</a>. Hope this helps you to implement Digital Signatures using Key Vault.</p>
]]></content>
  </entry>
  
</feed>
