<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rahul Nath]]></title>
  <link href="http://rahulpnath.com/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2016-10-04T03:50:34+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introducing Code Formatting into a Large Code Base]]></title>
    <link href="http://rahulpnath.com/blog/introducing-code-formatting-into-a-large-codebase/"/>
    <updated>2016-10-03T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/introducing-code-formatting-into-a-large-codebase</id>
    <content type="html"><![CDATA[<p>Code Formatting is an important aspect of writing code. If followed well it helps keep the code more readable and easy to work with. Here are some of the different aspects of formatting code and my personal preferences. I then explore options to enforce code formatting and ways to introduce it into an existing code base.</p>

<p>Below are some of the popular formatting rules and those that have a high value when enforced in a project.</p>

<h4><strong>Tabs vs Spaces</strong></h4>

<p>One of the most debated topic in code formatting is whether to use tabs or spaces to intend code. I never knew such a debate existed until my most recent project. It had developers from different parts of the world and with different preferences. I came across the below excerpt from Jeff Atwood, to which I completely agree.</p>

<blockquote><p><em>Choose tabs, choose spaces, choose whatever layout conventions make sense to you and your team. It doesn&rsquo;t actually matter which coding styles you pick. What does matter is that you, and everyone else on your team, <strong>sticks with those conventions and uses them consistently.</strong></em></p>

<p><em>That said, only a moron would use tabs to format their code.</em></p>

<p><em>- <a href="https://blog.codinghorror.com/death-to-the-space-infidels/">Jeff Atwood</a></em></p></blockquote>

<p>Settings for these are often available at the IDE level. In Visual Studio this is available under <a href="https://msdn.microsoft.com/en-us/library/7sffa753.aspx">Options, Text Editor, All Languages, Tabs</a>. Be aware of what you choose and make sure you have the same settings across your team members.</p>

<h4><strong>Horizontal Alignment</strong></h4>

<p>Avoid aligning by common separators (=;,) when they occur in adjacent lines. This kind of alignment falls out of order when we rename variables or properties. It happens when you chaange property names.</p>

<figure class='code'><figcaption><span>Not Refactoring friendly and needs extra effort to keep it formatted</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">person</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Person</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">FirstName</span> <span class="p">=</span> <span class="s">&quot;Rahul&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">LastName</span>  <span class="p">=</span> <span class="s">&quot;Nath&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Site</span>      <span class="p">=</span> <span class="s">&quot;www.rahulpnath.com&quot;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Refactoring friendly</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">person</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Person</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">FirstName</span> <span class="p">=</span> <span class="s">&quot;Rahul&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">LastName</span> <span class="p">=</span> <span class="s">&quot;Nath&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Site</span> <span class="p">=</span> <span class="s">&quot;www.rahulpnath.com&quot;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4><strong>Horizontal Formatting</strong></h4>

<p><em>You should never have to scroll to the right</em> - I caught on with this recommendation from the book Clean Code (<a href="http://www.rahulpnath.com/blog/language-agnostic-books-for-every-developer-2/">a recommended read</a>). It is also recommended that a function should fit on the screen, without needing to scroll up or down. This encourages to keep functions short and specific.</p>

<blockquote><p><em>We should strive to keep our lines short. The old Hollerith limit of 80 is a bit arbitrary, and I’m not opposed to lines edging out to 100 or even 120. But beyond that is probably just careless</em></p>

<p><em>- Uncle Bob</em></p></blockquote>

<p>The <a href="https://visualstudiogallery.msdn.microsoft.com/d0d33361-18e2-46c0-8ff2-4adea1e34fef">Productivity Power Tools</a> extension for Visual Studio allows adding a Column Guide. A Column Guide reminds developers their full line of code or comments may not fit on a single screen.</p>

<p><img class="center" alt="Code Formatting Maximum Width Column Guide in Visual Studio using Power Tools"
src="http://rahulpnath.com/images/codeformatting_column_guide.png" /></p>

<h4><strong>Aligning Function Parameters</strong></h4>

<p>Always try to keep the number of parameters as less as possible. In cases where there are more parameters or longer function names, the team must choose a style. There are different styling formats followed when splitting parameters to a new line.</p>

<p>Allowing parameters to take the <strong><em>natural flow of IDE</em></strong> (Visual Studio) is the simplest approach. This often leads to poor readability and code cluttering.</p>

<p><img class="center" alt="Function Parameters taking natural flow of IDE"
src="http://rahulpnath.com/images/codeformatting_functionparameters_naturalflowide.png" /></p>

<p>Breaking parameters into separate lines is important for readability. Use the Column guide to decide when to break function parameters into different lines. There are different approaches followed when splitting parameters into new lines. Keeping the first parameter on the same line as the function and then having all other <strong><em>parameters on new line aligned with the first parameter</em></strong> is another approach. This works well when viewed in the same font and resolution used when writing. When you change font or resolution this kind of formatting falls out of place.</p>

<p><img class="center" alt="Function Parameters on new line aligned with first parameter"
src="http://rahulpnath.com/images/codeformatting_functionparameters_alignzoom.png" /></p>

<p>A better variant of the above style is to have the parameters in the new line aligned to the left. This ensures parameters stay in the same place when changing font or resolutions. The one that I prefer is to have all parameters in a new line. This formatting works well with different font sizes and resolutions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">int</span> <span class="nf">ThisIsALongFunctionNameWithLotsOfParameters</span><span class="p">(</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">parameter1</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">parameter2</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">parameter3</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">optionalParameter</span> <span class="p">=</span> <span class="s">&quot;Test&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><strong>Visibility Based Ordering</strong></h4>

<p>It is a good practice to maintain a specific order of items within a class. Have all properties declared first, then constructors, public methods, protected methods, private methods etc. This is up to the team to  determine the order, but sticking on to it makes the code more readable.</p>

<h3>Code Analysis Tools</h3>

<p>Checking for styling and formatting issues in a code review requests is a boring task. It’s best to automate style checks at build time (local and server builds). Making build throw errors for styling issues forces developers to fix them. Once developers get used to the rules, writing code without any formatting issues becomes second nature.  <a href="https://stylecop.codeplex.com">StyleCop</a> is an open source static code analysis tool from Microsoft that checks C# code for conformance to StyleCop&rsquo;s recommended coding styles and a subset of Microsoft&rsquo;s .NET Framework Design Guidelines. It has a Visual Studio plugin and also integrates well with <a href="https://stylecop.codeplex.com/wikipage?title=Setting%20Up%20StyleCop%20MSBuild%20Integration">MsBuild</a>.</p>

<h4><strong>Cleaning up a Large Code Base</strong></h4>

<p>Introducing StyleCop (or any code format enforcement) into a large pre-existing code base is challenging. Turning the tool on would immediately throw hundreds and thousands of errors. Trying to fix them in a stretch might impact the ongoing development process. This often causes us to delay the introduction of such enforcement&rsquo;s into the project and it continues to be a technical debt.</p>

<p>Taking an incremental approach, fixing one by one as and when a file is changed seems a good idea. Teams can come with the <a href="http://programmer.97things.oreilly.com/wiki/index.php/The_Boy_Scout_Rule">Boy Scout Rule</a> - &lsquo;<em>Leave the file cleaner than you find</em>&rsquo;. Every time a file is touched for a fix, run StyleCop analysis and fix the errors. Over a period of time, this will make the project clean. The only problem with this approach is developers often tend to ignore/forget running the analysis and fix them.</p>

<blockquote><p><em>Trivial things like code formatting is hard to mandate within a team unless it is enforced through tooling</em></p></blockquote>

<h3>Source Control Hooks</h3>

<p>We can plug into various hooks that source controls give to enforce code formatting on developer machines. In git, you can add a <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">custom pre-commit hook</a> to run the StyleCop analysis on all the staged files. <a href="https://github.com/bbadjari/stylecopcli">StyleCopcli</a> is an open source application that wraps over the StyleCop DLLs and allows running the analysis from the command line. So in the hook, I use this CLI to run StyleCop analysis on all the staged files.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bat'><span class='line'>#!<span class="n">/bin/sh</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;Running Code Analysis&quot;</span>
</span><span class='line'>.<span class="n">/stylecopcli/StyleCopCLI.exe</span> -cs $(git diff --cached --name-only)
</span><span class='line'><span class="k">if</span> [ $? <span class="o">=</span> <span class="m">2</span> ]
</span><span class='line'>    then
</span><span class='line'>        <span class="k">echo</span> Commit Failed! Fix StyleCop Errors
</span><span class='line'>        exit <span class="m">1</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>        <span class="k">echo</span> No SyleCop Errors!
</span><span class='line'>        exit <span class="m">0</span>
</span><span class='line'>fi
</span></code></pre></td></tr></table></div></figure>


<p>If there are any StyleCop validation errors the commit is aborted, forcing the developer to fix it. The git hooks work fine when committing from a command line or UI tools like Source Tree. However, Visual Studio git plugin does not run the git hooks and fails to do the check.</p>

<p><img class="center" alt="StyleCop git hook failing commit in console" src="http://rahulpnath.com/images/code_formatting_git_hook_console.png" /></p>

<p><img class="center" alt="StyleCop git hook failing commit in Source Tree" src="http://rahulpnath.com/images/code_formatting_git_hook_sourcetree.png" /></p>

<p>Over a period of time, most of the files will get cleaned and remaining can be done all at once with less effort. Once the entire code base passes all StyleCop rules, this can be enforced in the build server. This ensures that no more bad formatted code gets checked into the source control.</p>

<p>Code is read more than written. So it is important to keep it readable and well-formatted. It also makes navigating code bases easier and faster. These are minor things that are often <a href="https://vimeo.com/97329157">overlooked by developers</a>, but have a high impact on productivity when followed. Do you enforce code formatting rules in your current project? What are the rules that you find important. Sound off in the comments below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduce Tests when Fixing Bugs]]></title>
    <link href="http://rahulpnath.com/blog/introduce-tests-when-fixing-bugs/"/>
    <updated>2016-09-26T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/introduce-tests-when-fixing-bugs</id>
    <content type="html"><![CDATA[<p><em>When creating a subscription for a client, the calculated number of months was off by one at times</em> - This was a bug reported from production application that I was currently working on. Though, not a blocker, it was creating enough issues for the end users that it required a hotfix. One of my friends picked this issue up and started working on it. A while later, while I was checking the status of that bug I noticed him playing around with  <a href="https://www.linqpad.net/">Linqpad</a>. He was testing a method to calculate the number of months between two dates with different values.</p>

<p><a href="https://www.flickr.com/photos/toomore/23066277453" class="center" title="Image By Toomore Chiang, from https://www.flickr.com/photos/toomore/23066277453"><img src="http://rahulpnath.com/images\testing.jpg" class="center" alt="Testing"></a></p>

<p>We often test our code elsewhere because it&rsquo;s coupled with other code making it difficult to test at the source itself. The fact that we need to test an isolated part of a larger piece of code is a &lsquo;<a href="https://en.wikipedia.org/wiki/Code_smell">Code smell</a>&rsquo;. There possibly is a class or method that can be extracted and unit tested separately.</p>

<blockquote><p><em>Having to test code elsewhere other than the source is a Smell. Look for a method or class waiting to be extracted</em></p></blockquote>

<p>In this specific case, below is how the code that calculates month difference between two dates looked like. As you can see below, the code is coupled with the newAccount, which in turn is coupled with a few other entities that I have omitted. Added to this, this method existed in an MVC controller, which had other dependencies.</p>

<figure class='code'><figcaption><span>Existing Code</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">...</span>
</span><span class='line'><span class="kt">var</span> <span class="n">date1</span> <span class="p">=</span> <span class="n">newAccount</span><span class="p">.</span><span class="n">StartDate</span><span class="p">;</span>
</span><span class='line'><span class="kt">var</span> <span class="n">date2</span> <span class="p">=</span> <span class="n">newAccount</span><span class="p">.</span><span class="n">EndDate</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="n">monthsApart</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="n">Abs</span><span class="p">(</span><span class="m">12</span> <span class="p">*</span> <span class="p">(</span><span class="n">date1</span><span class="p">.</span><span class="n">Year</span> <span class="p">-</span> <span class="n">date2</span><span class="p">.</span><span class="n">Year</span><span class="p">)</span> <span class="p">+</span> <span class="n">date1</span><span class="p">.</span><span class="n">Month</span> <span class="p">-</span> <span class="n">date2</span><span class="p">.</span><span class="n">Month</span><span class="p">)</span> <span class="p">-</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'><span class="kt">decimal</span> <span class="n">daysInMonth1</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">DaysInMonth</span><span class="p">(</span><span class="n">date1</span><span class="p">.</span><span class="n">Year</span><span class="p">,</span> <span class="n">date1</span><span class="p">.</span><span class="n">Month</span><span class="p">);</span>
</span><span class='line'><span class="kt">decimal</span> <span class="n">daysInMonth2</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">DaysInMonth</span><span class="p">(</span><span class="n">date2</span><span class="p">.</span><span class="n">Year</span><span class="p">,</span> <span class="n">date2</span><span class="p">.</span><span class="n">Month</span><span class="p">);</span>
</span><span class='line'><span class="kt">decimal</span> <span class="n">dayPercentage</span> <span class="p">=</span> <span class="p">((</span><span class="n">daysInMonth1</span> <span class="p">-</span> <span class="n">date1</span><span class="p">.</span><span class="n">Day</span><span class="p">)</span> <span class="p">/</span> <span class="n">daysInMonth1</span><span class="p">)</span>
</span><span class='line'>                      <span class="p">+</span> <span class="p">(</span><span class="n">date2</span><span class="p">.</span><span class="n">Day</span> <span class="p">/</span> <span class="n">daysInMonth2</span><span class="p">);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">months</span> <span class="p">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">Math</span><span class="p">.</span><span class="n">Ceiling</span><span class="p">(</span><span class="n">monthsApart</span> <span class="p">+</span> <span class="n">dayPercentage</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>This explains why it was easier to copy this code across and test it in Linqpad. It was difficult to construct the whole hierarchy of objects and to test this. So the easiest thing to fix the bug in is to test elsewhere and fit back in its original place.</p>

<h3>Extract Method Refactoring</h3>

<p>This is one of the scenario where <a href="http://refactoring.com/catalog/extractMethod.html">Extract Method</a> Refactoring fits in best. According to the definition</p>

<blockquote><p><em>You have a code fragment that can be grouped together. <strong>Turn the fragment into a method whose name explains the purpose of the method.</strong></em></p></blockquote>

<p>Extract Method Refactoring is also referred in <a href="http://www.amazon.com/gp/product/0131177052/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0131177052&amp;linkCode=as2&amp;tag=rahulpnath-20&amp;linkId=TTKEEYQLEMTOXPPQ">Working Effectively With Legacy Code</a> and <a href="http://www.amazon.com/gp/product/0131495054/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0131495054&amp;linkCode=as2&amp;tag=rahulpnath-20&amp;linkId=XR55UAOEPPMVMFK3">xUnit Test Patterns</a> (to refactor test code).  It helps separate logic from rest of the object hierarchy and test individually. In this scenario, we can extract the logic to calculate the number of months between two dates into a separate method.</p>

<p>For <a href="http://butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd">Test driving</a> the extracted method, all I do initially is to extract the method. As the method purely depends on its passed in parameters and not on any instance variables, I mark it as a static method. This removes the dependency from the MVC controller class parameters and the need to construct them in the tests . The test cases includes the failed &lsquo;off by one&rsquo; case (<em>(&ldquo;25-Aug-2017&rdquo;, &ldquo;25-Feb-2018&rdquo;, 6)</em>). With tests that pass and fail it&rsquo;s now safe to make changes to the extracted method to fix the failing cases.</p>

<figure class='code'><figcaption><span>Tests</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Theory]</span>
</span><span class='line'><span class="na">[InlineData(&quot;10-Feb-2016&quot;, &quot;10-Mar-2016&quot;, 1)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;10-Feb-2016&quot;, &quot;11-Mar-2016&quot;, 2)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;10-Feb-2015&quot;, &quot;11-Mar-2016&quot;, 14)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;01-Feb-2015&quot;, &quot;01-Mar-2015&quot;, 1)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;21-Sep-2016&quot;, &quot;22-Sep-2016&quot;, 1)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;25-Aug-2017&quot;, &quot;25-Feb-2018&quot;, 6)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;12-Aug-2016&quot;, &quot;15-Mar-2019&quot;, 32)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">MonthsToReturnsExpectedMonths</span><span class="p">(</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">date1</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">date2</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">expected</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">actual</span> <span class="p">=</span> <span class="n">SubscriptionController</span><span class="p">.</span><span class="n">MonthsTo</span><span class="p">(</span><span class="n">DateTime</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">date1</span><span class="p">),</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">date2</span><span class="p">));</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">actual</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>More than the algorithm used to solve the original issue what is more important is in identifying such scenarios and extracting them as a method. Make the least possible change to make it testable and fix step by step.</p>

<blockquote><p><em>Whenever there are code fragments that depend only on a subset of properties of your class or function inputs, it could be extracted into a separate method.</em></p></blockquote>

<figure class='code'><figcaption><span>Extracted method after Refactoring.</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="nf">MonthsTo</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">date1</span><span class="p">,</span> <span class="n">DateTime</span> <span class="n">date2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">months</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="n">Abs</span><span class="p">(</span><span class="m">12</span><span class="p">*(</span><span class="n">date1</span><span class="p">.</span><span class="n">Year</span> <span class="p">-</span> <span class="n">date2</span><span class="p">.</span><span class="n">Year</span><span class="p">)</span> <span class="p">+</span> <span class="n">date1</span><span class="p">.</span><span class="n">Month</span> <span class="p">-</span> <span class="n">date2</span><span class="p">.</span><span class="n">Month</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">date2</span><span class="p">.</span><span class="n">Date</span><span class="p">.</span><span class="n">Day</span> <span class="p">&gt;</span> <span class="n">date1</span><span class="p">.</span><span class="n">Date</span><span class="p">.</span><span class="n">Day</span><span class="p">)</span>
</span><span class='line'>        <span class="n">months</span> <span class="p">=</span> <span class="n">months</span> <span class="p">+</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">months</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Introduce Value Object</h3>

<p>Now that we have fixed the bug and have tests covering the different combinations, let&rsquo;s see if this method can live elsewhere and make it reusable. The start date and end date on account always go together and is a domain concept that can be extracted out as an &lsquo;Account Term Range&rsquo;. It can be represented as a DateRange <a href="http://www.rahulpnath.com/blog/thinking-beyond-primitive-values-value-objects/">Value Object</a>. We can then introduce a method in the DateRange Value Object to return the number of months in the range. This makes the function reusable and also <a href="http://www.rahulpnath.com/blog/refactoring-to-improve-readability-separating-business-language-and-programming-language-semantics/">code more readable</a>. I made the original refactored method as an extension method on DateTime and used it from DateRange Value Object.</p>

<figure class='code'><figcaption><span>Encapsulate into Value Object</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">DateTimeExtensions</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="nf">MonthsTo</span><span class="p">(</span><span class="k">this</span> <span class="n">DateTime</span> <span class="n">date1</span><span class="p">,</span> <span class="n">DateTime</span> <span class="n">date2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">months</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="n">Abs</span><span class="p">(</span><span class="m">12</span><span class="p">*(</span><span class="n">date1</span><span class="p">.</span><span class="n">Year</span> <span class="p">-</span> <span class="n">date2</span><span class="p">.</span><span class="n">Year</span><span class="p">)</span> <span class="p">+</span> <span class="n">date1</span><span class="p">.</span><span class="n">Month</span> <span class="p">-</span> <span class="n">date2</span><span class="p">.</span><span class="n">Month</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">date2</span><span class="p">.</span><span class="n">Date</span><span class="p">.</span><span class="n">Day</span> <span class="p">&gt;</span> <span class="n">date1</span><span class="p">.</span><span class="n">Date</span><span class="p">.</span><span class="n">Day</span><span class="p">)</span>
</span><span class='line'>            <span class="n">months</span> <span class="p">=</span> <span class="n">months</span> <span class="p">+</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">months</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">DateRange</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">StartDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">EndDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">DateRange</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">startDate</span><span class="p">,</span> <span class="n">DateTime</span> <span class="n">endDate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Ignoring null checks</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">endDate</span> <span class="p">&lt;</span> <span class="n">startDate</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="s">&quot;End Date cannot be less than Start Date&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">StartDate</span> <span class="p">=</span> <span class="n">startDate</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="n">EndDate</span> <span class="p">=</span> <span class="n">endDate</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="nf">GetMonths</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">StartDate</span><span class="p">.</span><span class="n">MonthsTo</span><span class="p">(</span><span class="n">EndDate</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">...</span> <span class="c1">// Rest of Value Object Code to override Equals and GetHashCode</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you are new to TDD or just getting started with tests, introducing tests while fixing bugs is a good place to start. This might also help make code decoupled and readable. Try <a href="http://www.rahulpnath.com/blog/is-code-coverage-a-lie/">covering a fix with tests</a> the next time you fix a bug!</p>

<h4><strong>References</strong></h4>

<div>
    <div class="row">
        <div class="col-sm-6 col-md-3">
            <div class="thumbnail">
                <a href="http://www.amazon.com/gp/product/0131495054/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0131495054&linkCode=as2&tag=rahulpnath-20&linkId=XR55UAOEPPMVMFK3">
                    <img src="http://rahulpnath.com/images/books_xunit.jpg" data-holder-rendered="true" style="display: block;">
                </a>
            </div>
        </div>
        <div class="col-sm-6 col-md-3">
            <div class="thumbnail">
                <a href="http://www.amazon.com/gp/product/0321503627/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321503627&linkCode=as2&tag=rahulpnath-20&linkId=TR6UCCVP6CMGBBZQ">
                    <img src="http://rahulpnath.com/images/books_goos.jpeg" data-holder-rendered="true" style="display: block;">
                </a>
            </div>
        </div>
        <div class="col-sm-6 col-md-3">
            <div class="thumbnail">
                <a href="http://www.amazon.com/gp/product/0131177052/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0131177052&linkCode=as2&tag=rahulpnath-20&linkId=TTKEEYQLEMTOXPPQ">
                    <img src="http://rahulpnath.com/images/books_welc.jpg" data-holder-rendered="true" style="display: block;">
                </a>
            </div>
        </div>
    </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keeping Sensitive Configuration Data Out of Source Control]]></title>
    <link href="http://rahulpnath.com/blog/keeping-sensitive-configuration-data-out-of-source-control/"/>
    <updated>2016-09-19T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/keeping-sensitive-configuration-data-out-of-source-control</id>
    <content type="html"><![CDATA[<p>Most applications today deals with some form of sensitive information. The most commonly seen are database connection strings, API keys, token etc. The web.config seems the best place to have these values, but it definitely is not. In most cases it gets pushed into the source control systems as well. If it is a private repository then you at least have one level of security on top of it. It still exposes sensitive information to anyone who has access to the repository. It’s worse when the <a href="http://www.internetnews.com/blog/skerner/github-search-exposes-passwords.html">repository is public</a>.</p>

<p><img alt="Keep sensitive data out of source control" src="http://rahulpnath.com/images/sensitivedata_source_control.png" /></p>

<p>There are different ways you can  avoid pushing sensitive data into source control. In this post, I will explore options that I am familiar with.</p>

<blockquote><p><em>Use configuration files as template definitions for the configuration data your application requires. Have the actual values stored elsewhere</em></p></blockquote>

<h3>Azure App Settings</h3>

<p>If you are deploying your application as a Web App on Azure, you can store <a href="https://azure.microsoft.com/en-us/blog/windows-azure-web-sites-how-application-strings-and-connection-strings-work/">application settings and connection strings in Azure</a>. At runtime, Windows Azure Web Sites automatically retrieves these values for you and makes them available to code running in your website. This removes the need for having sensitive data in the configuration file.</p>

<p><img alt="Azure App Settings and Connection Strings" src="http://rahulpnath.com/images/sensitiveData_azure_app_settings.png" /></p>

<h3>Release Management Tools</h3>

<p>Release management tools like Octopus Deploy, Microsoft Release Management, that performs configuration transformation. It supports creating different environments (development, production) and corresponding configurations. On creating a package for an environment, it applies the corresponding environment configurations</p>

<p><img alt="Release Management Tools - Octopus Deploy" src="http://rahulpnath.com/images/sensitiveData_releaseManagement_tool_octopus.png" /></p>

<p>Packaging embeds the configuration value into the configuration file. This makes it available to anyone who has access to the host systems.</p>

<h3>Azure Key Vault</h3>

<p>Azure Key Vault acts as a centralized repository for all sensitive information. Key vault stores cryptographic keys and Secrets and makes them available over a HTTP Api. The objects (keys and secrets) in key vault has unique identifier to retrieve them. Check <a href="http://www.rahulpnath.com/blog/azure-key-vault-in-a-real-world-application/">Azure Key Vault in real world application</a> for more details on how to achieve this. A client application can <a href="http://www.rahulpnath.com/blog/authenticating-a-client-application-with-azure-key-vault/">authenticate with Azure Key Vault using a ClientID/secret or ClientID/certificate</a>. Using certificate to authenticate is the preferred approach. To get Keys/Secret from key vault all you need is the AD Application Id, the client secret or certificate identifier and the key/secret names. The certificate itself can be deployed separately into the application host.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='XML'><span class='line'><span class="nt">&lt;appSettings&gt;</span>
</span><span class='line'>  <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;KeyVaultUrl&quot;</span> <span class="na">value=</span><span class="s">&quot;https://testvaultrahul.vault.azure.net&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;ADApplicationId&quot;</span> <span class="na">value=</span><span class="s">&quot;&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;ADCertificateThumbprint&quot;</span> <span class="na">value=</span><span class="s">&quot;&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;add</span> <span class="na">key=</span><span class="s">&quot;DbConnectionString&quot;</span> <span class="na">value=</span><span class="s">&quot;SqlConnectionString&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;add</span> <span class="na">key =</span><span class="s">&quot;ApiToken&quot;</span> <span class="na">value=</span><span class="s">&quot;ApiToken/cfedea84815e4ca8bc19cf8eb943ee13&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/appSettings&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you are using the &lsquo;client secret&rsquo; to authenticate then the configuration file will have the Secret. In either cases, you should follow either of the previous approaches to keep the Application Id and authentication information out of configuration. The advantage of using <a href="http://www.rahulpnath.com/blog/category/azure-key-vault/">Key Vault</a> is that it is a centralized  repository for all your sensitive data, across different applications. You can also restrict access permissions per application.</p>

<p>These are some approaches to keep sensitive information out of source control. What approach do you use? Irrespective of the approach you use, make sure that you don’t check them in!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic Deployment of Future Posts With Octopress]]></title>
    <link href="http://rahulpnath.com/blog/automatic_deployment_of_future_posts_with_octopress/"/>
    <updated>2016-09-12T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/automatic_deployment_of_future_posts_with_octopress</id>
    <content type="html"><![CDATA[<p>Since the start of this year, I have been trying to blog to a schedule and publish posts more often. The goal that I have set myself with is to post four posts a month, preferably one each week. I have been sticking to it till now, and I hope it continues. Initially, I did not have this upper limit on the number of posts in a month. In the month of March 2016, I went a bit aggressive and published nine articles. It made me think more about setting an upper limit on the number of posts so that I don&rsquo;t end up having higher expectations out of myself.</p>

<h3>Staying Ahead</h3>

<p>Having published nine posts, also made me realize that I could write faster if required and have posts ready for future. It will help me to stay ahead of the posting schedule and give me some off-time when I need it. But this also presented me with a new problem on how to manage and schedule posts for the future.</p>

<blockquote><p><em>The more I automate the mundane tasks of blogging, the more I can concentrate on the writing part</em></p></blockquote>

<h3>Jekyll Future flag</h3>

<p><a href="http://octopress.org/docs/">Octopress</a> is over <a href="https://jekyllrb.com/">Jekyll</a> and it provides all the capabilities that Jekyll provides. The <a href="https://jekyllrb.com/docs/configuration/"><em>future</em> flag</a> in Jekyll indicates <strong><em>whether or not to publish posts or collection documents with a future date.</em></strong> With the flag set to false, Jekyll will not generate posts that have a date in the future. It works perfectly for me as all I need to do is to publish posts into the <em>_posts</em> directory once it&rsquo;s ready, with a date in the future. I have a <a href="http://www.rahulpnath.com/blog/optimizing-octopress-workflow-for-new-posts/">draft workflow</a>, which puts posts into a <em>_drafts</em> folder and move them into the <em>_posts</em> folder once ready. I updated the rake script that publishes drafts as posts, to take in a publish date and use that to update the post date.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='Ruby'><span class='line'><span class="n">task</span> <span class="ss">:publish_draft</span> <span class="k">do</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Publish Date?&quot;</span>
</span><span class='line'><span class="n">publishDateString</span> <span class="o">=</span> <span class="no">STDIN</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'><span class="n">publishDate</span> <span class="o">=</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">publishDateString</span><span class="p">)</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">dest</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">source_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">posts_dir</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">publishDate</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Publishing post to: </span><span class="si">#{</span><span class="n">dest</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">source</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">source_file</span><span class="o">|</span>
</span><span class='line'><span class="n">contents</span> <span class="o">=</span> <span class="n">source_file</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'><span class="n">contents</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="sr">/^thisIsStillADraft:$/</span><span class="p">,</span> <span class="s2">&quot;date: </span><span class="si">#{</span><span class="n">publishDate</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d&#39;</span><span class="p">)</span><span class="si">}</span><span class="se">\n</span><span class="s2">completedDate: </span><span class="si">#{</span><span class="no">DateTime</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d %H:%M:%S %z&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The rake script appends the publish date to the post file name and also the yaml date information and moves it from the <em>_drafts</em> to <em>_posts</em> folder. It also adds a completedDate set to the current time with the timezone information, just for reference.</p>

<h3>Integrating with Travis CI</h3>

<p>I have the <a href="http://rahulpnath.com/blog/continuos_delivery_of_octopress_blog_using_travisci_and_docker">deployment of my blog automated via Travis CI</a>, which builds and deploys the site when committing to the <a href="https://github.com/rahulpnath/rahulpnath.com">GitHub repository</a>. For future posts since there might not be a commit on the publish date, I need to trigger the build on those days, to publish the posts scheduled. The <a href="https://azure.microsoft.com/en-us/services/scheduler/">Azure Scheduler</a> enables scheduling requests and also provides out of the box support to invoke web service endpoints over HTTP/HTTPS. <a href="https://docs.travis-ci.com/api">Travis CI exposes an API</a> to interact with the build system and is the same API that the official Web interface uses. The API supports <a href="https://docs.travis-ci.com/user/triggering-builds">triggering builds</a> by making a POST request with an API token and the build details. The API has <a href="https://github.com/travis-ci/travis-ci/issues/5101">an existing bug</a> that requires the slash separating username and repository name in the trigger URL be encoded(%2F). Azure, however, does not like this and treats it as an invalid URL with the bellow error.</p>

<p><img class="center" alt="Azure Scheduler Encoded URL error" src="http://rahulpnath.com/images/blogtrigger_scheduler_url_error.png" /></p>

<p>The only way now is to have to custom write this code and have it scheduled. I chose the one with the least work involved - Azure Automation. <a href="https://azure.microsoft.com/en-us/services/automation/">Azure Automation</a> allows to create Run books and automatically trigger it on a schedule. The Azure Automation has a <a href="https://azure.microsoft.com/en-us/pricing/details/automation/">pricing plan with 500 minutes free</a> Job run time in a month, which meets my requirements. I created a <a href="https://azure.microsoft.com/en-us/documentation/articles/automation-runbook-types/#powershell-runbooks">PowerShell script</a> and added in the token (<em>TravisToken</em>) and the build URL (<em>TravisBuildUrl</em>) as <a href="https://azure.microsoft.com/en-us/documentation/articles/automation-runbook-input-parameters/">parameters to the script</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nv">$travisBlogTriggerApiUrl</span> <span class="p">=</span> <span class="nb">Get-AutomationVariable</span> <span class="n">-Name</span> <span class="s1">&#39;TravisBuildUrl&#39;</span>
</span><span class='line'><span class="nv">$token</span> <span class="p">=</span> <span class="nb">Get-AutomationVariable</span> <span class="n">-Name</span> <span class="s1">&#39;TravisToken&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$body</span> <span class="p">=</span> <span class="s2">&quot;{&quot;&quot;request&quot;&quot;: {&quot;&quot;message&quot;&quot;:&quot;&quot;Scheduled Automated build&quot;&quot;,&quot;&quot;branch&quot;&quot;:&quot;&quot;master&quot;&quot;}}&quot;</span>
</span><span class='line'><span class="nv">$headers</span> <span class="p">=</span> <span class="p">@{</span>
</span><span class='line'>    <span class="s1">&#39;Content-Type&#39;</span> <span class="p">=</span> <span class="s1">&#39;application/json&#39;</span>
</span><span class='line'>    <span class="s1">&#39;Accept&#39;</span> <span class="p">=</span> <span class="s1">&#39;application/json&#39;</span>
</span><span class='line'>    <span class="s1">&#39;Travis-API-Version&#39;</span> <span class="p">=</span> <span class="s1">&#39;3&#39;</span>
</span><span class='line'>    <span class="s1">&#39;Authorization&#39;</span> <span class="p">=</span> <span class="s1">&#39;token &#39;</span> <span class="p">+</span> <span class="nv">$token</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Invoke-WebRequest</span> <span class="n">-Method</span> <span class="n">Post</span> <span class="nv">$travisBlogTriggerApiUrl</span> <span class="n">-Body</span> <span class="nv">$body</span> <span class="n">-Headers</span> <span class="nv">$headers</span> <span class="n">-UseBasicParsing</span>
</span></code></pre></td></tr></table></div></figure>


<p>The script runs on a schedule every day and triggers the Travis CI build. It deploys the latest generated site to Azure WebApp that hosts the site. Any posts scheduled for the current date gets picked up by Jekyll and included in the site generation.</p>

<figure>
    <img alt="Automatic Deployment of Future Posts With Octopress" src="http://rahulpnath.com/images/blog_scheduled.png" />
    <figcaption><em>Scheduler triggers TravisCI build. For details on how TravisCI is set up check <a href="http://rahulpnath.com/blog/continuos-delivery-of-octopress-blog-using-travisci-and-docker/">Continuos Delivery of Octopress Blog Using TravisCI and Docker</a></em></figcaption>
</figure>


<p></p>

<h3>Post to Social Media</h3>

<p>With the posts getting deployed automatically, I want to update all my social networks. I already use <a href="https://buffer.com/">Buffer</a> to post updates to all social networks. Buffer is like &lsquo;<strong><em>Write Once, Post Everywhere</em></strong>&rsquo; kind of service. It clubs all your social media profiles into one place and allows you to post to all of them by just writing it once.</p>

<p><a href="https://ifttt.com/recipes">IFTTT</a>(&lsquo;<em>If This Then That</em>&rsquo;) is a service that helps connect different apps and devices together based on a trigger. As the name says, you can trigger an action based on a trigger. IFTTT has many <a href="https://ifttt.com/channels">Channels</a> that can act as a source of the trigger. In my case, the trigger is a post getting published and I can hook into that event using the <a href="https://ifttt.com/feed">Feed Channel</a>. The feed channel has an option to trigger when a <a href="https://ifttt.com/channels/feed/triggers/5-new-feed-item">new item is available</a> on the feed. I use this to trigger an update to Buffer. <a href="https://ifttt.com/buffer">Buffer</a> is available as a channel on IFTTT but allows only update to one of the connected accounts in Buffer, which requires me to setup a recipe per social media account. I chose to use <a href="https://buffer.com/guides/email">update via email feature</a> in Buffer. It allows me to have just one recipe in IFTTT to update to all of my connected profiles in Buffer.</p>

<p><img class="center" alt="Trigger Buffer Email When New Post is Published" src="http://rahulpnath.com/images/blog_ifttt.png" /></p>

<p>With the Automated publishing of posts and ability to schedule them, I can concentrate more on just the writing part. I no longer have to push out posts manually. I had never thought that I would be scheduling posts in the future. But now that it is happening it&rsquo;s a great feeling when there are posts for a few weeks ahead all ready to go.</p>

<p><em><a href="http://www.rahulpnath.com/blog/morning_routine/">My Morning Routine</a> was the first posts to be deployed using the schedule.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuos Delivery of Octopress Blog Using TravisCI and Docker]]></title>
    <link href="http://rahulpnath.com/blog/continuos-delivery-of-octopress-blog-using-travisci-and-docker/"/>
    <updated>2016-09-01T04:11:12+00:00</updated>
    <id>http://rahulpnath.com/blog/continuos-delivery-of-octopress-blog-using-travisci-and-docker</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since I have wanted to deploy my blog automatically whenever there is a new commit pushed into the associated <a href="https://github.com/rahulpnath/rahulpnath.com">git repository</a>. I use Octopress as my blog engine and have been <a href="http://www.rahulpnath.com/blog/optimizing-octopress-workflow-for-new-posts/">tweaking it to my blogging workflow</a>. Octopress is a static blog generator built over Jekyll. So anytime I make any updates to the blog, I need to build the blog with the accompanying rake tasks and push the generated output (HTML, JavaScript, and CSS) to an Azure Web App that hosts my blog. For this I use the <a href="https://azure.microsoft.com/en-us/documentation/articles/web-sites-deploy/#continuousdeployment">git deployment feature</a> of web apps, so just pushing the built output to a git repo (branch) deploys it to my website. As you see every time, I make a change I have to build the site and push it to the git repository and this can be automated. Since Octopress is in Ruby, I decided to use <a href="https://travis-ci.org/">Travis CI</a> for the build and deploy.</p>

<h3>Local Build Environment with Docker</h3>

<p>I am on an older repository fork of Octopress and have not updated to latest version. So it has hard dependencies with specific versions of gem packages that it needs and also on the Ruby and Jekyll version. So every time I change laptop it&rsquo;s difficult to set up the blog environment. In the past, I manually installed the dependencies whenever I got a new laptop. As changing laptop does not happen frequently, I had been delaying creating any script for this. But now since I had to setup the Travis build environment, I thought of also having a local build environment to test before pushing it up to Travis. Travis provides a Docker image that matches exactly their build environment.</p>

<p>Setting up Docker is just a few steps:</p>

<ol>
<li><a href="https://docs.docker.com/docker-for-windows/">Install</a> the Docker components</li>
<li>Load the <a href="https://quay.io/organization/travisci">Docker image</a></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>docker run -it -p 4000:4000 quay.io/travisci/travis-ruby /bin/bash
</span></code></pre></td></tr></table></div></figure>


<p>Once in the container, you can run the same build scripts that you manually run yo deploy and check. I had a few issues with the gem packages and <a href="https://github.com/rahulpnath/rahulpnath.com/commit/abefbf58e3696384c7931d5a4918239a41700106#diff-8b7db4d5cc4b8f6dc8feb7030baa2478">fixed it by specifying hard package dependency</a>. To launch the site hosted in Docker from host system <a href="https://github.com/wsargent/docker-cheat-sheet#exposing-ports">I expose incoming ports through the host container</a>. Once I have the local server running in the docker container (in port 4000) I can access it via <em>localhost:4000</em> from my host computer.</p>

<h3>Post Dates and TimeZones</h3>

<p>When building from the container, I noticed that the dates of posts were off by 1. For posts that were on month start (like Aug 1), it started coming up in July, on the archive page. After a bit of investigation, I realized that Jekyll parses the date time from the post and converts them into local system time. The container was running in UTC and when generating the site it converted post DateTime to UTC. All the posts that I had written after coming to Sydney had an offset of +1000 (or +1100) and most were published early in the morning. So it converted those posts to the previous date.
Since I am not that worried about the time zone of the post, I decided to remove it. I removed timezone information getting set for new posts in my Rake scripts. For the existing posts, <a href="https://github.com/rahulpnath/rahulpnath.com/commit/1d8902fa69a1aad9ad6615ee3c47e3474b6cd263">I removed all the timezone information from the <em>datetime</em> YAML header in the posts</a>. I set the config.yml to built in UTC irrespective of the system timezone that it is getting build.</p>

<h3>Setting up TravisCI</h3>

<p>Setting up automated build on Travis CI is smooth and easy process TDK. I just added a travis.yml with the &lsquo;<em>rake generate</em>. TDK The post build script does the following</p>

<ul>
<li>Clones the current statically generated code from my <em>blog</em> branch.</li>
<li>Perform a rake deploy that updates the cloned code above with the latest site.I updated the existing rake deploy to use GitHub token in push URL. As I did not want the token to be logged on to the Travis console I redirect the output using <em><a href="http://askubuntu.com/questions/12098/what-does-outputting-to-dev-null-accomplish-in-bash-scripts">&amp;> /dev/null</a></em>.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">language</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">ruby</span>
</span><span class='line'><span class="l-Scalar-Plain">rvm</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">1.9.3</span>
</span><span class='line'><span class="l-Scalar-Plain">branches</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">only</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">master</span>
</span><span class='line'><span class="l-Scalar-Plain">script</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">bundle exec rake generate;</span>
</span><span class='line'><span class="l-Scalar-Plain">after_success</span><span class="p-Indicator">:</span> <span class="p-Indicator">|</span>
</span><span class='line'>  <span class="no">if [ -n &quot;$GITHUB_PUSH_URL&quot; ]; then</span>
</span><span class='line'>    <span class="no">cd &quot;$TRAVIS_BUILD_DIR&quot;</span>
</span><span class='line'>    <span class="no">git clone -b blog --single-branch https://github.com/rahulpnath/rahulpnath.com.git _azure &amp;&gt; /dev/null</span>
</span><span class='line'>    <span class="no">bundle exec rake gitdeploy[&quot;$GITHUB_PUSH_URL&quot;] &amp;&gt; /dev/null</span>
</span><span class='line'>    <span class="no">echo &quot;Deployed!&quot;</span>
</span><span class='line'>  <span class="no">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Every time I make a commit to the GitHub master branch, the automated build triggers and deploys the latest generated site.</p>

<h3>Current Blogging Workflow <a href="https://travis-ci.org/rahulpnath/rahulpnath.com"><img src="https://travis-ci.org/rahulpnath/rahulpnath.com.svg?branch=master" alt="Build Status" /></a></h3>

<p><img class="center" alt="Continuos Delivery of Octopress Blog" src="http://rahulpnath.com/images/blog_ci.PNG" /></p>

<ul>
<li>Write posts on my phone or laptop. (<a href="http://www.rahulpnath.com/blog/optimizing-octopress-workflow-for-new-posts/">Using Dropbox to sync posts across devices</a>)</li>
<li>Publish and Push to Github from laptop</li>
<li>Travis builds triggered by Github webhook</li>
<li>Travis pushes back generated site into Github (<em><a href="https://github.com/rahulpnath/rahulpnath.com/tree/blog">blog branch</a></em>).</li>
<li>Azure Web App triggers automated deployment from Github.</li>
</ul>


<p>With the automated deployment, I have one less thing to take care of when writing posts. The whole process might feel a bit complicated, but it is not. It is just that I have been tweaking few things to ease blogging. And since I am a programmer, I like hacking things. If you are new to blogging you do not need them and don&rsquo;t get overwhelmed (if at all you are). All you need to make sure is to <a href="http://www.rahulpnath.com/blog/get-started-with-your-blog/">have a blog</a> and you <a href="http://www.rahulpnath.com/blog/own-your-urls/">own the URL</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Hotfix : Things to Remember]]></title>
    <link href="http://rahulpnath.com/blog/data_hotfix/"/>
    <updated>2016-08-25T04:27:32+00:00</updated>
    <id>http://rahulpnath.com/blog/data_hotfix</id>
    <content type="html"><![CDATA[<p>Yesterday I was late to leave office as I had to data fix some of the systems that we are currently building. We had just migrated few hundred clients onto the new platform. Invoices generated for the clients had wrong invoice amounts due to some mismatching data used when migrating. We had the expected invoice from the old system which made finding the problem easy. We ran a few scripts to correct the data in different systems and fixed the issue.</p>

<p><a href="http://static1.squarespace.com/static/54652521e4b0045935420a6c/t/548dee03e4b0f1b25cb560d5/1418587652009/Data.jpg?format=1500w">
    <img class="center" alt="Data Hotfix" src="http://rahulpnath.com/images/data_hotfix.jpg" />
</a></p>

<div class="alert alert-warning">
<strong>WARNING!</strong> Normally I do not recommend making any changes directly in production server. In this case, there was a business urgency and was forced to do the data fix the same night, for smooth functioning the day after. We still managed to get in some testing in the development environment before running it in production.
</div>


<h3>It All Starts with a Few</h3>

<p>I have seen it repeatedly happen that this kind of data fixes starts with a few in the beginning. Within a short span of time the affected data size grows drastically and manual updates might not be a good solution.</p>

<blockquote><p><em>If you get a second thought of whether to script the fix or not, then you should script it.</em></p></blockquote>

<p> Yesterday it started with data fix for 30 clients and the fix was relatively small. It could either be through UI or API. Fix through the UI took around 45 seconds each, and there were two of us. So it was just a matter of 12-15 minutes to fix it. While fixing, one of us found an extra scenario where the same fix needs to be applied. Re-running the query to find such clients bombarded the number to 379. At this moment, I stood up and said <em>I am going to script this. There is no way  I am doing this manually.</em> Manually fixing this would take five man hours, but will finish in two and half hours, as there were two of us. Even writing the script is going to take around an hour but that&rsquo;s just one man hour.</p>

<blockquote><p><em>There is happiness you get when you script the fix and not manually plow through the UI fixing each of them</em></p></blockquote>

<p>The script was in C#, written as a test case, invoked from a test runner (which I don&rsquo;t feel great about now) updating the systems with the data fix. It did its job and fixed all the cases it was supposed to. But I was not happy with the approach that I had chosen to make the fix. Correcting production data through a unit test script does not sound a robust solution. The reason to choose tests was that the test project had all the code required to access the other systems. It was just about changing the configuration values to point to the production system. It was the shortest path to having at least one client updated and verified.</p>

<p>Having it as a test script restricted me from scaling the update process (though I could have done some fancy things to <a href="https://xunit.github.io/docs/running-tests-in-parallel.html">run tests in parallel</a>). It also forced me to hard-code the input data.Logging was harder  and I used <a href="https://msdn.microsoft.com/en-us/library/system.diagnostics.debug.writeline(v=vs.110).aspx">Debug.WriteLine</a> to the VS output window. All those were the aftermath of choosing the wrong execution method - running it as a test script!</p>

<p>In retrospective, here are a few things that I should have done different and should be doing if ever I am in a similar situation again.</p>

<h4><strong>Create Stand-alone Executable</strong></h4>

<p>Having a stand-alone executable running the script provides the capability to scale the number of processes as I wanted. Input can be passed as a file or as an argument to the application allowing to break the large data set into smaller subsets.</p>

<h4><strong>Log Error and Success</strong></h4>

<p>It&rsquo;s very much possible that the &lsquo;fix-to-fix errors&rsquo; can go wrong or throw exceptions. So handle for errors and log appropriate message to take any corrective actions. It&rsquo;s better to log to a file or other durable storage as that is more foolproof. Logging to the output window (Debug.Writeline/Console.Writeline) is not recommended, as there is a risk of accidentally losing it (with another test run or closing VS).</p>

<p> Logging successes are equally important to keep track of fixed records. It helps in cases where the process terminates suddenly while processing a set of data. It gives a track of all data sets that were successfully processed and exclude from following runs.</p>

<h4><strong>Test</strong></h4>

<p>It is very likely that the script has bugs and does not handle all possible cases. So as with any code, testing the data fix script is also mandatory. Preferably, test in a development/test environment, if not try for a small subset of input in the production. In my case, I was able to test in the development environment and then in production. But still, I ran a small subset in production first and ended up finding an issue that I could not find in development.</p>

<h4><strong>Parallelize if Possible</strong></h4>

<p>In cases where the data fixes are independent of each other (which likely is when dealing with large data fixes), each of the updates can be in parallel. Also using nonblocking calls when updating across the network helps speed up the process, by reducing the idle time and improves the overall processing time.</p>

<h4><strong>Parameterize Input</strong></h4>

<p>Parameterizing of input to the script (console) application helps when you want to scale the application. In my case updating each of the clients took around 8-10 seconds as it involved calling multiple geographically distributed systems. (Updating a system in the US from Australia does take a while!). Having a parameterized application enables to have multiple applications running with different input sets updating the data and speeds up the overall processing time.</p>

<p>It&rsquo;s hard to come up with a solid plan for critical data fixes. It might not be possible to follow all of the points above. Also, there might be a lot other things to be done other than these. These are just a few things for reference so that I can stop, take a look and move on when a similar need arises.  Hope this helps someone else too! Drop in a comment if you have any tips for the &lsquo;eleventh hour&rsquo; fix!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Morning Routine]]></title>
    <link href="http://rahulpnath.com/blog/morning_routine/"/>
    <updated>2016-08-16T05:00:35+00:00</updated>
    <id>http://rahulpnath.com/blog/morning_routine</id>
    <content type="html"><![CDATA[<p>Humans are <a href="https://www.youtube.com/watch?v=zdGbHY9VKVM">creatures of habit</a> and things work well if made as a routine. It&rsquo;s what you build as your daily plan that defines what you end up achieving in the day and in turn with life.</p>

<blockquote><p><em>If you are a late night person, you can read &lsquo;morning&rsquo; as &lsquo;late night&rsquo; - the focus here is routine!</em></p></blockquote>

<p><a href="https://www.pexels.com/photo/coffee-cup-notebook-pen-64775/">
<img  alt="Win your day, create a morning routine" src="http://rahulpnath.com/images/morning_routine.jpg"/>
</a></p>

<p>A morning routine is nothing but a sequence of actions regularly followed. I have tried switching my routine too, to late in the night a few times but found that mornings work better for me. But this could be different for you, so stick to the time of day that works for you. Before going to how my morning routine looks like (which I just started a week back), I will explain how I made the plan for the routine.</p>

<h3>Brain Dump</h3>

<p>At any point in time, there are a lot of things in my mind and things that I kept committing to myself and others. It is not possible to keep up with everything that I wish to do. So the very first thing to do is to dump everything out onto to paper and then decide what needs attention. The <a href="http://gettingthingsdone.com/wp-content/uploads/2014/10/Mind_Sweep_Trigger_List.pdf">Incompletion Trigger List</a> assists to get everything out of your mind onto paper. It&rsquo;s a good idea to block some time of yours to perform this exercise and give it all the attention it needs. At times it helps to <strong><em>Slow Down to Go Fast</em></strong>.</p>

<p><img  alt="Slow down, to go faster" src="http://rahulpnath.com/images/morningroutine_slow_down.jpg"/></p>

<h3>Most Important Task (MIT)</h3>

<p>If you are following along, hope the brain dump helped to flush out all that was there in your mind. This exercise needs to be occasionally done (maybe every 2-3 months) to stay clear and stay on top of things. I was sure that I could not do everything on that list after the brain dump. Now comes the hard part of choosing what matters to you and choosing those that aligns well with your goals. For the morning routine, I stuck to items from the brain dump that fall under &lsquo;Personal Projects&rsquo; category (as highlighted in the below image).</p>

<p><img  alt="Choosing tasks for morning routine" src="http://rahulpnath.com/images/morning_routine_MIT.png"/></p>

<p>These are the items that matter to me and aligns to the short-long term goals that I have. Below is a part of my list.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Start Youtube channel
</span><span class='line'>Become Pluralsight Author
</span><span class='line'>Blogging
</span><span class='line'>Learn Functional Programming
</span><span class='line'>Learn Ruby
</span><span class='line'>Open Source Contribution
</span><span class='line'>Improving Writing Skills and Language
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><em>The key is not to prioritize what’s on your schedule, but to schedule your priorities.</em></p>

<p><em>– <strong>Stephen Covey</strong></em></p></blockquote>

<p>Progressing towards all of these items on the list at the same time is not possible, as time available each day for achieving them is limited. I usually get around 2-3 hours a day of &lsquo;me time&rsquo;, provided I wake up at 4 in the morning (more on this shortly). The number of hours you have might differ, and you could choose those many items as you think you can fit in. But 3 is a good number to choose, as that helps to mix in a few different goals and gives the flexibility to shuffle around with them on a day. For me, it also means I roughly get around 40-60 minutes daily, for each item.</p>

<p>Currently, the ones that I have in my morning routine are:</p>

<ul>
<li>Blogging</li>
<li>Learn Functional Programming</li>
<li>Open Source Contribution</li>
</ul>


<h3>MITs to Mini Habits</h3>

<p>Having high-level short-long term goals is good, but does not provide anything actionable on a daily basis. It feels overwhelming to approach them because it does not give any sense of direction. So it&rsquo;s important that I have small actionable items that I can work on and progress towards achieving the goal.</p>

<blockquote><p><em>Break your goal into the smallest possible task that you can think of so that you don&rsquo;t feel to skip it</em></p></blockquote>

<p>For me, the mini habits look like this</p>

<ul>
<li>Write at least one sentence for the blog</li>
<li>Read at least one line about Functional Programming</li>
<li>Read at least one line of code of an Open Source Project</li>
</ul>


<p>The idea behind keeping it so small is just to start. It&rsquo;s very rare that I have stopped writing after writing a sentence or stopped reading after a line. The trouble is only with getting started - once done you can easily carry on for at least 20-30 minutes. Even if I make 2 out of the 3 of the above tasks, I take it as a success, which gives me some flexibility each day.</p>

<h3>Waking up Tricks</h3>

<p>There are days when <a href="https://en.wikipedia.org/wiki/Resistance_(creativity)">Resistance</a> beats me to it, and I don&rsquo;t get up to the routine. But I feel low on those days for not able to progress on my goals. So I try hard to have less of such days.</p>

<ul>
<li><p><strong>Alarm Phone Inside Pillow:</strong> I use <a href="http://www.bitspin.ch/">Timely</a> on a spare phone to set alarms.  Till a while back I used to keep the phone at the bedside while sleeping. But I noticed that I often ended up snoozing the alarm, at times even without full consciousness. So to make I <a href="http://www.rahulpnath.com/blog/waking-up-early-is-all-about-waking-up-to-an-alarm/">wake up to the alarm</a>, I now keep the phone buried inside my pillow with just the vibration. The vibration forces me to wake up and also removes the need for any alarm sound - my kid and wife does not get disturbed.</p></li>
<li><p><strong>Wear a Sweater:</strong> During winter, at times the cold beat me to it. It&rsquo;s hard to leave all the blankets and wake up to the cold. I started sleeping with the sweater, and I don&rsquo;t feel that cold when I wake up.</p></li>
<li><p><strong>Rationalize Against Resistance:</strong> However hard I try not to rationalize on getting up when the alarm sounds off, looking at the snooze button I end up rationalizing. Often I have found that when I try to use the tasks that I can achieve if I wake up, to motivate myself, I end up justifying that it can wait for tomorrow. Because there is no hard deadlines or accountability to anyone - it&rsquo;s just me!. Now I try just the opposite - Think about the resistance that is trying to force me to the bed and reassure myself that I should not fall to it. The &lsquo;me&rsquo; waking up after sleeping in is not going to like it then. So wake up!</p></li>
</ul>


<h3>My Routine</h3>

<ol>
<li><em>Wake at 4 am</em></li>
<li><em>Brush</em></li>
<li><em>Drink Water</em></li>
<li><em>Stretching</em></li>
<li><em>Review the tasks for the day (<a href="https://en.todoist.com/">Todoist</a>)</em></li>
<li><em>Mini Habits (2 or 3)</em></li>
<li><em>Wake up wife at 5:45 am</em></li>
<li><em>Continue Mini Habits (2 or 3)</em></li>
<li><em>Tea</em></li>
<li><em>Wake up Gautham at 7 am</em></li>
</ol>


<p>Having a morning routine has helped me focus more on things that matter and not wander from one task to another. It has also helped set a sense of direction to what I do every day and spent less time in thinking what to do. I find my days starting in gradually and not rushing into it, setting up the pace for the day. Hope this helps you too!</p>

<h4><strong>References</strong></h4>

<div>
      <div class="row">
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
            <a href="http://amzn.to/2a3wpUc">
            <img src="http://rahulpnath.com/images/books_powerofhabit.jpg" data-holder-rendered="true" style="display: block;" >
             </a>
          </div>
        </div>
       <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
          <a href="http://amzn.to/2ahrOcr" >
            <img src="http://rahulpnath.com/images/books_gtd.jpg" data-holder-rendered="true" style="display: block;">
            </a>
          </div>
        </div>
        <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://amzn.to/2aek2R5" >
            <img src="http://rahulpnath.com/images/books_warofart.jpg" data-holder-rendered="true" style="display: block;">
            </a>
          </div>
        </div>
     <div class="col-sm-6 col-md-3">
          <div class="thumbnail">
           <a href="http://zenhabits.net/" >
            <img src="http://rahulpnath.com/images/books_zenhabits.jpg" data-holder-rendered="true" style="display: block;">
           </a>
          </div>
        </div>
       </div>
       </div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NDC Sydney]]></title>
    <link href="http://rahulpnath.com/blog/ndc-sydney/"/>
    <updated>2016-08-08T15:26:15+00:00</updated>
    <id>http://rahulpnath.com/blog/ndc-sydney</id>
    <content type="html"><![CDATA[<p>It was a busy week with <a href="http://ndcsydney.com/">NDC Sydney</a> and a lot of other user group conferences happening at the same time since all the international speakers were in town.The conference was three days long with 105 speakers, 37 technologies, and 137 talks. Some the popular speakers were <a href="http://www.hanselman.com/">Scott Hanselman</a>, <a href="http://stackoverflow.com/users/22656/jon-skeet">Jon Skeet</a>, <a href="http://blog.ploeh.dk/">Mark Seemann</a>, <a href="http://odetocode.com/about/scott-allen">Scott Allen</a>,<a href="https://www.troyhunt.com/">Troy Hunt</a> and <a href="http://ndcsydney.com/speakers/">a lot more</a>.</p>

<p><img class="center" alt="NDC Sydney" src="http://rahulpnath.com/images/ndc_logo.png" /></p>

<h3>Sessions</h3>

<p>Each talk is one hour long and <a href="http://ndcsydney.com/agenda/">seven talks happen at the same time</a>. The talks that I attended are:</p>

<ul>
<li><a href="http://ndcsydney.com/talk/keynote/">Keynote: “If I knew then what I know now…” – Teaching Tomorrow’s Web to Yesterday’s Programmer</a></li>
<li><a href="http://ndcsydney.com/talk/stairway-to-cloud-orleans-framework-for-building-halo-scale-systems/">Stairway to Cloud: Orleans Framework for building Halo-scale systems</a></li>
<li><a href="http://ndcsydney.com/talk/50-shades-of-appsec/">50 Shades of AppSec</a></li>
<li><a href="http://ndcsydney.com/talk/adventures-in-building-a-fast-web-server-for-asp-net-core-1-0/">ASP.NET Core Kestrel: Adventures in building a fast web server</a></li>
<li><a href="http://ndcsydney.com/talk/domain-architecture-isomorphism-and-the-inverse-conway-maneuver/">Domain Architecture Isomorphism and the Inverse Conway Maneuver</a></li>
<li>Left early from <a href="http://ndcsydney.com/talk/building-solid-asp-net-core-1-0-apps/">Building SOLID ASP.NET Core 1.0 Apps</a> to attend <a href="http://www.meetup.com/Sydney-Alt-Net/events/231759202/">Alt.net user group</a></li>
<li><a href="http://ndcsydney.com/talk/making-hacking-childs-play/">Making Hacking Child’s Play</a></li>
<li><a href="http://ndcsydney.com/talk/understanding-an-architecture-for-the-cloud/">A cloud architecture – Azure from the bottom up</a></li>
<li><a href="http://ndcsydney.com/talk/functional-architecture-the-pits-of-success/">Functional Architecture: the Pits of Success</a></li>
<li>Moved to <a href="http://ndcsydney.com/talk/lightning-talks/">Lightning talks</a> after getting bored with <a href="http://ndcsydney.com/talk/lets-talk-auth/">Let&rsquo;s talk auth</a></li>
<li><a href="http://ndcsydney.com/talk/building-reactive-services-using-functional-programming/">Building Reactive Services using Functional Programming</a></li>
<li><a href="http://ndcsydney.com/talk/microtesting-how-we-set-fire-to-the-testing-pyramid-while-ensuring-confidence/">Microtesting: How We Set Fire To The Testing Pyramid While Ensuring Confidence</a></li>
<li><a href="http://ndcsydney.com/talk/what-does-an-open-source-microsoft-web-platform-look-like/">What does an “Open Source Microsoft Web Framework” look like</a></li>
<li><a href="http://ndcsydney.com/talk/google-cloud-platform/">Accessing the Google Cloud Platform with C#</a></li>
<li><a href="http://ndcsydney.com/talk/one-kata-three-languages/">One kata, three languages</a></li>
<li><a href="http://ndcsydney.com/talk/head-to-head/">Head to Head: Scott Allen and Jon Skeet</a></li>
<li><a href="http://ndcsydney.com/talk/deploying-and-scaling-microservices/">Deploying and Scaling Microservices</a></li>
<li><a href="http://ndcsydney.com/talk/the-experimentation-mindset/">The Experimentation Mindset</a></li>
<li><a href="http://ndcsydney.com/talk/c-7-the-future/">C# 7</a></li>
</ul>


<p>All sessions are recorded and are <a href="https://vimeo.com/ndcconferences">available here</a>. I hope the NDC Sydney ones too will be there in some time.</p>

<h3>Networking</h3>

<p>Events like this are a great place to network with other people in the industry and was one of the reasons I wanted to attend NDC. I am a regular reader of Mark Seemann&rsquo;s (@ploeh) blog, and his ideas resonate with me a lot. Also, I find his <a href="https://www.pluralsight.com/authors/mark-seemann">Pluralsight</a> videos and his book, <a href="http://amzn.to/2aFmtiC">Dependency Injection in .NET</a> helpful. It was great to meet him in person and enjoyed both of his talks on FSharp.</p>

<p><img class="center" alt="With Mark Seemann (ploeh)" src="http://rahulpnath.com/images/ndc_ploeh.jpg" /></p>

<h3>Sponsors</h3>

<p>Most of the <a href="http://ndcsydney.com/page/partnership/">event sponsors</a> had they stall at the conference, spreading their brand (with goodies and t-shirts) and also the work they do (a good way to attract talent to the company). There were also raffles for some big prices like Bose headphones, Das keyboards, Drones, Coffee machines, Raspberry Pi, etc. I was lucky enough to win a Raspberry Pi3 from <a href="https://twitter.com/RavenDB">@ravendb</a>.</p>

<p><img alt="Won a Raspberry Pi3. Ravendb raffle @ NDCSydney" src="http://rahulpnath.com/images/ndc_raspberrypi.jpg" /></p>

<p>It&rsquo;s confirmed that <a href="https://twitter.com/samnewman/status/761402917798555648">NDC Sydney is coming back next year</a>. If you are in town during that time, make sure you reserve a seat.  Look out for the early bird tickets, those are cheap, and the conference is worth it. Thanks to Readify for sponsoring my tickets and it&rsquo;s <a href="http://www.rahulpnath.com/blog/finding-a-job-abroad/">one of the good things about working with Readify</a>.</p>

<p>See you at NDC Sydney next year!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automated Deployment of AsmSpy to Chocolatey Using AppVeyor]]></title>
    <link href="http://rahulpnath.com/blog/automated-deployment-of-asmspy-to-chocolatey-using-appveyor/"/>
    <updated>2016-08-01T04:32:19+00:00</updated>
    <id>http://rahulpnath.com/blog/automated-deployment-of-asmspy-to-chocolatey-using-appveyor</id>
    <content type="html"><![CDATA[<p>Recently I have been trying to contribute to open source projects, to build the habit of reading others code. I chose to start with projects that I use regularly. <a href="https://github.com/mikehadlow/AsmSpy">AsmSpy</a> is one such project.</p>

<blockquote><p><em>AsmSpy is a Command line tool to view assembly references. It will output a list of all conflicting assembly references. That is where different assemblies in your bin folder reference different versions of the same assembly.</em></p></blockquote>

<p><img class="center" alt="AsmSpy assembly conflicts" src="http://rahulpnath.com/images/asmspy.png" /></p>

<p>I started with an <a href="https://github.com/mikehadlow/AsmSpy/pull/20">easy issue</a> to get familiar with the code and to confirm that the project owner, <a href="https://github.com/mikehadlow">Mike Hadlow</a>, accepts Pull Requests (PR). Mike was fast to approve and merge in the changes. There was a feature request to make AsmSpy available as <a href="https://chocolatey.org/">Chocolatey</a> package. Chocolatey is a package manger for Windows, to automate software management. AsmSpy, being a tool that&rsquo;s not project specific, it makes sense to deliver this via Chocolatey and makes installation easier. Mike added me as a project <a href="https://help.github.com/articles/permission-levels-for-a-user-account-repository/">collaborator</a>, which gave better control over the repository.</p>

<h3>Manually Releasing the Chocolatey Package</h3>

<p>AsmSpy is currently distributed as a <a href="http://static.mikehadlow.com/AsmSpy.zip">zip package</a>. Chocolatey supports packaging from a URL with a PowerShell script <a href="https://github.com/chocolatey/choco/wiki/HelpersInstallChocolateyZipPackage"><em>Install-ChocolateyZipPackage</em></a>. For the first release I <a href="https://github.com/mikehadlow/AsmSpy/pull/22">used this helper script to create the Chocolatey package</a> and uploaded it to my account. After fixing a few review comments the <a href="https://chocolatey.org/packages/asmspy/1.0.0">package got published</a>.</p>

<p><img class="center" alt="choco install asmspy" src="http://rahulpnath.com/images/asmspy_choco.png" /></p>

<h3>Automating Chocolatey Releases</h3>

<p>Now that I have to manage the AsmSpy Chocolatey package installations, I decided to automate the process of Chocolatey package creation and upload. Since I had used AppVeyor for <a href="http://www.rahulpnath.com/blog/automated-clickonce-deployment-of-a-wpf-application-using-appveyor/">automating Click-Once deployment</a> of <a href="https://github.com/rahulpnath/clal">CLAL</a>, I decided to use AppVeyor for this.</p>

<h4><strong>The Goal</strong></h4>

<p>I wanted to automatically deploy any new version of the package to Chocolatey. Any time a <a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging">tagged commit</a> is made in the main branch (master) it should trigger a deployment and push the new package to Chocolatey. This will give us the flexibility to control version numbers and decide when we actually want to make a release.</p>

<h4><strong>Setting up the Appveyor Project</strong></h4>

<p>Since now I am a collaborator on the project, AppVeyor shows the AsmSpy GitHub repository in my AppVeyor account too. Setting up a project is really quick in AppVeyor and most of it is automatic. Any commits now to the repository triggers an automated build</p>

<p><img alt="Appveyor add new project" src="http://rahulpnath.com/images/asmspy_appveyor_addProject.png" /></p>

<p>After playing around with different Appveyor project settings and build scripts, I noticed that AppVeyor was no longer triggering builds on commit pushes in the repository. I tried deleting and adding the AppVeyor project, but with no luck.</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">The <a href="https://twitter.com/appveyor">@appveyor</a> project suddenly stopped triggering auto builds on pushes.Deleted and added new project <a href="https://t.co/qfV8P2fmWN">https://t.co/qfV8P2fmWN</a> any thoughts?</p>&mdash; Rahul P Nath (@rahulpnath) <a href="https://twitter.com/rahulpnath/status/754764006976466944">July 17, 2016</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>The AppVeyor team was quick to respond and suggested a possible problem with the Webhook URL not configured under the GitHub repository. The Webhook URL for AppVeyor is available under the projects settings. Since I did not have access to the Settings page of the GitHub repository, I reached out to Mike, who promptly updated the Webhook URL for AppVeyor under GitHub project settings. This fixed the issue of builds not triggering automatically when commits are pushed to the GitHub repository.</p>

<p><img alt="Github webhook url for appveyor" src="http://rahulpnath.com/images/asmspy_github_webhook.png"/></p>

<h4><strong>Creating Chocolatey Package</strong></h4>

<p>AppVeyor has <a href="https://www.appveyor.com/blog/2014/11/06/appveyor-with-a-hint-of-chocolatey">support for Chocolatey commands</a> out of the box, which makes it easy to create packages on a successful build. I added in the <a href="https://github.com/mikehadlow/AsmSpy/blob/master/AsmSpy/AsmSpy.nuspec">nuspec file</a> that defines the Chocolatey Package and added an after-build script to generate the package. AppVeyor exposes <a href="https://www.appveyor.com/docs/environment-variables">environment variables</a>, that are set for every build. In the &lsquo;after_build&rsquo; scripts I trigger Chocolatey packaging only if the build is triggered by a commit with a tag (APPVEYOR_REPO_TAG_NAME). Every build generates the zip package that can be used to test the current build.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">version</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1.0.{build}</span>
</span><span class='line'><span class="l-Scalar-Plain">build</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">verbosity</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">minimal</span>
</span><span class='line'><span class="l-Scalar-Plain">after_build</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">cmd</span><span class="p-Indicator">:</span> <span class="p-Indicator">&gt;-</span>
</span><span class='line'>    <span class="no">7z a asmspy.zip .\AsmSpy\bin\Debug\AsmSpy.exe</span>
</span><span class='line'>    <span class="no">if defined APPVEYOR_REPO_TAG_NAME choco pack .\AsmSpy\AsmSpy.nuspec --version %APPVEYOR_REPO_TAG_NAME%</span>
</span><span class='line'>    <span class="no">if defined APPVEYOR_REPO_TAG_NAME appveyor PushArtifact asmspy.%APPVEYOR_REPO_TAG_NAME%.nupkg -DeploymentName ReleaseNuget</span>
</span><span class='line'><span class="l-Scalar-Plain">artifacts</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">asmspy.zip</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Zip Package</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="s">&#39;\AsmSpy\bin\*.nupkg&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Nuget Package</span>
</span></code></pre></td></tr></table></div></figure>


<h4><strong>Setting up Chocolatey Environment</strong></h4>

<p>Since Chocolatey is built on top of NuGet infrastructure, it supports deployment to it like you would do for a NugGet package. The <a href="https://www.appveyor.com/docs/deployment/nuget">NuGet deployment provider</a> publishes packages to a NuGet feed. All you need to provide is the feed URL and the API key and the package to deploy. I created a NuGet deployment environment with the chocolatey NuGet URL, my account API key and the Artifact to deploy.</p>

<p><img  alt="AppVeyor Chocolatey environment" src="http://rahulpnath.com/images/asmspy_appveyor_environment.png"/></p>

<p>The projects build setting is configured to deploy to the Environment created above for a build triggered by a commit with a tag.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">deploy</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="p-Indicator">-</span> <span class="l-Scalar-Plain">provider</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Environment</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">AsmSpy Chocolatey</span>
</span><span class='line'>  <span class="l-Scalar-Plain">on</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">branch</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">master</span>
</span><span class='line'>    <span class="l-Scalar-Plain">APPVEYOR_REPO_TAG</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>From now on any tagged commit is pushed into the master branch on the repository it will trigger a release into Chocolatey. I have not tested this yet as there were no updates to the tool. I might trigger a test release sometime soon to see if it all works well end to end. Since with this automated deployment, we no longer use the zip URL to download the package in Chocolatey. The exe gets bundled along with the package. There might be some extra build scripts required to support the upgrade scenario for Chocolatey. I will update the post after the first deployment using this new pipeline!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finding a Job Abroad]]></title>
    <link href="http://rahulpnath.com/blog/finding-a-job-abroad/"/>
    <updated>2016-07-25T06:07:21+00:00</updated>
    <id>http://rahulpnath.com/blog/finding-a-job-abroad</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a year since I have moved over to <a href="https://readify.net/">Readify</a> in Sydney, Australia. Like I never believed that one could <a href="http://www.rahulpnath.com/blog/getting-started-with-freelancing-jobs-online/">earn money on the Internet</a>, I never thought that I could easily find a job abroad.</p>

<blockquote><p><em>If you are not a developer this post might not be fully applicable to you. However the things that helped me might help you too.</em></p></blockquote>

<p><a href="https://commons.wikimedia.org/wiki/File:Sydney_Opera_house_HDR_Sydney_Australia.jpg">
    <img class="center" alt="How I found a job in Sydney" src="http://rahulpnath.com/images/finding_job_abroad.png" />
</a></p>

<p>I was not so keen to move abroad with an on-site opportunity from India, given the overhead of <a href="https://en.wikipedia.org/wiki/Global_delivery_model">onsite-offshore coordination</a> is a pain. Getting a  resident visa for countries like Australia, Canada etc. and finding a job after moving in was another option. I didn&rsquo;t prefer that either, as ending up in a foreign country without a job didn&rsquo;t look great to me, <a href="http://www.rahulpnath.com/blog/life-learnings-after-being-a-parent/">especially with Gautham</a>. So the only option left was to find an employer who recruits internationally and move in with a sponsored work visa. There are a lot of companies that are looking for people across the world and ready to sponsor for the visa . Since there is more money and effort involved in the whole process of recruiting internationally, I have felt that companies look for something more than just passing an interview process. Here are a few things that helped me find such an employer and things that I could have done better.</p>

<h3>The Third Place</h3>

<p>There needs to a place other than <strong>Home</strong> and <strong>Work</strong>,  where you spend time and this is often referred to as a <a href="http://www.hanselman.com/blog/TheDeveloperTheoryOfTheThirdPlace.aspx">Third Place</a>. It could be your <a href="http://www.rahulpnath.com/blog/category/blogging/">blog</a>, <a href="http://stackoverflow.com/users/1948745/rahul-p-nath">stack overflow</a>, <a href="http://www.rahulpnath.com/blog/stars-do-count/">msdn forums</a>, <a href="https://github.com/rahulpnath">GitHub</a>, podcast, YouTube channel, social media pages etc. For me primarily it is this blog and then GitHub and a bit of <a href="https://social.msdn.microsoft.com/profile/rahul%20p%20nath?type=forum&amp;referrer=http://social.msdn.microsoft.com/Forums/azure/en-US/home">msdn forums</a>. Having a Third Place increases your chances of landing a job and also acts as a good &lsquo;Resume&rsquo;. I feel a resume is not worthy these days, as you can put whatever you feel like in that and needs to be validated through an interview. A blog, forum profile etc cannot be faked and always speaks about your experience.</p>

<blockquote><p><em>There is no reason to believe in a Resume, it can always be faked - but a history of events, posts or articles is hard to be faked. A resume should self-validate.</em></p></blockquote>

<p>A resume, if at all it needs to be there, should be just a highlight of all your experiences, with relevant links to your &lsquo;Third Place&rsquo;. This also helps keep resume short and clear.</p>

<h3>Using Social Media For The Advantage</h3>

<p>Social media is a really powerful to connect with different people, especially Twitter and LinkedIn. These are good channels to establish relationships with different people from different geographies. It&rsquo;s good to follow and start general conversations with employees of companies that you wish to join. Try to get involved with any tweets, messages, open source projects that they are also involved in . With time, once you become known to them, either you can reach out to them for an opportunity to work together or they themselves might offer you one. Don&rsquo;t try to fake it or overdo this, as it can affect you adversely. Do this only if you are genuinely interested in what they do.</p>

<p><img class="center" alt="The Hague - Amsterdam" src="http://rahulpnath.com/images/amsterdam_thehague.jpg" title="One day in Amsterdam" /></p>

<p>For me, I landed an interview with <a href="https://www.evision-software.com/">eVision</a>, through one of my Twitter contact, <a href="https://twitter.com/randompunter">Damian Hickey</a>. it just happened that we followed each other and he worked for eVision, and I found the company interesting. Just a message to him and 2 months later I was in Amsterdam attending an interview with them and an offer for employment a week later. But I ended up not joining them because of the visa getting delayed for a long period as I was not fully &lsquo;travel ready&rsquo; (more on this below). But I enjoyed every bit of the time I spend with &lsquo;<em>Team Tigers</em>&rsquo; in eVision.</p>

<h3>Reaching out to Companies Directly</h3>

<p><a href="https://readify.net/">Readify</a> was another company that interested me. The company itself took pride in its employees and values a lot in their Professional development. The different people that were part of the company was another reason that I like Readify - MVPs, Book authors, Pluralsight authors, bloggers, musicians, photographers - name it and there was a person with that interests. It is also one of the <a href="https://readify.net/about-us/awards-recognitions/">best consulting companies</a> in Australia. The recruitment process was straightforward and all started with the <a href="https://knockknock.readify.net/">knock-knock challenge</a>, followed by a <a href="https://readify.net/careers/apply-now/technical-consultants/">series of interviews</a>. Everything just fell in place and on time and I ended up joining them and moving over to Sydney Australia on a work visa. Readify is still hiring and if you are interested and find yourself a match send me your profile (for no reason but to earn me the referral bonus) - if not head off to the knock knock challenge.</p>

<blockquote><p><em>Good developers are in great demand and &lsquo;Good&rsquo; is relative - you have a place out there all you need is to reach out!</em></p></blockquote>

<p>Look out for companies in LinkedIn or <a href="http://stackoverflow.com/jobs?location=Sydney%2C%20Australia">StackOverflow Careers</a> who sponsor visa and follow their recruitment process.</p>

<h3>Being Travel Ready</h3>

<p>As I mentioned above one of the reasons not to take up the offer at eVision, was because of the visa getting delayed for a long period. Since all my documents are from India, I had to get all my documents attested and <a href="https://en.wikipedia.org/wiki/Apostille_Convention">Apostille&rsquo;d</a>, which takes around a month&rsquo;s time. Added to that neither I nor my wife had a birth certificate (as it was not so common thing in my place when I was born). So I had to first get all the documents and then get them apostilled, which was not to happen in at least 2-3 months. Even if you have no interest in moving abroad,get all your travel documents and keep them ready.
Most commonly asked for documents are</p>

<ul>
<li>Passport</li>
<li>Birth certificate</li>
<li>Education certificates</li>
<li>Work Experience certificates</li>
<li>Marriage certificate (if you are married)</li>
</ul>


<h3>Making the Move</h3>

<p>One of the biggest challenges that I faced while making the move, was to get around the currency conversion and to ensure that the same standard of living can be maintained once I move across it. Sites like <a href="https://www.expatistan.com/cost-of-living">Expatistan</a>, <a href="http://www.numbeo.com/cost-of-living/">Numbeo</a> etc. help give an idea on approximate costs. But what&rsquo;s worked for me more is to not use the actual <a href="http://www.xe.com/">currency exchange rate</a>, but to find a &lsquo;<strong>Personal Exchange Rate</strong> (PER)&rsquo; and use that to compare.</p>

<blockquote><p><em>Personal Exchange Rate is your Disposable Income in Home Country/Disposable Income in Destination Country. Multiply costs of items in destination country by PER to see how it compares to prices in your country.</em></p></blockquote>

<p><img class="center" alt="View from my office, Sydney" src="http://rahulpnath.com/images/sydney_work.jpg" title="View from my office" /></p>

<p>I moved over to Sydney last year around the same time. It was difficult to adjust in during the initial days, but soon it all started to fall into the rhythm. It&rsquo;s been a year with Readify and at my client and I am enjoying the new experiences.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring to Improve Readability - Separating Business Language and Programming Language Semantics]]></title>
    <link href="http://rahulpnath.com/blog/refactoring-to-improve-readability-separating-business-language-and-programming-language-semantics/"/>
    <updated>2016-07-18T04:52:35+00:00</updated>
    <id>http://rahulpnath.com/blog/refactoring-to-improve-readability-separating-business-language-and-programming-language-semantics</id>
    <content type="html"><![CDATA[<p>Often we write ourselves or come across code that has both business language and the programming language semantics mixed together. This makes it very hard to reason about the code and also fix any issues. It&rsquo;s easier to read code that is composed of different smaller individual functions doing a single thing.</p>

<p>If you follow the <em>One Level of Abstraction per Function Rule</em> or the <em>Stepdown Rule</em> as mentioned in the book <a href="http://www.amazon.com/gp/product/0132350882/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0132350882&amp;linkCode=as2&amp;tag=rahulpnath-20&amp;linkId=CVCVZFAR5SBYVMJW">Clean Code</a> (I <a href="http://www.rahulpnath.com/blog/language-agnostic-books-for-every-developer-2/">recommend reading it</a> if you have not already), it is easier to keep the business and programming language semantics separate.</p>

<blockquote><p><em>We want the code to read like a top-down narrative. We want every function to be followed by those at the next level of abstraction so that we can read the program, descending one level of abstraction at a time as we read down the list of functions. Making the code read like a top-down set of TO paragraphs is an effective technique for
keeping the abstraction level consistent.</em></p></blockquote>

<p>Recently while fixing a bug in one of the applications that I am currently working on, I came across a code with the business and programming language semantics mixed together. This made it really hard to understand the code and fixing it. So I decided to refactor it a bit before fixing the bug.</p>

<p> <a href="http://www.slideshare.net/kvg452/the-art-of-readable-code-31322040">
<img class="center" src="http://rahulpnath.com/images/readable_code.jpg" alt="Code should be readable" />
</a></p>

<p>The application is a subscription based service for renting books, videos, games etc. and enabled customers to have different subscription plans and terms. Currently, we are migrating away from the custom built billing module that the application uses to a SAAS based billing provider to make invoicing and billing easy and manageable. In code, a <em>Subscription</em> holds a list of <em>SubscriptionTerm</em> items, that specifies the different terms that a customer has for the specific subscription. A term typically has a start date, an optional end date and a price for that specific term. A null end date indicates that the subscription term is valid throughout the customer lifetime in the system.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Subscription</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">SubscriptionTerm</span><span class="p">&gt;</span> <span class="n">Terms</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">SubscriptionTerm</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">double</span> <span class="n">Price</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">StartDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateTime</span><span class="p">?</span> <span class="n">EndDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But in the new system to which we are migrating to, does not support subscription terms that overlap each other with a different price. This had to be data fixed manually in the source system, so we decided to perform a validation step before the actual migration. The code below does exactly that and was working fine until we started seeing that for cases where there were more than one SubscriptionTerm without an end date and also when end date of one was the start date of another, there were no validation errors shown.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="nf">Validate</span><span class="p">(</span><span class="n">Subscription</span> <span class="n">subscription</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">hasOverlappingItems</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">term</span> <span class="k">in</span> <span class="n">subscription</span><span class="p">.</span><span class="n">Terms</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">otherTerms</span> <span class="p">=</span> <span class="n">subscription</span><span class="p">.</span><span class="n">Terms</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">Price</span> <span class="p">!=</span> <span class="n">term</span><span class="p">.</span><span class="n">Price</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">otherTerms</span><span class="p">.</span><span class="n">Any</span><span class="p">())</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span>
</span><span class='line'>                <span class="p">(!</span><span class="n">term</span><span class="p">.</span><span class="n">EndDate</span><span class="p">.</span><span class="n">HasValue</span> <span class="p">&amp;&amp;</span> <span class="n">otherTerms</span><span class="p">.</span><span class="n">Any</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">term</span><span class="p">.</span><span class="n">StartDate</span> <span class="p">&lt;</span> <span class="n">a</span><span class="p">.</span><span class="n">EndDate</span><span class="p">))</span> <span class="p">||</span>
</span><span class='line'>                <span class="p">(</span><span class="n">otherTerms</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="p">!</span><span class="n">a</span><span class="p">.</span><span class="n">EndDate</span><span class="p">.</span><span class="n">HasValue</span><span class="p">).</span><span class="n">Any</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">StartDate</span> <span class="p">&lt;</span> <span class="n">term</span><span class="p">.</span><span class="n">EndDate</span><span class="p">))</span> <span class="p">||</span>
</span><span class='line'>                <span class="p">(</span><span class="n">otherTerms</span><span class="p">.</span><span class="n">Any</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">term</span><span class="p">.</span><span class="n">StartDate</span> <span class="p">&lt;=</span> <span class="n">a</span><span class="p">.</span><span class="n">EndDate</span> <span class="p">&amp;&amp;</span> <span class="n">a</span><span class="p">.</span><span class="n">StartDate</span> <span class="p">&lt;=</span> <span class="n">term</span><span class="p">.</span><span class="n">EndDate</span><span class="p">))</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">hasOverlappingItems</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">hasOverlappingItems</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code, as you can see is not that readable and difficult to understand, which increases the chances of me breaking something else while trying to fix it. There were no tests covering this validator, which made it even harder to change it. While the algorithm itself to find overlappings can be improved (maybe a topic for another blog post), we will look into how we can refactor this existing code to improve its readability.</p>

<blockquote><p><em>Code is read more than written, so it&rsquo;s much better to have code optimized for reading</em></p></blockquote>

<h3>Creating the Safety Net</h3>

<p>The first logical thing to do in this case is to protect us with test cases so that any changes made does not break existing functionality.  I came up with the below test cases (<em>test data shown does not cover all cases</em>), to cover the different possible cases that this method can take.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[InlineData(&quot;10-Jan-2016&quot;, &quot;10-Feb-2016&quot;, 1, &quot;11-Feb-2016&quot;, &quot;10-Dec-2016&quot;, 2, false)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;10-Jan-2015&quot;, &quot;10-Feb-2015&quot;, 1, &quot;20-Jan-2015&quot;, &quot;1-Feb-2016&quot;, 2, true)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">ValidateReturnsExpected</span><span class="p">(</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">startDate1</span><span class="p">,</span> <span class="kt">string</span> <span class="n">endDate1</span><span class="p">,</span> <span class="kt">double</span> <span class="n">price1</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">startDate2</span><span class="p">,</span> <span class="kt">string</span> <span class="n">endDate2</span><span class="p">,</span> <span class="kt">double</span> <span class="n">price2</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">expected</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Fixture setup</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">subscription</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Subscription</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">term1</span> <span class="p">=</span> <span class="n">createTerm</span><span class="p">(</span><span class="n">startDate1</span><span class="p">,</span> <span class="n">endDate1</span><span class="p">,</span> <span class="n">price1</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">term2</span> <span class="p">=</span> <span class="n">createTerm</span><span class="p">(</span><span class="n">startDate2</span><span class="p">,</span> <span class="n">endDate2</span><span class="p">,</span> <span class="n">price2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">subscription</span><span class="p">.</span><span class="n">Terms</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">term1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">subscription</span><span class="p">.</span><span class="n">Terms</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">term2</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Exercise system</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">sut</span> <span class="p">=</span> <span class="k">new</span> <span class="n">OverlappingSubscriptionTermWithConflictingPriceValidator</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">actual</span> <span class="p">=</span> <span class="n">sut</span><span class="p">.</span><span class="n">Validate</span><span class="p">(</span><span class="n">subscription</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Verify outcome</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">actual</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Teardown</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>All tests pass, except for those where there were issues in the destination system and I was about to fix.</p>

<h3>Refactoring for Readability</h3>

<p>Now that I have some tests to back me up for the changes that I am to make, I feel more confident to do the refactoring. Looking at the original validator code, all I see is <strong>DATETIME</strong> - There is a lot of manipulation of dates that is happening, which strongly indicates there is some abstraction waiting to be pulled out. We had seen in, <a href="http://www.rahulpnath.com/blog/thinking-beyond-primitive-values-value-objects/">Thinking Beyond Primitive Values: Value Objects</a>, that any time we use a primitive type, we should think more about the choice of type. We saw that properties that co-exist (like DateRange) should be pulled apart as Value Objects. The StartDate and EndDate in SubscriptionTerm fall exactly into that category.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">DateRange</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">StartDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateTime</span><span class="p">?</span> <span class="n">EndDate</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">DateRange</span><span class="p">(</span><span class="n">DateTime</span> <span class="n">startDate</span><span class="p">,</span> <span class="n">DateTime</span><span class="p">?</span> <span class="n">endDate</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">endDate</span><span class="p">.</span><span class="n">HasValue</span> <span class="p">&amp;&amp;</span> <span class="n">endDate</span><span class="p">.</span><span class="n">Value</span> <span class="p">&lt;</span> <span class="n">startDate</span><span class="p">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="s">&quot;End date cannot be less than start Date&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">StartDate</span> <span class="p">=</span> <span class="n">startDate</span><span class="p">;</span>
</span><span class='line'>        <span class="n">EndDate</span> <span class="p">=</span> <span class="n">endDate</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since these properties are used in a lot of other places, I did not want to make a breaking change, by deleting the existing properties and adding in a new DateRange class. So I chose to add a new read-only property <em>TermPeriod</em> to SubscriptionTerm which returns a DateRange, constructed from it&rsquo;s Start and End dates, as shown below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">DateRange</span> <span class="n">TermPeriod</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">get</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">DateRange</span><span class="p">(</span><span class="n">StartDate</span><span class="p">,</span> <span class="n">EndDate</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>From the existing validator code, what we are essentially trying to check is if there are any SubscriptionTerms for a subscription that overlaps, i.e if one TermPeriod falls in the range of another. Introducing a method, <em>IsOverlapping</em> on DateRange to check if it overlaps with another DateRange seems logical at this stages. Adding a few tests cases to protect myself here to implement the IsOverlapping method in DateRange class. I also added in the tests to cover the failure scenarios that were seen before.</p>

<figure class='code'><figcaption><span>Tests for IsOverlapping</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[InlineData(&quot;10-Jan-2016&quot;, &quot;10-Feb-2016&quot;, &quot;11-Feb-2016&quot;, &quot;10-Dec-2016&quot;, false)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;10-Jan-2015&quot;, &quot;10-Feb-2015&quot;, &quot;20-Jan-2015&quot;, &quot;1-Feb-2016&quot;, true)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;10-Jan-2015&quot;, null, &quot;20-Jan-2016&quot;, null,  true)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;28-Jan-16&quot;, &quot;10-Mar-16&quot;, &quot;10-Mar-16&quot;, null, true)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">OverlappingDatesReturnsExpected</span><span class="p">(</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">startDateTime1</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">endDateTime1</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">startDateTime2</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">string</span> <span class="n">endDateTime2</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">expected</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// Fixture setup</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">range1</span> <span class="p">=</span> <span class="n">CreateDateRange</span><span class="p">(</span><span class="n">startDateTime1</span><span class="p">,</span> <span class="n">endDateTime1</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">range2</span> <span class="p">=</span> <span class="n">CreateDateRange</span><span class="p">(</span><span class="n">startDateTime2</span><span class="p">,</span> <span class="n">endDateTime2</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Exercise system</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">actual</span> <span class="p">=</span> <span class="n">range1</span><span class="p">.</span><span class="n">IsOverlapping</span><span class="p">(</span><span class="n">range2</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Verify outcome</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">actual</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// Teardown</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>IsOverlapping in DateRange</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="nf">IsOverlapping</span><span class="p">(</span><span class="n">DateRange</span> <span class="n">dateRange</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(!</span><span class="n">EndDate</span><span class="p">.</span><span class="n">HasValue</span> <span class="p">&amp;&amp;</span> <span class="p">!</span><span class="n">dateRange</span><span class="p">.</span><span class="n">EndDate</span><span class="p">.</span><span class="n">HasValue</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(!</span><span class="n">EndDate</span><span class="p">.</span><span class="n">HasValue</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">StartDate</span> <span class="p">&lt;=</span> <span class="n">dateRange</span><span class="p">.</span><span class="n">EndDate</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(!</span><span class="n">dateRange</span><span class="p">.</span><span class="n">EndDate</span><span class="p">.</span><span class="n">HasValue</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">dateRange</span><span class="p">.</span><span class="n">StartDate</span> <span class="p">&lt;=</span> <span class="n">EndDate</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">StartDate</span> <span class="p">&lt;=</span> <span class="n">dateRange</span><span class="p">.</span><span class="n">EndDate</span>
</span><span class='line'>        <span class="p">&amp;&amp;</span> <span class="n">dateRange</span><span class="p">.</span><span class="n">StartDate</span> <span class="p">&lt;=</span> <span class="n">EndDate</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Given two DateRange&rsquo;s I can now tell if they overlap or not, which now can be used to check if two SubscriptionTerms overlap. I just need to check if their TermPeriod&rsquo;s overlap. The validator code is now much more easy to understand.</p>

<figure class='code'><figcaption><span>IsOverlapping in SubscriptionTerm</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="nf">IsOverlapping</span><span class="p">(</span><span class="n">SubscriptionTerm</span> <span class="n">term</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">TermPeriod</span><span class="p">.</span><span class="n">IsOverlapping</span><span class="p">(</span><span class="n">term</span><span class="p">.</span><span class="n">TermPeriod</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Validator after Refactoring</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="kt">bool</span> <span class="nf">Validate</span><span class="p">(</span><span class="n">Subscription</span> <span class="n">subscription</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">term</span> <span class="k">in</span> <span class="n">subscription</span><span class="p">.</span><span class="n">Terms</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">termsWithDifferentPrice</span> <span class="p">=</span> <span class="n">subscription</span><span class="p">.</span><span class="n">Terms</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">Price</span> <span class="p">!=</span> <span class="n">term</span><span class="p">.</span><span class="n">Price</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">termsWithDifferentPrice</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Any</span><span class="p">(</span><span class="n">a</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="n">IsOverlapping</span><span class="p">(</span><span class="n">term</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code now reads as a set of TO Paragraphs as mentioned in the book <a href="http://www.amazon.com/gp/product/0132350882/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0132350882&amp;linkCode=as2&amp;tag=rahulpnath-20&amp;linkId=CVCVZFAR5SBYVMJW">Clean Code</a>.</p>

<blockquote><p><em>To check if a subscription is valid, check if the subscription has overlapping SubscriptionTerms with a conflicting price. To check if two subscriptions are overlapping, check if their subscription term periods overlap each other. To check if two term periods overlap check if start date of one is before the end date of other</em></p></blockquote>

<p>Readability of code is an important aspect and should be something that we strive towards for. The above just illustrates an example of why readability of code is important and how it helps us on a longer run. It makes maintaining code really easy. Following some basic guidelines like One Level of Abstraction per Function, allows us to write more readable code. Separating code into different small readable functions covers just one aspect of Readability, there are a lot of other practices mentioned in the book <a href="http://shop.oreilly.com/product/9780596802301.do">The Art of Readable Code</a>. The sample code with all the tests and validator is available <a href="https://github.com/rahulpnath/Blog/tree/master/Refactoring/RefactoringForReadability">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protect Yourself Against Line Ending Issues when Using Environment.Newline to Split Text]]></title>
    <link href="http://rahulpnath.com/blog/protect-yourself-against-line-ending-issues-when-using-environment-dot-newline-to-split-text/"/>
    <updated>2016-07-11T05:45:31+00:00</updated>
    <id>http://rahulpnath.com/blog/protect-yourself-against-line-ending-issues-when-using-environment-dot-newline-to-split-text</id>
    <content type="html"><![CDATA[<blockquote><p><em>In computing, a <a href="https://en.wikipedia.org/wiki/Newline">newline</a>, also known as a line ending, end of line (EOL), or line break, is a special character or sequence of characters signifying the end of a line of text and the start of a new line. The actual codes representing a newline vary across operating systems, which can be a problem when exchanging text files between systems with different newline representations.</em></p></blockquote>

<p>I was using a Resource (resx) file to store large text of comma separated values (CSV). This key-value mapping represented the mapping of product codes between an old and new system. In code, I split this whole text using <a href="https://msdn.microsoft.com/en-us/library/system.environment.newline(v=vs.110).aspx">Environment.NewLine</a> and then by comma to generate the map, as shown below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">AllMappings</span> <span class="p">=</span> <span class="n">Resources</span><span class="p">.</span><span class="n">UsageMap</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Split</span><span class="p">(</span><span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span> <span class="n">Environment</span><span class="p">.</span><span class="n">NewLine</span> <span class="p">},</span> <span class="n">StringSplitOptions</span><span class="p">.</span><span class="n">RemoveEmptyEntries</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">s</span> <span class="p">=&gt;</span> <span class="n">s</span><span class="p">.</span><span class="n">Split</span><span class="p">(</span><span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="sc">&#39;,&#39;</span> <span class="p">}))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">ToDictionary</span><span class="p">(</span><span class="n">item</span> <span class="p">=&gt;</span> <span class="n">item</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="n">item</span> <span class="p">=&gt;</span> <span class="n">item</span><span class="p">[</span><span class="m">1</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>It all worked fine on my machine and even on other team members machines. There was no reason to doubt this piece of code, until on the development environment we noticed the mapped value in the destination system always null.</p>

<h3>Analyzing the Issue</h3>

<p>Since in the destination system, all the other values were getting populated as expected, except for this mapping it was easy to narrow down to the class that returned the mapping value, to be the problematic one. Initially, I thought this was an issue with the resource file not getting bundled properly. I used <a href="https://www.jetbrains.com/decompiler/">dotPeek</a> to decompile the application and verified that resource file was getting bundled properly and had exactly the same text (visually) as expected.</p>

<p><img src="http://rahulpnath.com/images/newline_dotpeek.png" alt ="Resource file disassembled in dotPeek" /></p>

<p>I copied the resource file text from disassembled code in dotPeek into <a href="http://www.flos-freeware.ch/notepad2.html">Notepad2</a> (configured to show the line endings) and everything started falling into place. The resource text file from the build generated code ended with LF (\n), while the one on our development machines had CRLF (\r\n). All machines, including the build machines are running Windows and the expected value for <a href="https://msdn.microsoft.com/en-us/library/system.environment.newline(v=vs.110).aspx">Environemnt.Newline</a> is CRLF - <strong> A string containing &ldquo;\r\n&rdquo; for non-Unix platforms, or a string containing &ldquo;\n&rdquo; for Unix platforms.</strong></p>

<figure>
<img src="http://rahulpnath.com/images/newline_diff.png" alt ="Difference between build generated and development machine resource file" />
<figcaption><em>Difference between build generated and development machine resource file</em></figcaption>
</figure>


<h3>Finding the Root Cause</h3>

<p>We use git for our source control and <a href="https://help.github.com/articles/dealing-with-line-endings/">configured to use &lsquo;auto&rsquo; line endings</a> at the repository level. This ensures that the source code, when checked out, matches the line ending format of the machine. We use <a href="https://www.atlassian.com/software/bamboo">Bamboo</a> on our build servers running Windows. The checked out files on the build server had LF line endings, which in turn gets compiled into the assembly.</p>

<p>The checkout step in Bamboo used the built in git plugin (JGit) and has certain limitations. It&rsquo;s recommended to use native git to use the full git features. JGit also has a known issue with <a href="https://jira.atlassian.com/plugins/servlet/mobile#issue/BAM-9591">line endings on a Windows machine</a> and checks out a file with LF endings. So whenever the source code was checked out, it replaced all line endings in the file with LF before compilation. So the resource file ended up having LF line endings in the assembly, and the code could no longer find Environment.Newline (\r\n) to split.</p>

<h3>Possible Fixes</h3>

<p>Two possible ways to fix this issue is</p>

<ul>
<li>Switch to using native git on the bamboo build process</li>
<li>Use LF to split the text and trim any excess characters. This reduces dependency on line endings variations and settings between different machines only until we are on a different machine which has a different format.</li>
</ul>


<p>I chose to use LF to split the text and trim any additional characters, while also <a href="https://confluence.atlassian.com/bamboo/defining-a-new-executable-capability-289277164.html">updating Bamboo to use native git</a> for checkout.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">AllMappings</span> <span class="p">=</span> <span class="n">Resources</span><span class="p">.</span><span class="n">UsageMap</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Split</span><span class="p">(</span><span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span><span class="s">&quot;\n&quot;</span><span class="p">},</span> <span class="n">StringSplitOptions</span><span class="p">.</span><span class="n">RemoveEmptyEntries</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">s</span> <span class="p">=&gt;</span> <span class="n">s</span><span class="p">.</span><span class="n">Split</span><span class="p">(</span><span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="sc">&#39;,&#39;</span> <span class="p">}))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">ToDictionary</span><span class="p">(</span><span class="n">item</span> <span class="p">=&gt;</span> <span class="n">item</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">Trim</span><span class="p">().</span><span class="n">ToUpper</span><span class="p">(),</span> <span class="n">item</span> <span class="p">=&gt;</span> <span class="n">item</span><span class="p">[</span><span class="m">1</span><span class="p">].</span><span class="n">Trim</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Protecting Against Line Endings</h3>

<p>The easiest and fastest way that this would have come to my notice was to have a unit test in place. This would ensure that the test fails on the build machine. A test like below will pass on my local but not on the build machine as UsageMap would not return any value for the destination system.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="na">[Theory]</span>
</span><span class='line'><span class="na">[InlineData(&quot;MovieWeek&quot;, &quot;Weekly-Movie&quot;)]</span>
</span><span class='line'><span class="na">[InlineData(&quot;Dell15&quot;, &quot;Laptop-Group3&quot;)]</span>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">SutReturnsExpected</span><span class="p">(</span><span class="kt">string</span> <span class="n">sourceSystemCode</span><span class="p">,</span> <span class="kt">string</span> <span class="n">expected</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">sut</span> <span class="p">=</span> <span class="k">new</span> <span class="n">UsageMap</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">actual</span> <span class="p">=</span> <span class="n">sut</span><span class="p">.</span><span class="n">GetDestinationCode</span><span class="p">(</span><span class="n">sourceSystemCode</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Assert</span><span class="p">.</span><span class="n">Equal</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">actual</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since there are different systems with different line endings and also applications with different line ending settings and issues of its own, there does not seem to be a &lsquo;one fix for all&rsquo; cases. The best I can think of in these cases is it protect us with such unit tests. It fails fast and brings it immediately to out notice. Have you ever had to deal with an issue with line endings and found better ways to handle them?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Application Occasionally Throwing 'Could not Load File or Assembly or one of its Dependencies' Exception]]></title>
    <link href="http://rahulpnath.com/blog/could-not-load-file-or-assembly-or-one-of-its-dependencies/"/>
    <updated>2016-07-01T00:45:05+00:00</updated>
    <id>http://rahulpnath.com/blog/could-not-load-file-or-assembly-or-one-of-its-dependencies</id>
    <content type="html"><![CDATA[<p>We were facing a strange &lsquo;could not load DLL issue&rsquo;, when building and running multiple host projects in Visual Studio (VS 2015), side by side. We had 2 host projects - an NServiceBus worker role project (a console application) and a Web application and a few other projects, a couple of which are shared between both the host projects. It often happened in our team, when running the IIS-hosted Web application, it threw the error :</p>

<p> <span style='color:red'><em>Could not load file or assembly &lsquo;Newtonsoft.Json&rsquo; or one of its dependencies. The located assembly&rsquo;s manifest definition does not match the assembly reference. </em></span>.</p>

<p>The bin folder of the Web application did have a Newtonsoft.Json DLL, but of a different version of it than what was specified in the packages.config/csproj file. On a rebuild, the correct DLL version gets placed into the bin folder and everything works fine. Though the exception was observed by most of the team members, it did not happen always, which was surprising</p>

<blockquote><p><em>Knowing what exactly caused the issue, I created a sample project to demonstrate it for this blog post. All screenshots and code samples are of the sample application.</em></p></blockquote>

<h3>Using AsmSpy to find conflicting assemblies</h3>

<p><a href="https://github.com/mikehadlow/AsmSpy">AsmSpy</a> is a command-line tool to view conflicting assembly references in a given folder. This is helpful to find the different assemblies that refer to different versions of the same assembly in the given folder. Using AsmSpy, on the bin folder of the web application, it showed the conflicting  Newtonsoft.Json DLL references by different projects in the solution. There were three different versions of Newtonsoft Nuget package referred in the whole solution. The web project referred to an older version than the shared project and the worker project.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>asmspy WebApplication1\bin\ nonsystem
</span><span class='line'>
</span><span class='line'>Detailing only conflicting assembly references.
</span><span class='line'>Reference: Newtonsoft.Json
</span><span class='line'>   7.0.0.0 by SharedLibrary
</span><span class='line'>   6.0.0.0 by WebApplication1
</span><span class='line'>   4.5.0.0 by WebGrease
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The assembly binding redirects for both the host projects were correct and using the version of the package that it referred to in the packages.config and project (csproj) file.</p>

<h3>Using MsBuild Structured Log to find conflicting writes</h3>

<p>Using the <a href="https://github.com/KirillOsenkov/MSBuildStructuredLog">Msbuild Structured Log Viewer</a> to analyze what was happening with the build, I noticed the below &lsquo;<em>DoubleWrites</em>&rsquo; happening with Newtonsoft DLL. The double writes list shows all the folders from where the DLL was getting written into the bin folder of the project getting building. In the MSBuild Structured log viewer, a DLL pops up only when there are more than one places from where a DLL is getting written, hence the name &lsquo;<em>Double writes</em>. This is a problem as there is a possibility of one write overriding other, depending on the order of writes, causing DLL version conflicts (which is exactly what&rsquo;s happening here).</p>

<p><img src="http://rahulpnath.com/images/doubleWrite_msbuildLogViewer.png" alt="Double Write Dll conflict" /></p>

<p>But in this specific case, the log captured above does not show the full problem but hints us of a potential problem. The build capture when building the whole solution (sln) shows that there are 2 writes happening from 2 different Newtonsoft package folders, which shows a potential conflict (<em>as shown above</em>). This does not explain the specific error we are facing with the Web application. Running the tool on just the Web application project (csproj), it does not show any DoubleWrites (<em>as shown below</em>).</p>

<p><img class="left" src="http://rahulpnath.com/images/doubleWrite_proj_msbuildLogViewer.png" alt="Double Write Dll conflict" /></p>

<p>This confirms that there is something happening with the Web application bin outputs when we build the worker/shared dependency project.</p>

<h3>Building Web application in Visual Studio</h3>

<p>When building a solution with a Web application project in Visual Studio (VS), I noticed that VS copies all the files from the bin folder of referred projects into the bin of the Web application project. This happens even if you build the shared project alone, as VS notices a change in the files of a dependent project and copies it over. So in this particular case, every time we build the dependent shared project or the worker project (which in turn triggers a build on the shared project), it ended up changing the files in shared projects bin folder, triggering VS to copy it over to the Web application&rsquo;s bin folder. This auto copy happens only for the Web application project and not for the Console/WPF project. (<a href="https://twitter.com/rahulpnath/status/745841691979022336">Yet to find</a> what causes this auto copy on VS build)</p>

<figure>
    <img src="http://rahulpnath.com/images/doubleWrite_dll_conflict.jpg" alt="Double Write Dll conflict" />
    <figcaption><em>Bin folder of Web application and Console application after building Shared project</em></figcaption>
</figure>


<p></p>

<p>Since <strong><em><a href="https://msdn.microsoft.com/en-us/library/aa984582(v=vs.71).aspx">CopyLocal</a></em></strong>, by default was true for the shared project, Newtonsoft DLLs were also getting copied into the shared project bin and in turn into Web applications bin (by VS). Since the Web application did not build during the above rebuild, it now has a conflicting DLL version of Newtonsoft in its bin folder, that does not match the assembly version it depends on, hence throws the exception, the next time I load the Web application from IIS.</p>

<p>I confirmed with other team members on the repro steps for this issue</p>

<ul>
<li>Get the latest code and do a full rebuild from VS</li>
<li>Launch Web app works fine</li>
<li>Rebuild just one of the dependent projects that have Newtonsoft DLL dependency (which has CopyLocal set to true)</li>
<li>Launch Web app throws the error!</li>
</ul>


<p>It was a consistent repro with the above steps.</p>

<p>To fix the issue, I can choose either to update the Newtonsoft Package version across all the projects in the solution, or set CopyLocal to false, to prevent the DLL getting copied into the bin folder of the shared project and end up copied to Web application bin. <strong><em>I chose to set CopyLocal to false in this specific case.</em></strong></p>

<h3>The Sample Application</h3>

<p>Now that we know what exactly causes the issue, it is easy to create a <a href="https://github.com/rahulpnath/Blog/tree/master/DoubleWrites">sample application</a> to reproduce this issue.</p>

<ul>
<li>Create a Web application project and add NuGet package reference to older version of Newtonsoft</li>
<li>Create a console application/WPF application with a newer version of Newtonsoft Package.</li>
<li>Create a shared library project with a newer version of Newtonsoft Nuget package. Add this shared project as  a project reference to both Web application and console/WPF application.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="n">Install-Package</span> <span class="n">Newtonsoft</span><span class="p">.</span><span class="n">Json</span> <span class="n">-ProjectName</span> <span class="n">WebApplication1</span> <span class="n">-Version</span> <span class="n">6</span><span class="p">.</span><span class="n">0</span><span class="p">.</span><span class="n">1</span>
</span><span class='line'><span class="n">Install-Package</span> <span class="n">Newtonsoft</span><span class="p">.</span><span class="n">Json</span> <span class="n">-ProjectName</span> <span class="n">SharedLibrary</span> <span class="n">-Version</span> <span class="n">7</span><span class="p">.</span><span class="n">0</span><span class="p">.</span><span class="n">1</span>
</span><span class='line'><span class="n">Install-Package</span> <span class="n">Newtonsoft</span><span class="p">.</span><span class="n">Json</span> <span class="n">-ProjectName</span> <span class="n">WpfApplication1</span> <span class="n">-Version</span> <span class="n">8</span><span class="p">.</span><span class="n">0</span><span class="p">.</span><span class="n">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Follow the build repro steps above to reproduce the error. Change CopyLocal or update NuGet references and see issue gets resolved.</p>

<p>Hope this helps in case you come across a similar issue!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Own Your URLs; Nothing Else Really Matters]]></title>
    <link href="http://rahulpnath.com/blog/own-your-urls/"/>
    <updated>2016-06-27T05:07:00+00:00</updated>
    <id>http://rahulpnath.com/blog/own-your-urls</id>
    <content type="html"><![CDATA[<p>Over the past couple of years, I have been successful in motivating a couple of my friends to start a blog and I am happy about that. Every time I discuss starting a blog the most common things that come up are what platform to choose, where to host, where to buy the domain, blogging frequency,will anyone even read my posts, what to blog etc.  These were the same questions that I had when I wanted to start a blog and good reasons to procrastinate on for a long time. Over the years having changed the blog platform a couple of times, changing domain name providers, hosting platform, blogging tools here is what I have learned.</p>

<h3>The Golden Rule of Blogging!</h3>

<p>You should have already guessed that from the   post title - The URL where you blog under - Make sure you own it. Buy one of your choices, from any of the <a href="https://www.google.com.au/search?q=buy+domain">domain providers</a> (more on this later) and blog under that. While it&rsquo;s easy to start blogging under popular services like WordPress.com/Blogspot.com, you actually don&rsquo;t own your domain.</p>

<p><a href="https://i.kinja-img.com/gawker-media/image/upload/pgtqyluoyhr1swo4wrmn.jpg">
<img class="center" alt="Own your URL" src="http://rahulpnath.com/images/url.jpg" /></a></p>

<p>I have committed this mistake, of blogging under a URL not owned by me, not <a href="rahulpnath.blogspot.com">once</a> but <a href="https://rahulpnath.wordpress.com">twice</a>,and ended up having to edit the posts to redirect here. (I did not want to pay the providers a monthly fee just for the redirect and didn&rsquo;t have many readers). It&rsquo;s not that these external platforms are bad, but you are just throwing away the flexibility to change platforms (without any extra  charge) when you want to. Owning your URLs allows you to change platforms, hosts, URL formats, redirects anything that you want to and I like to have that flexibility.</p>

<h3>The lesser important things</h3>

<p>Other than the URL that you blog on, other things are not that important and here&rsquo;s why I feel that. If you are completely new to terms like domain, website, hosting etc. check out this article on <a href="http://support.hostgator.com/articles/hosting-guide/what-is-the-difference-between-domains-vs-hosting-vs-website"> the difference between all these</a>.</p>

<h4><strong>Where to buy the domain?</strong></h4>

<p>Choose one and move on with it, even if you do not like it you can change your domain provider anytime. You can <a href="http://www.macworld.com/article/1164499/web-apps/how-to-transfer-your-domain-name-between-hosts.html">transfer from one host to another</a> very easily and I have done that. I started off with GoDaddy for the first year as they seemed the cheapest when I started. But at the time of renewal, I learned that it was just for the first year that it was cheap but for renewals, it was costlier. So I moved on to <a href="https://www.namecheap.com/?aff=101935">Namecheap</a>(<em>affiliate</em>) and am with them ever since. Nothing against GoDaddy though, if it works for you get it from there or somewhere - <strong>Get one right now if you don&rsquo;t own a domain!</strong></p>

<h4><strong>Where to host?</strong></h4>

<p>For a website to be accessible to all, it needs to be running somewhere on the internet and accessible to all, and this is what typically a <a href="https://en.wikipedia.org/wiki/Web_hosting_service">hosting service</a> provides. The hosting and domain provider need not be the same entity, so you can get your hosting space anywhere and link it with your domain. Your domain provider will give you some console/website where you can configure this. There are also free hosts like <a href="https://pages.github.com/">Github</a>, <a href="https://www.tumblr.com/">tumblr</a>, <a href="https://support.google.com/blogger/answer/55374?hl=en">Blogger</a> etc., which allows custom domain mapping for free, unlike <a href="https://en.support.wordpress.com/domains/">wordpress.com</a>. Godaddy, Namecheap, Azure, AWS etc are few popular options for hosting, if not Google to find what matches your need. <a href="http://www.webhostingsecretrevealed.net/blog/web-hosting-guides/switching-web-host/">Switching from one web host to another</a> is even easier than transferring domains, so do not spend much time deciding where to host.</p>

<h4><strong>Which blogging platform to choose?</strong></h4>

<p>There are a large number of blogging platforms available today and it is a very difficult choice to decide on one. If all you are planning to put is a blog with static text, then <a href="https://www.staticgen.com/">static site generators</a> are a good choice and it ends up you hosting just plain <a href="https://github.com/rahulpnath/rahulpnath.com/tree/blog">HTML, Javascript, CSS and images</a>, <a href="http://www.rahulpnath.com/blog/static-generator-is-all-a-blog-needs-moving-to-octopress/">like this one</a> (at time of writing). But this does involve some knowledge of development environments and tools, so ignore it if you are not that person. <a href="https://wordpress.org/">WordPress</a> is easy to start with and is famous for its 5-minute installations. Note that this is not the wordpress.com site which is like a hosting service, but this is the WordPress  platform itself which you can host yourself anywhere you choose to, like <a href="http://www.rahulpnath.com/blog/azure-web-sites-moving-wordpress-to-cloud/">I did for some time in Azure</a>. WordPress is just one that is popular, but there are a lot of <a href="https://www.microsoft.com/web/gallery/categories.aspx?category=Blogs">similar platforms that you can choose from</a>.</p>

<blockquote><p><em>When starting to blog, choose a platform that makes writing easy and not have the overhead of using the platform stop you from writing</em></p></blockquote>

<h4><strong>Who will read my blog?</strong></h4>

<p>This one was the biggest stopper for me - Who cares about what I write? Maybe no one does, but now I write for myself, it makes me happy as I like to share information with others. Blogging helps me understand and explore topics more deeply. Finally, it&rsquo;s a reference that I can always go back to when I face something similar. If you have faced a particular scenario (which might be totally weird) then it is very likely that it is going to be experienced by somebody else too. And Google makes finding things easy, and it will be found!</p>

<h4><strong>Frequency and commitment</strong></h4>

<p>I have been irregular with my blogging schedules (<a href="http://www.rahulpnath.com/blog/archives/">until lately</a>) and used to blog just when motivation strikes. But since the start of this year, I am trying to blog on a schedule. Just experimenting with it and seeing how it goes, so far I am really liking it.It has given a different outlook to work and life in general, as it makes me look more closely for opportunities to generate a blog post. But it&rsquo;s fine even without a commitment and blog irregularly unless you have some expectations of your reader base or generate revenue from the blog. But have a place to go and scribble down whenever you feel to and own that place!</p>

<figure>  
    <img alt="Blog frequency as on 26-06-2-16 http://www.rahulpnath.com" src="http://rahulpnath.com/images/blog_frequency.png" />
    <figcaption><em>Blog frequency as on June,2016 http://www.rahulpnath.com</em></figcaption>
</figure>


<p></p>

<p>It&rsquo;s a good idea to have a schedule to blog , so that you don&rsquo;t just end up writing one post and forget about your blog forever. <a href="https://blog.codinghorror.com/how-to-achieve-ultimate-blog-success-in-one-easy-step/">Pick a schedule that works for you</a> and try to stick with it.</p>

<h4><strong>No Original Content</strong></h4>

<p>It&rsquo;s fine to blog about things that you have not created yourself, the way you learned things or anything you feel to write about, necessarily not even current at the time of writing. For eg., You might be working on Mainframes system and MainFrame is not current and cutting edge now. But that does not mean you should not be blogging about it. Just like you, there are a lot of mainframe developers and it might just help one of them. So don&rsquo;t bother much about the originality of content, it&rsquo;s your experiences and the way you see it- that&rsquo;s always going to be unique.</p>

<blockquote><p><em>&ldquo;A blog is neither a diary nor a journal. Many people think of blogging in relation to those two things, confessional or practical. It is neither but includes elements of both.&rdquo; - Lemn Sissay</em></p></blockquote>

<p><a href="http://www.rahulpnath.com/blog/get-started-with-your-blog/">Every &lsquo;professional&rsquo; should have a blog</a>, and if you don&rsquo;t yet, now is a good time to start one. Sound off in the comments on what you feel about blogging in general, especially if you bought a domain and set up your blog after reading this. It will prove a point for this post!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Could Not Load Assembly msshrtmi.dll?]]></title>
    <link href="http://rahulpnath.com/blog/could-not-load-assembly-msshrtmi-dll/"/>
    <updated>2016-06-19T17:38:37+00:00</updated>
    <id>http://rahulpnath.com/blog/could-not-load-assembly-msshrtmi-dll</id>
    <content type="html"><![CDATA[<p>While migrating a few Azure Cloud Services to Web Jobs, we started facing the error, <span style='color: red;'><em>Could not load assembly &hellip; /msshrtmi.dll</em></span>,for just one of the projects. The error provides the exact path from where it is trying to load the DLL and is the same path from which the process is running. But the location does have the <em>msshrtmi.dll</em>, which for some reason the process is not able to load.</p>

<p><img class="center" src="http://rahulpnath.com/images/msshrtmi_load_error.png" alt="msshrtmi dll load error" /></p>

<div class="alert alert-info" role="alert">
<strong>TL;DR</strong> This error occurred due to an attribute - <i>&lt;Prefer32Bit&gt;false&lt;/Prefer32Bit&gt;</i> - in the csproj file, while the referred msshrtmi dll was 32-bit version. This might not be applicable to you, but since it has happened once it&#8217;s very likely to happen again.
</div>


<p>To our surprise, this was happening only with a specific worker, while all others (around 8) were working fine. All of the workers are generated by the same build process on a server. For some reason (I am still investigating into this) the msshrtmi.dll is added as an external reference in the project and referred from there in all the project files. This was done mainly because we had a few external dependencies that were dependent on specific Azure SDK version (2.2). But this explicit reference should not have caused any issues as all, as the other processes were working fine and only a specific one was failing.</p>

<p>One useful tool to help diagnose why the .NET framework cannot locate assemblies is <a href="https://msdn.microsoft.com/en-us/library/e74a18c4(v=vs.110).aspx">Assembly Binding Log Viewer(Fuslogvw.exe)</a>. The viewer displays an entry for each failed assembly bind. For each failure, the viewer describes the application that initiated the bind; the assembly the bind is for, including name, version, culture and public key; and the date and time of the failure.</p>

<blockquote><p><em>Fuslogvw.exe is automatically installed with Visual Studio. To run the tool, use the Developer Command Prompt with administrator credentials.</em></p></blockquote>

<p>Running <em>fuslogvw</em> with the application shows the assembly binding error, double clicking which gives a details error information, as shown below. This error message gives more details and tells us that the assembly platform or ContentType is invalid.</p>

<p><img class="center" src="http://rahulpnath.com/images/msshrtmi_fuslogvw.png" alt="LOG: Assembly Name is: msshrtmi, Version=2.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
ERR: Invalid assembly platform or ContentType in file (hr = 0x8007000b).
ERR: Run-from-source setup phase failed with hr = 0x8007000b.
ERR: Failed to complete setup of assembly (hr = 0x8007000b). Probing terminated." /></p>

<p>In the Task Manager, the worker with the assembly loading error (last <em>worker</em> in the image below) shows as a 64-bit process, while the others as 32-bit. Since the referred msshrtmi DLL is 32-bit, it explains why it was unable to find the correct platform matching msshrtmi assembly.</p>

<p><img class="center" src="http://rahulpnath.com/images/msshrtmi_task_manager.png" alt="msshrtmi task manager" /></p>

<p><a href="https://msdn.microsoft.com/en-us/library/ms164699(v=vs.110).aspx">CorFlags.exe</a> is used to determine whether an .exe file or .dll file is meant to run only on a specific platform or under WOW64. Running the <em>corflags</em> on all the workers produces the below two results:</p>

<p><mark>corflags Problematic_Worker.exe</mark> <br/>
Version   : v4.0.30319 <br/>
CLR Header: 2.5 <br/>
PE        : PE32 <br/>
CorFlags  : 0x1  <br/>
ILONLY    : 1 <br/>
32BITREQ  : 0 <br/>
<mark>32BITPREF : 0</mark><br/>
Signed    : 0</p>

<p><mark>corflags Worker.exe</mark>    <br/>
Version   : v4.0.30319 <br/>
CLR Header: 2.5 <br/>
PE        : PE32 <br/>
CorFlags  : 0x20003 <br/>
ILONLY    : 1 <br/>
32BITREQ  : 0 <br/>
<mark> 32BITPREF : 1</mark>  <br/>
Signed    : 0</p>

<p>The <em>32BITPREF</em> flag is &lsquo;0&rsquo; for the worker that shows the error, whereas for the rest shows 1. The <a href="https://msdn.microsoft.com/en-us/library/ms164699(v=vs.110).aspx"><em>32BITPREF</em></a> flag indicates that the application runs as a 32 bit process even on 64-bit platforms. This explains why the problematic worker was running as 64-bit process since the flag is turned off.</p>

<blockquote><p><em><a href="http://blogs.microsoft.co.il/sasha/2012/04/04/what-anycpu-really-means-as-of-net-45-and-visual-studio-11/">From .NET 4.5 and Visual Studio 11</a>, the default for most .NET projects is again AnyCPU, but there is more than one meaning to AnyCPU now. There is an additional sub-type of AnyCPU, “Any CPU 32-bit preferred”, which is the new default (overall, there are now five options for the /platform C# compiler switch: x86, Itanium, x64, anycpu, and anycpu32bitpreferred). When using that flavor of AnyCPU, the semantics are the following:</em></p>

<ul>
<li><em>If the process runs on a 32-bit Windows system, it runs as a 32-bit process. IL is compiled to x86 machine code.</em></li>
<li><em>If the process runs on a 64-bit Windows system, it runs as a 32-bit process. IL is compiled to x86 machine code.</em></li>
<li><em>If the process runs on an ARM Windows system, it runs as a 32-bit process. IL is compiled to ARM machine code.</em></li>
</ul>
</blockquote>

<p>All the projects are getting built using the same build scripts, and we are not explicitly turning off/on this compiler option. So the next possible place where any setting for this flag is specified is the <em>csproj</em> file. On the properties of the worker project file (the one that shows error), I see that &lsquo;<em>Prefer 32-bit</em>&rsquo; option is not checked and the csproj file has it explicitly set to false (as shown below). For other projects, this option is checked in Visual Studio and has no entry in the csproj file, which means the flag defaults to true.</p>

<p><img class="center" src="http://rahulpnath.com/images/msshrtmi_prefer32bit.png" alt="msshrtmi prefer 32bit csproj" /></p>

<p><strong><em>Deleting the Prefer32Bit attribute from the csproj and building fixed the assembly loading issue of msshrtmi!</em></strong></p>

<p>Though this ended up being a minor fix (in terms of code change), I learned a lot of different tools that can be used to debug assembly loading issues. It was using these right tools that helped me identify this extra attribute on the csproj file and help solve the issue. So the next time you see such an error , either with mssrhtmi or another DLL, hope this helps to find your way through!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Life Learnings After Being a Parent]]></title>
    <link href="http://rahulpnath.com/blog/life-learnings-after-being-a-parent/"/>
    <updated>2016-06-14T16:48:25+00:00</updated>
    <id>http://rahulpnath.com/blog/life-learnings-after-being-a-parent</id>
    <content type="html"><![CDATA[<blockquote><p><em>His father asked Ethan in a raspy voice, &ldquo;You spend time with your son?&rdquo;</em></p>

<p><em>&ldquo;Much as I can,&rdquo; he’d answered, but his father had caught the lie in his eyes.</em></p>

<p><em>&ldquo;It’ll be your loss, Ethan. Day&rsquo;ll come, when he’s grown and it’s too late, that you&rsquo;d give a kingdom to go back and spend a single hour with your son as a boy. To hold him.Read a book to him. Throw a ball with a person in whose eyes you can do no wrong. He doesn&rsquo;t see your failings yet. He looks at you with pure love and it won&rsquo;t last, so you revel in it while it&rsquo;s here.&rdquo;</em></p>

<p><em>Ethan thinks often of that conversation, mostly when he&rsquo;s lying awake in bed at night and everyone else is asleep, and his life screaming past at the speed of light—the weight of bills and the future and his prior failings and all these moments he&rsquo;s missing—all the lost joy—perched like a boulder on his chest.</em></p>

<p>- <strong> <em><a href="http://amzn.to/1YdxuYm">Pines (The Wayward Pines Trilogy, Book 1)</a></em> </strong></p></blockquote>

<p>Every second that I spent with Gautham is a pure joy and I enjoy it to the most. It&rsquo;s true that I have very less time to spend for myself, but then it also made me realized I have not been using all the time I did have before he was born. I have re-arranged all my schedules so that whenever I am home and he is awake, I do nothing else, but be with him! There has been a lot of learnings and realizations that I have had since the last 20 months.</p>

<p><img class="center" alt="Command Line Application Launcher" src="http://rahulpnath.com/images/gautham.jpg" /></p>

<h4><strong>Curiosity is what keeps us going</strong></h4>

<p>Each day is a new day and he learns at least one new thing. Though to us (the &lsquo;grown-ups&rsquo;), it feels that he is doing the same thing over and over again, for him, it&rsquo;s the same thing in a new perspective. He is curious about everything that he sees and happens around. I often felt that my job was boring, mundane and repetitive and often ended up being the same thing every day. But then I understood that it is not about what you do but how you see what you are doing, that matters. Having at least one new thing to learn from whatever you do daily is a good way to stay motivated.</p>

<blockquote><p><em>Always try to understand one level below your current level of abstraction - happiness lies there!</em></p></blockquote>

<h4><strong>Making the Complex Simple</strong></h4>

<p>Often when playing with him I realize how overwhelming things are in the world and all that he is yet to learn. But that&rsquo;s just me putting my perspective through his eyes. For him, it&rsquo;s always &lsquo;try try and try again&rsquo;. He tries the best he can do something now and improve on it over the days or months.</p>

<blockquote><p><em>How do you eat an elephant? One bite at a time.</em></p></blockquote>

<p>I often get overwhelmed when dealing with something new - learning a new language, buying a car or even planning a vacation. There are innumerable options for everything these days and all that information is available at our fingertips. But then the way to approach these is to break it down into smaller chunks of work and target that individually. Just like writing this blog post is overwhelming for me for all the things that I think I need to write, but then I write section by section or even line by line. Forming <a href="http://amzn.to/1toWtyy">habits</a> to break anything <a href="http://amzn.to/1Xg6biH">complex into smaller pieces</a> and tackling that is a good way to approach tasks.</p>

<h4><strong>Learning to Disconnect</strong></h4>

<p>I certainly do not want Gautham to be entertained with a smartphone, iPad or laptop while I get to do something else. Though it is very much plausible, that&rsquo;s just setting him up the wrong path. It&rsquo;s easy for us to get distracted into all these and not do what matters to us the most - just like all of us hooked into the social media.</p>

<blockquote><p><em><a href="https://medium.com/life-learning/how-to-live-a-life-of-balance-and-high-productivity-bd5434a61c79#.26mh9yvec">Social media is best as planned entertainment rather than unplanned distraction.</a></em></p></blockquote>

<p>The more you stay offline from these &lsquo;addictive&rsquo; social networks the less you will feel the need to check it. Like I do not want my kid to be addicted to these, I do not want it to get in the way of me using that time for something more useful. Staying disconnected from the internet and social network is a good way to get a lot of time for yourself.</p>

<h4><strong>Less is More</strong></h4>

<p>Gautham is happy just with a bottle cap, or a small thread of a shirt and can spend a lot of time playing with it. It&rsquo;s not in what you have but how you see things that you have matters. I was always attracted to the latest and coolest gadgets and often bought them too. Happiness then was directly related to the things I had in possession and how current I was. I have learned to get over that minimize my expense to what matters most. Though it&rsquo;s a bit late , the saying &lsquo;<em>Do not save what is left after spending but spend what is left after saving</em>&rsquo;, starts making a lot of sense. The fact that there is someone who is completely dependent on me(/wife) brings in a lot of responsibility to life which was missing earlier and puts savings in front of expenses.</p>

<h4><strong>Time is Valuable</strong></h4>

<p>One of the most precious things that I have is time. I used to while away time earlier but now I have very limited of it for myself that I try to spend it usefully. Having your <a href="http://zenhabits.net/purpose-your-day-most-important-task/">Most Important Task</a> (MIT) defined is important and helps prioritize your tasks for the day. If you feel a lot of time is getting lost, while sitting down to work (on a laptop for me) use monitoring tools like <a href="https://www.rescuetime.com/">Rescue Time</a> to understand your daily habits and improve on it.</p>

<blockquote><p><em><a href="http://quoteinvestigator.com/2013/10/30/inspire-nine/">Someone once asked</a> Somerset Maugham if he wrote on a schedule or only when struck by inspiration. “I write only when inspiration strikes,” he replied. “Fortunately, it strikes every morning at nine o’clock sharp.”</em></p></blockquote>

<p>Habits decide what we do every day so it&rsquo;s very important that we form good ones. Though it takes effort, it is possible to <a href="http://charlesduhigg.com/how-habits-work/">rewire any of your habits</a> just by giving attention to it.</p>

<h4><strong>Learning from Mistakes</strong></h4>

<p>When you try, you fail and you fail again and again until you succeed. When you don&rsquo;t try you fail - you fail to succeed! <a href="http://www.psychologyinaction.org/2012/11/22/infants-learn-to-walk-by-learning-to-fall/">Infants learn to walk by learning to fall</a>. It&rsquo;s easy to get into a comfort zone and stay there be it in your jobs or elsewhere. Intentionally putting yourself into a position to learn and grow is important. I spent a large part of my time at the workplace. So I try to own up a lot more unfamiliar things and get exposed more - It&rsquo;s Ok to fail!</p>

<p>Parenting is hard but it&rsquo;s also real fun. You get to learn a lot yourself while on the journey and <strong><em>they give back the initial years of your life</em></strong>. Let me wrap this up quickly as he is about to wake up and the last thing I want is to have all the keys pulled off my keyboard!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Azure Key Vault using Azure Resource Manager (ARM) Templates]]></title>
    <link href="http://rahulpnath.com/blog/managing-azure-key-vault-using-azure-resource-manager-arm-templates/"/>
    <updated>2016-06-05T06:15:31+00:00</updated>
    <id>http://rahulpnath.com/blog/managing-azure-key-vault-using-azure-resource-manager-arm-templates</id>
    <content type="html"><![CDATA[<p>Creating and managing Azure Key Vault was mostly supported through PowerShell cmdlets <a href="http://www.rahulpnath.com/blog/getting-started-with-azure-key-vault/">initially</a>, but there are multiple ways of achieving this now - <a href="http://www.rahulpnath.com/blog/managing-azure-key-vault-over-the-rest-api/">REST API</a>, <a href="http://www.rahulpnath.com/blog/how-the-deprecation-of-switch-azuremode-affects-azure-key-vault/">PowerShell</a>, CLI or ARM templates. In this post, we will look into how we can use <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-authoring-templates/">Azure Resource Manager</a> (ARM) templates to create and manage a Key Vault.</p>

<h3>Azure Resource Manager and Templates</h3>

<p>Simply put, the <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-overview/">Azure Resource Manager</a>(ARM) allows to group different resources in your solution that form a logical unit and manage them together. It allows to spin up all the resources required for your system and deploy them as and when required. You can achieve this using custom PowerShell scripts or creating a template (in JSON format) - Azure Resource Manager Template.</p>

<blockquote><p><em>Within the ARM template, you define the infrastructure for your app, how to configure that infrastructure, and how to publish your app code to that infrastructure.</em></p></blockquote>

<p>You can <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-manager-export-template/">export a template from existing resources</a> for a starting point and then work off that. But in this post, I will start with an empty template as it helps to understand all the template parts. A template is nothing but a JSON file with a specific <a href="http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#">schema</a>. All templates have the below format where a few of the elements are not mandatory. If you are not familiar with the template format and the different elements that make it, I&rsquo;ll wait while you read more about the <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-authoring-templates/#template-format">Template format</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="nt">&quot;$schema&quot;</span><span class="p">:</span> <span class="s2">&quot;http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;contentVersion&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nt">&quot;parameters&quot;</span><span class="p">:</span> <span class="p">{</span>  <span class="p">},</span>
</span><span class='line'>   <span class="nt">&quot;variables&quot;</span><span class="p">:</span> <span class="p">{</span>  <span class="p">},</span>
</span><span class='line'>   <span class="nt">&quot;resources&quot;</span><span class="p">:</span> <span class="p">[</span>  <span class="p">],</span>
</span><span class='line'>   <span class="nt">&quot;outputs&quot;</span><span class="p">:</span> <span class="p">{</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Key Vault ARM Template</h3>

<p>The <a href="https://github.com/Azure/azure-resource-manager-schemas/blob/c301d6ed1d8876cad60af1f81d420e9249a80594/schemas/2015-06-01/Microsoft.KeyVault.json">Key Vault schema</a> is authored here and is part of the root schema URL that we had <a href="http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#">seen above</a>. Though it might not be able to fully understand the schema details, it helps to understand at a high level what are the different parameters that are allowed when defining a Key Vault. At present, the schema allows only creating <a href="http://www.rahulpnath.com/blog/moving-sensitive-information-from-configuration-file-to-azure-key-vault/">Secrets</a> within a Key Vault and <a href="http://www.rahulpnath.com/blog/how-the-deprecation-of-switch-azuremode-affects-azure-key-vault/">Keys have to be created separately</a>.</p>

<p>Like we did using the <a href="http://www.rahulpnath.com/blog/managing-azure-key-vault-over-the-rest-api/">REST API</a>, with this ARM template I want to create or update a Key Vault with a specified set of properties (like Vault Name, tenant etc), the access policies to specify the AD objects (applications/users) that have access to the Vault and create a few secrets.</p>

<p>Create a new JSON file with any name you like (<em>azuredeploy.json</em>) and copy the above template structure into it. For the content version, you can use any value that you like for e.g. 1.0.0. Next, we need to define the parameters that we need, that are specific to each Key Vault deployment. Without parameters, we will be always deploying the resources with the same name and properties, so it is a good practice to externalize it and use it as required. <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-authoring-templates/#parameters">Parameters</a> have a defined structure and allows to have basic validation for the input values. All parameters that does not have a <em>defaultValue</em> needs to be passed in while using the template.</p>

<h4><strong>Parameters</strong></h4>

<p>Let&rsquo;s see a few of the different parameter types that we use in this template. The <em>keyVaultName</em> parameter is a simple string value and is required to be passed in as it does not have a default value specified, where as the <em>enableVaultForVolumeEncryption</em> is an optional parameter and defaults to false. The parameters <em>accessPolicies</em> and <em>secrets</em> are of type <em>array</em> and takes in any valid JSON array. But in this specific case, I want it to be in a specific format but I am yet not sure if I can specify a format structure for the JSON input. Sound off in the comments if you know of a way.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;parameters&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;keyVaultName&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;string&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;metadata&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Name of the Key Vault&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;accessPolicies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;array&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;defaultValue&quot;</span><span class="p">:</span> <span class="s2">&quot;{}&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;metadata&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Access policies object {&quot;</span><span class="err">tenantId</span><span class="s2">&quot;:&quot;&quot;,&quot;</span><span class="err">objectId</span><span class="s2">&quot;:&quot;&quot;,</span>
</span><span class='line'><span class="s2">                    &quot;</span><span class="err">permissions</span><span class="s2">&quot;:{&quot;</span><span class="err">keys</span><span class="s2">&quot;:[&quot;&quot;],&quot;</span><span class="err">secrets</span><span class="s2">&quot;:[&quot;&quot;]}}&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;enableVaultForVolumeEncryption&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;bool&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;defaultValue&quot;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;metadata&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;Specifies if the vault is enabled for volume encryption&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;secrets&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;array&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;defaultValue&quot;</span><span class="p">:</span> <span class="s2">&quot;{}&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;metadata&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;all secrets {&quot;</span><span class="err">secretName</span><span class="s2">&quot;:&quot;&quot;,&quot;</span><span class="err">secretValue</span><span class="s2">&quot;:&quot;&quot;}&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="err">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4><strong>Resources</strong></h4>

<p>The Resources section of the template defines the resources to be deployed or updated and takes in an array of values. Resource manager supports two modes of deployment - <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-template-deploy/#incremental-and-complete-deployments">Incremental and Complete deployment</a> - and the way you define the resources here will affect what and how things get deployed. The template supports the use of certain <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-authoring-templates/#expressions-and-functions">Expressions and Functions</a>, to enable dynamic creation of values. Expressions are enclosed in square brackets ([]) and can appear anywhere is a JSON string value and evaluated when the template is deployed. To use a literal string that starts with a bracket [, use two brackets [[.</p>

<p>The <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-template-functions/#parameters">parameter function</a> is used to get the value of a parameter that is passed in. I use this to access the Vault name, accessPolicies and other parameters that we had defined earlier. Since accessPolicies in the template expects an array I pass in the parameter object as is to it.</p>

<p>Secrets are defined as nested resources within the Key Vault and can be defined as a nested property within the Key Vault resource as shown in the <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-manager-template-keyvault/#examples">example here</a>. Since here we are interested in dynamically generating the Secrets based on the array value passed in as <em>secrets</em> parameter, I use the <em><a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-create-multiple/#copy-copyindex-and-length">copy, copyIndex and length function</a></em> to iterate through the array and generate the required template. The <em>copy</em> function iterates and produces the same template structure with different values as specified by the parameter values.</p>

<p>Since the Secret is defined as a separate resource, <em>name</em> property needs to indicate that it is a nested resource, hence we are concatenating the Vault Name with it. Without that I was getting the error :</p>

<p><span style='color: red;'><em>A nested resource type must have an identical number of segments as its resource name. A root resource type must have segment length one greater than its resource name.</em></span>.</p>

<p>The <em><a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-define-dependencies/#dependson">dependsOn</a></em> element specifies that the Secret resource is dependent on the Key Vault resource.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'> <span class="s2">&quot;resources&quot;</span><span class="err">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;Microsoft.KeyVault/vaults&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;[parameters(&#39;keyVaultName&#39;)]&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;accessPolicies&quot;</span><span class="p">:</span> <span class="s2">&quot;[parameters(&#39;accessPolicies&#39;)]&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="err">...</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;Microsoft.KeyVault/vaults/secrets&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;[concat(parameters(&#39;keyVaultName&#39;), &#39;/&#39;, parameters(&#39;secrets&#39;)[copyIndex()].secretName)]&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;properties&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="s2">&quot;[parameters(&#39;secrets&#39;)[copyIndex()].secretValue]&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nt">&quot;dependsOn&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="s2">&quot;[concat(&#39;Microsoft.KeyVault/vaults/&#39;, parameters(&#39;keyVaultName&#39;))]&quot;</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>        <span class="nt">&quot;copy&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;secretsCopy&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;count&quot;</span><span class="p">:</span> <span class="s2">&quot;[length(parameters(&#39;secrets&#39;))]&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Deploying with ARM Templates</h3>

<p>To deploy the ARM template we need to pass in the required parameters and run the template.</p>

<h4><strong>Parameter File</strong></h4>

<p>Parameters can be passed in individually or as a <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-template-deploy/#parameter-file">Parameter File</a>. Parameter file (<em>azuredeploy.parameters.json</em>) is a JSON file with a specific format. Below is a sample parameter file for our Key Vault ARM template. We can have different such templates for each of our deployment environments with values specific for the environment.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;$schema&quot;</span><span class="p">:</span> <span class="s2">&quot;https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;contentVersion&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;parameters&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;keyVaultName&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="s2">&quot;NewARMVaultP&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nt">&quot;tenantId&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nt">&quot;accessPolicies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="nt">&quot;tenantId&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;TENANT ID&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nt">&quot;objectId&quot;</span><span class="p">:</span> <span class="s2">&quot;&lt;AD OBJECT ID&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nt">&quot;permissions&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nt">&quot;keys&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;all&quot;</span><span class="p">],</span>
</span><span class='line'>                        <span class="nt">&quot;secrets&quot;</span><span class="p">:</span> <span class="p">[</span><span class="s2">&quot;all&quot;</span><span class="p">]</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="p">{</span> <span class="err">...</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nt">&quot;secrets&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;value&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="nt">&quot;secretName&quot;</span><span class="p">:</span> <span class="s2">&quot;ConnectionString&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="nt">&quot;secretValue&quot;</span><span class="p">:</span> <span class="s2">&quot;SecureString1&quot;</span>
</span><span class='line'>                <span class="p">},</span>
</span><span class='line'>                <span class="p">{</span> <span class="err">...</span> <span class="p">}</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4><strong>Deployment</strong></h4>

<p>The ARM template along with the parameter file can be deployed in different ways - <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-template-deploy/">PowerShell, Azure CLI, REST API, Visual Studio or from Azure Portal</a>. Using PowerShell we can deploy as below. The <em><a href="https://msdn.microsoft.com/en-us/library/mt679014.aspx">Test-AzureRmResourceGroupDeployment</a></em> cmdlet tests if the template file and parameter file are in correct format. This is mostly useful when authoring the template. <em><a href="https://msdn.microsoft.com/en-us/library/mt603823.aspx">New-AzureRmResourceGroupDeployment</a></em> deploys using the given template file and parameters.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nb">Test-AzureRmResourceGroupDeployment</span> <span class="n">-ResourceGroupName</span> <span class="n">SharedGroup</span> <span class="n">-TemplateFile</span> <span class="p">.\</span><span class="n">azuredeploy</span><span class="p">.</span><span class="n">json</span>
</span><span class='line'>        <span class="n">-TemplateParameterFile</span> <span class="p">.\</span><span class="n">azuredeploy</span><span class="p">.</span><span class="n">parameters</span><span class="p">.</span><span class="n">json</span> <span class="n">-Verbose</span>
</span><span class='line'><span class="nb">New-AzureRmResourceGroupDeployment</span> <span class="n">-ResourceGroupName</span> <span class="n">SharedGroup</span> <span class="n">-TemplateFile</span> <span class="p">.\</span><span class="n">azuredeploy</span><span class="p">.</span><span class="n">json</span>
</span><span class='line'>         <span class="n">-TemplateParameterFile</span> <span class="p">.\</span><span class="n">azuredeploy</span><span class="p">.</span><span class="n">parameters</span><span class="p">.</span><span class="n">json</span> <span class="n">-Verbose</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://armviz.io/#">ARM Template Visualizer</a> (ArmViz) is a visual way of editing and managing ARM templates and can be useful when dealing with a large number of resource deployments in a template. Also check out some <a href="https://azure.microsoft.com/en-us/documentation/articles/best-practices-resource-manager-design-templates/">Good practices for designing templates</a>. Most of the template code above is <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-manager-template-keyvault/">based off this example here</a>. <strike>I will try to push this template into the <a href="https://github.com/Azure/azure-quickstart-templates">Azure Quickstart Templates</a> but meanwhile it is <a href="https://github.com/rahulpnath/Blog/tree/master/KeyVault%20ARM%20Template">available here</a>.</strike> The ARM template is available with the <a href="https://azure.microsoft.com/en-us/documentation/templates/201-key-vault-secret-create/">Azure Quickstart Templates</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Azure Key Vault over the REST API]]></title>
    <link href="http://rahulpnath.com/blog/managing-azure-key-vault-over-the-rest-api/"/>
    <updated>2016-05-25T06:23:39+00:00</updated>
    <id>http://rahulpnath.com/blog/managing-azure-key-vault-over-the-rest-api</id>
    <content type="html"><![CDATA[<p>Creating and managing Azure Key Vault was mostly supported through PowerShell cmdlets <a href="http://www.rahulpnath.com/blog/getting-started-with-azure-key-vault/">initially</a>, but there are multiple ways of achieving this now - REST API, <a href="http://www.rahulpnath.com/blog/how-the-deprecation-of-switch-azuremode-affects-azure-key-vault/">PowerShell</a>, CLI or <a href="http://www.rahulpnath.com/blog/managing-azure-key-vaults-using-azure-resource-manager-arm-templates/">ARM templates</a>. In this post, we will look into how we can use the REST API to create and manage a Key Vault.</p>

<h3>Azure Resource Manager API</h3>

<p>The <a href="https://msdn.microsoft.com/en-AU/library/azure/dn790568.aspx">Azure Resource Manager API</a> provides programmatic access to manage Azure services that support <a href="https://azure.microsoft.com/en-us/documentation/articles/resource-group-overview/">Resource Manager</a>. Since Key Vault supports Resource Manager, we will be using it. Any requests to the API must be authenticated and can be done using an Azure AD application. Most of the steps to create an AD application are same as we saw when creating an AD application to <a href="http://www.rahulpnath.com/blog/authenticating-a-client-application-with-azure-key-vault/">Authenticate a Client Application with Azure Key Vault</a>. From the &lsquo;<em>permissions to other applications</em>&rsquo; tab in portal (as shown below), we can give the application access to Management API&rsquo;s.</p>

<p>To get the token to access the Management API resource (<em><a href="https://management.azure.com">https://management.azure.com</a> </em>), I use the <a href="https://www.nuget.org/packages/Microsoft.IdentityModel.Clients.ActiveDirectory">ADAL library</a> with the required data. All the information that needs to be passed to the ADAL library is available under the AD application in the azure portal (as shown below).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">string</span> <span class="n">token</span> <span class="p">=</span> <span class="k">await</span> <span class="n">GetAccessToken</span><span class="p">(</span>
</span><span class='line'>                <span class="s">&quot;https://login.microsoftonline.com/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&quot;https://management.azure.com/&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">);</span>
</span><span class='line'> <span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">GetAccessToken</span><span class="p">(</span><span class="kt">string</span> <span class="n">authority</span><span class="p">,</span> <span class="kt">string</span> <span class="n">resource</span><span class="p">,</span> <span class="kt">string</span> <span class="n">scope</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">adCredential</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ClientCredential</span><span class="p">(</span><span class="n">APPLICATION_ID</span><span class="p">,</span> <span class="n">APPLICATION_SECRET</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">authenticationContext</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AuthenticationContext</span><span class="p">(</span><span class="n">authority</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="k">await</span> <span class="n">authenticationContext</span><span class="p">.</span><span class="n">AcquireTokenAsync</span><span class="p">(</span><span class="n">resource</span><span class="p">,</span> <span class="n">adCredential</span><span class="p">)).</span><span class="n">AccessToken</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><em>Earlier authentication requests were served from <a href="https://login.windows.net">https://login.windows.net</a> (authority URL) which is <a href="https://blogs.technet.microsoft.com/ad/2015/03/06/simplifying-our-azure-ad-authentication-flows/">now updated</a> to <a href="https://login.microsoftonline.com">https://login.microsoftonline.com</a> .</em></p></blockquote>

<p><img src="http://rahulpnath.com/images\service_management_adAccess.png" class="center" alt="AD Application access to Azure Service Management API"></p>

<h3>Key Vault Management Client</h3>

<p>The <a href="https://www.nuget.org/packages/Microsoft.Azure.Management.KeyVault/">Microsoft.Azure.Management.KeyVault</a> NuGet package, provides capabilities to connect to the Management API&rsquo;s and manage the Vaults. With the NuGet reference added I can use the <em><a href="https://github.com/Azure/azure-sdk-for-net/blob/master/src/ResourceManagement/KeyVaultManagement/KeyVaultManagement/Generated/KeyVaultManagementClient.cs">KeyVaultManagementClient</a></em>.</p>

<blockquote><p><em>Much of the SDK code is generated  using <a href="https://github.com/azure/autorest">Autorest</a>, from the REST API&rsquo;s metadata spec&rsquo;s in Swagger format.</em></p></blockquote>

<p>With the Azure Subscription Id and the token from the previous step a TokenCloudCredentials is created that is used to connect the Key Vault Management Client.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">string</span> <span class="n">token</span> <span class="p">=</span> <span class="k">await</span> <span class="n">GetAccessToken</span><span class="p">(</span>
</span><span class='line'>    <span class="s">&quot;https://login.microsoftonline.com/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&quot;https://management.azure.com/&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">tokenCredentials</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TokenCloudCredentials</span><span class="p">(</span><span class="n">SUBSCRIPTION_ID</span><span class="p">,</span> <span class="n">token</span><span class="p">);</span>
</span><span class='line'><span class="kt">var</span> <span class="n">keyVaultManagementClient</span> <span class="p">=</span> <span class="k">new</span> <span class="n">KeyVaultManagementClient</span><span class="p">(</span><span class="n">tokenCredentials</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Key Vaults exists under a Resource Group and for it to be accessible using the AD application authenticated token, we need to grant permission to the application. Just like we managed <a href="http://www.rahulpnath.com/blog/managing-user-permissions-for-key-vault/">User Permissions for Key Vault</a> we can give the AD application access to the Resource Group. We can do this from the new portal (as shown in the other post) or using the <em>New-AzureRmRoleAssignment</em> PowerShell cmdlet. <em>Get-AzureRmADServicePrincipal</em> is used o get the ObjectId of an existing application passing the application name as SearchString. I have yet not found a better way to find the application ObjectId. Please drop a comment if you know of any.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="nb">Get-AzureRmADServicePrincipal</span>  <span class="n">-SearchString</span> <span class="s1">&#39;AD Application Name&#39;</span>
</span><span class='line'><span class="nb">New-AzureRmRoleAssignment</span> <span class="n">-ObjectId</span> <span class="p">&lt;</span><span class="n">AD</span> <span class="n">Application</span> <span class="n">Object</span> <span class="n">Id</span><span class="p">&gt;</span>
</span><span class='line'>     <span class="n">-RoleDefinitionName</span> <span class="n">Reader</span> <span class="n">-ResourceGroupName</span> <span class="n">SharedGroup</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Creating New Key Vault</h3>

<p>We have all the required permissions setup, to create a key vault using the KeyVaultManagament client library. Using this is straightforward as shown below.
The <em><a href="https://github.com/Azure/azure-content/blob/master/articles/resource-manager-template-keyvault.md#sku">Sku</a></em> is used to specify <a href="https://azure.microsoft.com/en-us/pricing/details/key-vault/">Key vault service tier</a> - &lsquo;Standard&rsquo; or &lsquo;Premium&rsquo;. For HSM backed keys it is Premium. Family on Sku object takes in a hardcoded value of &lsquo;A&rsquo;. <em><a href="https://github.com/Azure/azure-content/blob/master/articles/resource-manager-template-keyvault.md#propertiesaccesspolicies-object">AccessPolicies</a></em> specify the AD object identifier of user or application that can access the vault. In this case, I am adding the current AD application with full (<a href="https://github.com/Azure/azure-content/blob/master/articles/resource-manager-template-keyvault.md#propertiesaccesspoliciespermissions-object"><em>all</em></a>) access to Keys and Secrets. Adding an access policy in same as using the <a href="https://msdn.microsoft.com/en-us/library/mt603625.aspx"><em>Set-AzureRmKeyVaultAccessPolicy</em></a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">parameters</span> <span class="p">=</span> <span class="k">new</span> <span class="n">VaultCreateOrUpdateParameters</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Location</span> <span class="p">=</span> <span class="s">&quot;southeast asia&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">Properties</span> <span class="p">=</span> <span class="k">new</span> <span class="n">VaultProperties</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Sku</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Sku</span> <span class="p">{</span> <span class="n">Family</span> <span class="p">=</span> <span class="s">&quot;A&quot;</span><span class="p">,</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">&quot;Standard&quot;</span> <span class="p">},</span>
</span><span class='line'>        <span class="n">TenantId</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">TENANT_ID</span><span class="p">),</span>
</span><span class='line'>        <span class="n">AccessPolicies</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">AccessPolicyEntry</span><span class="p">&gt;()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">new</span> <span class="n">AccessPolicyEntry</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">TenantId</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">TENANT_ID</span><span class="p">),</span>
</span><span class='line'>                        <span class="n">ObjectId</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">AD_OBJECT_ID</span><span class="p">),</span>
</span><span class='line'>                        <span class="n">PermissionsToKeys</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span> <span class="s">&quot;all&quot;</span> <span class="p">},</span>
</span><span class='line'>                        <span class="n">PermissionsToSecrets</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span> <span class="s">&quot;all&quot;</span> <span class="p">}</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">var</span> <span class="n">vaultFromCode</span> <span class="p">=</span> <span class="k">await</span> <span class="n">keyVaultManagementClient</span><span class="p">.</span><span class="n">Vaults</span>
</span><span class='line'>        <span class="p">.</span><span class="n">CreateOrUpdateAsync</span><span class="p">(</span><span class="s">&quot;SharedGroup&quot;</span><span class="p">,</span> <span class="s">&quot;VaultFromCode&quot;</span><span class="p">,</span> <span class="n">parameters</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Managing Existing Key Vaults</h3>

<p><strong>Update a Key Vault</strong></p>

<p>When updating an existing Key Vault, the full state (<em>VaultCreateOrUpdateParameters</em>) must be passed back and not just the update. To add a new <em>AccessPolicyEntry</em>, the existing policy entry values must also be passed back. In the code below, I get the existing state of the Key Vault using the <em>Get</em> and use the current vault properties to add in the new AccessPolicyEntry.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">keyVault</span> <span class="p">=</span> <span class="p">(</span><span class="k">await</span> <span class="n">keyVaultManagementClient</span><span class="p">.</span><span class="n">Vaults</span>
</span><span class='line'>   <span class="p">.</span><span class="n">GetAsync</span><span class="p">(</span><span class="s">&quot;SharedGroup&quot;</span><span class="p">,</span> <span class="s">&quot;VaultFromCode&quot;</span><span class="p">)).</span><span class="n">Vault</span><span class="p">;</span>
</span><span class='line'>            <span class="n">parameters</span> <span class="p">=</span> <span class="k">new</span> <span class="n">VaultCreateOrUpdateParameters</span><span class="p">();</span>
</span><span class='line'>            <span class="n">parameters</span><span class="p">.</span><span class="n">Location</span> <span class="p">=</span> <span class="n">keyVault</span><span class="p">.</span><span class="n">Location</span><span class="p">;</span>
</span><span class='line'>            <span class="n">parameters</span><span class="p">.</span><span class="n">Properties</span> <span class="p">=</span> <span class="n">keyVault</span><span class="p">.</span><span class="n">Properties</span><span class="p">;</span>
</span><span class='line'>            <span class="n">parameters</span><span class="p">.</span><span class="n">Properties</span><span class="p">.</span><span class="n">AccessPolicies</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">new</span> <span class="n">AccessPolicyEntry</span>
</span><span class='line'>   <span class="p">{</span>
</span><span class='line'>       <span class="n">TenantId</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">TENANT_ID</span><span class="p">),</span>
</span><span class='line'>       <span class="n">ObjectId</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="s">&quot;AD Object IDentifier&quot;</span><span class="p">),</span>
</span><span class='line'>       <span class="n">PermissionsToKeys</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span> <span class="s">&quot;get&quot;</span> <span class="p">},</span>
</span><span class='line'>       <span class="n">PermissionsToSecrets</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span> <span class="s">&quot;get&quot;</span> <span class="p">}</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>            <span class="p">);</span>
</span><span class='line'><span class="k">await</span> <span class="n">keyVaultManagementClient</span><span class="p">.</span><span class="n">Vaults</span><span class="p">.</span><span class="n">CreateOrUpdateAsync</span><span class="p">(</span><span class="s">&quot;SharedGroup&quot;</span><span class="p">,</span> <span class="s">&quot;VaultFromCode&quot;</span><span class="p">,</span> <span class="n">parameters</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Delete a Key Vault</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">await</span> <span class="n">keyVaultManagementClient</span><span class="p">.</span><span class="n">Vaults</span><span class="p">.</span><span class="n">DeleteAsync</span><span class="p">(</span><span class="s">&quot;SharedGroup&quot;</span><span class="p">,</span> <span class="s">&quot;VaultFromCode&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hope this helps you manage Azure Key Vault using the REST API.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make it Easy for the New Person Joining the Team - Have a Project Ramp up Plan]]></title>
    <link href="http://rahulpnath.com/blog/make-it-easy-for-the-new-person-joining-your-team-have-a-project-ramp-up-plan/"/>
    <updated>2016-05-18T12:38:24+00:00</updated>
    <id>http://rahulpnath.com/blog/make-it-easy-for-the-new-person-joining-your-team-have-a-project-ramp-up-plan</id>
    <content type="html"><![CDATA[<p>Recently I was in a discussion with my friend/colleague on conducting a few ramp up sessions for the new hires in our team. The discussion went as below,</p>

<blockquote><p><em>Me: We should hold a few sessions to make the new guys in team more comfortable</em></p>

<p><em>Friend: It&rsquo;s too early for it. We should let them find their own way and not &lsquo;spoon-feed&rsquo; them with information.</em></p>

<p><em>Me: But we are not &lsquo;spoon-feeding&rsquo; them, we are just making their learning process faster and giving then an overview on how all the technology fits together in our world of things.</em></p>

<p><em>Friend: But &lsquo;I did not have any ramp up when I joined, and I felt it was better to have learned it on my own, though it took a lot more time.</em></p></blockquote>

<p><a href="http://www.mindtickle.com/wp-content/uploads/2014/02/new_employee_orientation_business_strategy_research.png" class="center" title="Image, from http://www.mindtickle.com/wp-content/uploads/2014/02/new_employee_orientation_business_strategy_research.png"><img src="http://rahulpnath.com/images\rampup_plan.png" class="center" alt="Rampup Plan"></a></p>

<p>Just like there are company-wide induction/onboarding sessions, I have always felt that project specific onboarding plans are also required and help new hires be part of the team and be more productive with their day-to-day activities faster. As mentioned in this <a href="http://www.fastcompany.com/3029820/work-smart/infographic-the-real-ways-to-hold-on-to-new-hires/3">article</a>, <em>New hires care more about effective job training and clear guidelines, and it&rsquo;s time you provide that for them.</em> It&rsquo;s best to have a plan in place when you have someone new joining your team and you along with the team are the best people to put that plan together.</p>

<h3>Boy Scout Rule</h3>

<p>The Boy Scouts have a <a href="http://programmer.97things.oreilly.com/wiki/index.php/The_Boy_Scout_Rule">rule</a> - <em>&ldquo;Always leave the campground cleaner than you found it.&rdquo;</em>  New hires are like &lsquo;new camp group&rsquo; at a campground, so it&rsquo;s the duty of the &lsquo;existing team&rsquo; there to make it a good experience for them.</p>

<blockquote><p><em>&lsquo;Refactor&rsquo; your experiences to make it better for the next person who is about to take on the same journey</em></p></blockquote>

<p>It&rsquo;s not that my friend was intentionally trying not to pass on any information, but he felt that learning on their own would be better. Even I agree with him that learning on your own is far better than &lsquo;spoon-feeding&rsquo; - but a ramp up plan is not spoon-feeding. A ramp up plan is only to speed up the learning process and to make it more comfortable for someone joining new.</p>

<h3>When to create the plan?</h3>

<p>The need for such a plan is there only when there has been enough progress made on the project, after which there is someone new joining the team. So when a new hire is scheduled to join is a good time to create the &lsquo;draft&rsquo; plan. Once the new hire has gone through it and updated back with his own experiences it could become the first version of the plan, which can then be confidently shared to anyone joining after as it has worked for at least one person.</p>

<h3>What should be there in the plan</h3>

<p><em>It depends!</em></p>

<p>It&rsquo;s totally up to the team to decide what should be there in the plan. Some of the things that I usually have are</p>

<ul>
<li><p><strong>Overview of the project and what problem it is trying to solve</strong></p>

<p>It&rsquo;s really important that everyone on the team knows what the application is trying to solve and have a common goal to work towards. It&rsquo;s not just about the code we write but about the problem we are solving and that needs to be clearly defined. I would record a video, when this is done the first time and share it with anyone joining after that, as most of the core concepts of a project rarely change. There could be a follow-up session post watching the video, to also have a quick walk through and fill any missing gaps.</p></li>
<li><p><strong>Introduction to various technologies used in the project and how everything fits together</strong></p>

<p>Technology changes so fast these days that it is nearly impossible to stay updated with all the available options. So a walk through of the different technologies and pointers to resources that worked for you and the team will be of help. If there are any specific libraries, frameworks getting used, an introduction to those should also help.</p></li>
<li><p><strong>Release cycle and Release management</strong>
Every project has its own model of delivering the end product and everyone on the team should understand this process well. Having a continuous build is becoming more common these days and helps reduce the complexity of release. An end to end walk-through of the deployment process helps understand the application better and provides exposure to all the moving parts in the system.</p></li>
<li><p><strong>Environment/Machine setup</strong>
Software installation is one of the biggest pain when setting up a new machine for a project, especially with having specific versions of the software. Having a documented list of all the project dependencies (hardware and software) makes setting the project environment easy. It&rsquo;s preferable to have these <a href="https://chocolatey.org/">scripted</a>. Have a common place, where you can find links to all the various environments (dev, at,prod etc) and related resources.</p></li>
<li><p><strong>Patterns and Conventions</strong>
Every project has its own conventions and certain core patterns that are followed. It&rsquo;s good to have these patterns available for reference so that it helps understand the code better and helps reduce code-review cycles. Than having one big boring document, what I prefer more is to have multiple blog articles targeting each of those. I try to generalize commonly used patterns in the projects that I have worked on and create blog posts. This also helps generate content for <a href="http://www.rahulpnath.com/blog/get-started-with-your-blog/">your blog</a>.</p></li>
<li><p><strong>Tips &amp; Tricks</strong>
This could range from how to easily navigate the code base, scripts to do some commonly occurring task and general things to keep an eye for.</p></li>
</ul>


<p>These are just some of the things I generally try to include in a ramp up plan but as said it totally depends on the team and the project.</p>

<h3>Sharing the plan</h3>

<p>Depending on the plan, if it has confidential information, you could split this into two (or more) different documents and share it at different phases of onboarding. Once a new hire is confirmed it&rsquo;s good to share the parts which do not have any confidential information. Technology stack, conventions used, machine setup (<a href="https://en.wikipedia.org/wiki/Bring_your_own_device">BYOD</a>) are usually not confidential and can be shared well before actual employment. Once all employment agreements are in place the rest too can be shared. It&rsquo;s also a good idea to have some walk-through of the plan itself to make it easier to follow.</p>

<h3>Iterate and Improve</h3>

<p>Updating back with the experiences of the people using the plan is important to keep it current and valuable. Suggesting improvements and updates should be an item in the plan so that this does not get missed. To make updates manageable, the plan must be accessible to all and preferably version controlled if they are documents.</p>

<p>What are your thoughts on having a ramp up plan?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactJS: Setting up the Environment]]></title>
    <link href="http://rahulpnath.com/blog/reactjs-setting-up-the-environment/"/>
    <updated>2016-05-12T04:27:36+00:00</updated>
    <id>http://rahulpnath.com/blog/reactjs-setting-up-the-environment</id>
    <content type="html"><![CDATA[<p><em>This post helps setting up the development environment for React on VS Code using Browserify and Gulp</em></p>

<p>I have been playing around with <a href="https://facebook.github.io/react/">React</a> for the past few days and liking the one way binding and immutability concept that it puts forward. The component-based approach and having all related code in a single place is really interesting. Need to explore more and see how it really turns out building UI&rsquo;s with React.</p>

<p>The openness of the Web makes it really difficult to get started with any development platform on it and is the same with React. There are a lot of options for getting things done and can get <a href="https://en.wikipedia.org/wiki/Decision_fatigue">overwhelming when newly starting out</a>. This post explains &lsquo;one way&rsquo; to set up the development environment when developing an application using the React JavaScript framework. I am using VS Code for some time now and wanted to use the same for React development. Except for setting up VS Code, everything else would still make sense to you if you are using a different editor.</p>

<h3>Package Manager for External Dependencies</h3>

<p>One of the first things we need when starting with a fresh project on React, is the React library itself. I use Node Package Manager(npm) for managing all my code and development dependencies. Use the below commands to set up the <a href="https://docs.npmjs.com/cli/init">npm configuration (<em>package.json</em>) </a> and install the latest version of React library.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>npm init
</span><span class='line'>npm i --save react
</span><span class='line'>npm i --save react-dom
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><em>When installing npm packages use <a href="https://docs.npmjs.com/files/package.json#dependencies">&ndash;save</a> if it needs to be deployed with the application and use <a href="https://docs.npmjs.com/files/package.json#devdependencies">&ndash;save-dev</a> for a package added to support development.</em></p></blockquote>

<h3>Setting up VS Code</h3>

<p>JavaScript development experience is better when you have <em><a href="https://code.visualstudio.com/Docs/languages/javascript">jsconfig.json</a></em> file in your project root. VSCode recommends adding this file through a small light bulb notification on the right side of the status bar (as shown below). With this configuration file, VSCode treats all the <em>js</em> files under the same project context.</p>

<p><img class="center" src= "http://rahulpnath.com/images/vscode_jsconfig_balloon.png" alt="Visual Studio code jsconfig balloon notification" /></p>

<p>Intellisense for libraries is available through type definition files, usually available in the <a href="http://definitelytyped.org/">DefinitelyTyped</a> <a href="https://github.com/DefinitelyTyped/DefinitelyTyped">repository</a>. With npm, you can manage these definition files using the <a href="https://github.com/typings/typings">TypeScript Definition Manager (typings)</a> package. To get started install the typings package and support for node packages. Now you can use <a href="https://github.com/typings/typings/blob/master/docs/commands.md">typings</a> to manage all the typescript definitions and use it for getting IntelliSense support. Once you have the correct type definitions installed for the packages you use, VSCode will show IntelliSense as shown below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>npm i --save-dev typings
</span><span class='line'>typings install --ambient node
</span><span class='line'>typings install --save-dev gulp
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src= "http://rahulpnath.com/images/react_vscode_intellisense.png" alt="Visual Studio code Intellisense" /></p>

<h3>Hello World from React</h3>

<p>Now that we have enough to get us started let&rsquo;s write our first react component, which displays a message passed into it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">HelloWorld</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>   <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>       <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>           <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">message</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>       <span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">HelloWorld</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s save the above into <em><a href="https://github.com/rahulpnath/Blog/blob/master/React_Template/src/components/helloworld.js">components/helloworld.js</a></em>. To use this component in the application, it needs to be rendered into the HTML page. So let&rsquo;s add a main entry point for the application as below and save it into <em><a href="https://github.com/rahulpnath/Blog/blob/master/React_Template/src/main.js">main.js</a></em>. Notice how the component is referred in here and rendered into the HTML div element <em>app</em>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">ReactDOM</span> <span class="nx">from</span> <span class="s1">&#39;react-dom&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">HelloWorld</span> <span class="nx">from</span> <span class="s1">&#39;./components/helloworld&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">HelloWorld</span> <span class="nx">message</span> <span class="o">=</span><span class="s2">&quot;Hello World From React&quot;</span> <span class="o">/&gt;</span><span class="p">,</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>For completeness below is how the <em><a href="https://github.com/rahulpnath/Blog/blob/master/React_Template/src/Index.html">Index.html</a></em> looks</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>     <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;app&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span> <span class="na">src=</span><span class="s">&quot;main.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Using Browserify for Bundling</h3>

<p>Now that we have all the code needed for rendering the component, let&rsquo;s bundle up all the different JavaScript files together so that we can deploy it as a single file. Since we are using <em>JSX</em> and ES6 features, which not all browsers support, we need to transform it. <a href="https://babeljs.io/">Babel</a> is a JavaScript compiler to get this done and it also has preset specific to <a href="https://babeljs.io/docs/plugins/preset-react/">react</a> and <a href="https://babeljs.io/docs/plugins/preset-es2015/">es2015</a>. <a href="http://browserify.org">Browserify</a> bundles all the JavaScript modules and also enables specifying transforms using the <a href="https://github.com/substack/node-browserify#usage">&ndash;transform (-t)</a> switch, to pass in <a href="https://github.com/babel/babelify">babel</a> along with the presets required.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>browserify -t [babelify --presets [react es2015] ] src\main.js -o dest\main.js -d
</span></code></pre></td></tr></table></div></figure>


<p>If you now manually copy over the HTML file into the <em>dest</em> folder and open it from there you should be seeing the &lsquo;<em>Hello World from React</em>&rsquo; message.</p>

<h3>Automating Build and More</h3>

<p>I definitely did not want to keep running the above command and copy the HTML(/CSS) files, every time I make a change, to see the output - so automating it was very much required. What I would essentially like to have is every time I make a change on any of the files in the project, the build to trigger and output the updated application into the <em>dest</em> folder and automatically refreshing the browser so that I can see the changes (near) real-time. I chose to use <a href="http://gulpjs.com/">Gulp</a> as this is popular and I have had some <a href="http://www.rahulpnath.com/blog/organizing-tests-into-test-suites-for-visual-studio/">experience using it before</a>.</p>

<h4><strong><a href="https://github.com/rahulpnath/Blog/blob/master/React_Template/gulpfile.js">gulpfile.js</a></strong></h4>

<p>To organize all the different path&rsquo;s used in the gulp build file, I have an object, <em>path</em> holding all the properties together, that&rsquo;s used in the <a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulptaskname--deps-fn">gulp tasks</a>. The different tasks that I have defined are to <em>build</em> ( which <em>copyHtmlFiles</em> and builds and transforms <em>js</em> files), <em><a href="https://github.com/adametry/gulp-eslint">lint</a></em>, <em><a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpwatchglob--opts-tasks-or-gulpwatchglob--opts-cb">watch</a></em>&lsquo;es the source folder for changes and triggers the required build, <em><a href="https://www.npmjs.com/package/gulp-connect">connect</a></em>&rsquo;s a server to host the application and automatically <em>reload</em>&rsquo;s the browser whenever code is changed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">appConfig</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">localBaseUrl</span><span class="o">:</span> <span class="s1">&#39;http://localhost&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">port</span><span class="o">:</span> <span class="mi">8090</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">paths</span> <span class="o">:</span> <span class="nx">path</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;copyHtmlFiles&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">HTML</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">DEST</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">connect</span><span class="p">.</span><span class="nx">reload</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;js&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">browserify</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">MAINJS</span><span class="p">,</span> <span class="p">{</span> <span class="nx">debug</span><span class="o">:</span> <span class="kc">true</span> <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">transform</span><span class="p">(</span><span class="nx">babelify</span><span class="p">,</span> <span class="p">{</span> <span class="nx">presets</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;react&#39;</span><span class="p">,</span> <span class="s1">&#39;es2015&#39;</span><span class="p">]</span> <span class="p">})</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">bundle</span><span class="p">()</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">console</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">source</span><span class="p">(</span><span class="s1">&#39;main.js&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">DEST</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">connect</span><span class="p">.</span><span class="nx">reload</span><span class="p">());;</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;build&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;copyHtmlFiles&#39;</span><span class="p">,</span> <span class="s1">&#39;js&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;lint&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">JS</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">lint</span><span class="p">({</span> <span class="nx">config</span><span class="o">:</span> <span class="s1">&#39;eslint.config.json&#39;</span> <span class="p">}))</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">lint</span><span class="p">.</span><span class="nx">format</span><span class="p">())</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;watch&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">HTML</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;copyHtmlFiles&#39;</span><span class="p">]);</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">watch</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">JS</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;js&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;connect&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">connect</span><span class="p">.</span><span class="nx">server</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">root</span><span class="o">:</span> <span class="s1">&#39;dist&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">livereload</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">port</span><span class="o">:</span> <span class="nx">appConfig</span><span class="p">.</span><span class="nx">port</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;reload&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;dist/**/*&#39;</span><span class="p">).</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">connect</span><span class="p">.</span><span class="nx">reload</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;open&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="nx">path</span><span class="p">.</span><span class="nx">DEST</span> <span class="o">+</span> <span class="s1">&#39;Index.html&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">open</span><span class="p">({</span><span class="nx">uri</span> <span class="o">:</span> <span class="nx">appConfig</span><span class="p">.</span><span class="nx">localBaseUrl</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span><span class="o">+</span><span class="nx">appConfig</span><span class="p">.</span><span class="nx">port</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span><span class="p">}));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;build&#39;</span><span class="p">,</span> <span class="s1">&#39;connect&#39;</span><span class="p">,</span> <span class="s1">&#39;lint&#39;</span><span class="p">,</span> <span class="s1">&#39;open&#39;</span><span class="p">,</span> <span class="s1">&#39;watch&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the default gulp task running, either using <a href="https://code.visualstudio.com/Docs/editor/tasks">VSCode Task Runner</a> or the <a href="https://github.com/gulpjs/gulp/blob/master/docs/getting-started.md#4-run-gulp">command line</a>, any edits that I make to the code gets build and pushed to the output directory and the browser refreshes to show the latest changes.</p>

<p><img class="center" src= "http://rahulpnath.com/images/react_realtime_edits.gif" alt="React real-time browser refresh" /></p>

<p><em>If you find any package details missing see the <a href="https://github.com/rahulpnath/Blog/blob/master/React_Template/package.json">package.json</a> file.</em></p>

<p>You can find the hello world project template <a href="https://github.com/rahulpnath/Blog/tree/master/React_Template">here</a>. The repository size is a bit high as I have <a href="http://www.rahulpnath.com/blog/checking-in-package-dependencies-into-source-control/">included the npm packages</a> (<em>node_modules</em>) in the repository, which you would have anyways downloaded when doing a &lsquo;<a href="https://docs.npmjs.com/cli/install">npm install</a>&rsquo;.</p>

<p>Hope this helps you to get started with React!</p>
]]></content>
  </entry>
  
</feed>
