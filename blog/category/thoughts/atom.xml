<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: thoughts | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/category/thoughts/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2017-01-10T00:04:03+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making Code Reviews Effective]]></title>
    <link href="http://rahulpnath.com/blog/code-review/"/>
    <updated>2017-01-03T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/code-review</id>
    <content type="html"><![CDATA[<p>Code review is an essential practice of the development life cycle. It helps improve the code quality, unify team practices, share knowledge, mentoring etc. over a longer period of time. It helps find mistakes that are overlooked while developing and helps improve the overall quality of the software. This helps accelerate the deployment process as changes are more likely to pass through testing.</p>

<blockquote><p><em>Peer review—an activity in which people other than the author of a software deliverable examine it for defects and improvement opportunities—is one of the most powerful software quality tools available. Peer review methods include inspections, walkthroughs, peer desk checks, and other similar activities.</em></p>

<p>-<a href="http://www.processimpact.com/articles/humanizing_reviews.html"><strong> Karl E. Wiegers</strong></a></p></blockquote>

<p><img class="center" alt="Posts per month - 2016" src="/images/codereview_friendly.png"/></p>

<p>Below are some of my thoughts on the various aspects involved in a Code Review.</p>

<h3>Sending a Review</h3>

<p>Before sending for a code review make sure that only the necessary files for the change are added in the review. Often it happens that when we write code there are remains of things that we tried and discarded, like new files, packages, changes to project metadata files etc. Double check and make sure that the changes are what are just required. Ensure that the code builds successfully. If there are any build scripts that your team uses, make sure that those are run and passes successfully. When submitting a code review make sure that you reference the associated work item - be it a bug, story, task etc. Add <a href="http://www.rahulpnath.com/blog/category/testing/">tests</a>. Add in a description detailing the change and any reasoning behind it to add in more context. This will help the reviewer understand the code much faster. Add in relevant people for the review and submit a request. Check out <a href="http://blog.ploeh.dk/2015/01/15/10-tips-for-better-pull-requests/">some great tips for a better-looking review request</a>.</p>

<h3>Handling Review Comments</h3>

<p>One of the key things in a code review and one that&rsquo;s often missed and drives people frustrated is that they try to take it all in.</p>

<blockquote><p><em>Not all comments in a review needs to be addressed</em></p></blockquote>

<p>If a review comment points out a mistake in logic or business functionality or conflict with other code you need to fix them, unless you think the reviewer is wrong. But for suggestions on how better to structure your code or refactor into a more readable code, naming, style formatting etc needs addressing only if you feel they are adding value. But make sure to communicate well with the reviewer and reach an agreement.</p>

<p>Look at comments as a way to improve your code and help the team and business. Go in with a positive attitude. When seen as an overhead or an extra ritual, code reviews can be really painful and depressing. Make a note of commonly occurring comments or mistakes you are making and try to handle them at the time of development. Rather than mechanically going through the code review and making changes to the code, internalize on the change and try to see the benefits of a change. This helps to incorporate such suggestions in future reviews as well.</p>

<h3>Responding to a Code Review</h3>

<p>I usually find myself following the below three variations when coming to replying to a code review request</p>

<ul>
<li><p><strong>Comment and Wait</strong>
I leave comments on the review but do not approve. This means that I would like to have those comments actioned and a new pull request be raised for that. This often falls into those cases where there are logic or business issues.</p></li>
<li><p><strong>Comment and Approve</strong>
I leave comments (if any) but also approve the code review. This means that the code <em>Looks Good To Me</em> (LGTM), but would be better with the comments addressed. These comments generally relate to better formatting, improved on naming or refactoring readability.</p></li>
<li><p><strong>Add Relevant People</strong>
Add in reviewers that I feel are missed and relevant for the part of the code that is changed.  This I do irrespective of the above two options if I feel someone else needs to take a look. In these cases, if it was my review that gets added in an extra reviewer I would wait to get a sign off from that person too.</p></li>
</ul>


<h4><strong>Business Aspect</strong></h4>

<p>When reviewing code look first for the functionality that the code change addresses. It is possible that we get carried away just by the technical aspect of code and ignore the business aspect altogether. If you have <a href="https://www.leadingagile.com/2014/09/acceptance-criteria/">Acceptance Criteria</a> defined for tasks then it&rsquo;s worth reading it before doing the code review to get more context.</p>

<h4><strong>Technical aspect</strong></h4>

<p>Once the business aspect is covered have a look at the technical aspect of the change. Whether the code is decoupled, has the correct abstractions, follows team conventions (best if automated). Check for commonly occurring problems like improper usage of dispose pattern, magic numbers, large methods, all code flow paths not handled etc. See if the new code fits into the overall architecture of the application. Look for tests and ensure the validity of the test data. Look out for <a href="https://en.wikipedia.org/wiki/Overengineering">overengineering</a> or <a href="https://en.wikipedia.org/wiki/Not_invented_here">not invented here syndrome</a>.</p>

<h4><strong>Aesthetic</strong></h4>

<p>Code formatting is as important as the code itself. Code is read more often than written, so we should try and optimize code for reading. I would prefer to automate this as far as possible so that people don&rsquo;t need to look for these in reviews. I feel that is often time not well spent and also tends to lead to longer discussions (<a href="https://blog.codinghorror.com/death-to-the-space-infidels/">tabs vs Spaces</a>). When it is part of the build and automated people seldom complain about it and in a very short period of time, the formatting rules become second nature to them. If you currently do not have automated checks you can gradually <a href="http://www.rahulpnath.com/blog/introducing-code-formatting-into-a-large-codebase/">introduce formatting checks into your builds for a large code base</a>.</p>

<blockquote><p><em>Don&rsquo;t go by &lsquo;It&rsquo;s done like that everywhere so I will keep it the same&rsquo;</em></p></blockquote>

<p>There might be a lot of practices that is being followed over the period of time. But if you find any of the practices making it harder on a day-to-day functioning of the team, take a step towards changing the practice. I am not a fan of &lsquo;<em>clean it all at once</em>&rsquo; style of approach. I prefer to gradually introduce the change for two reasons</p>

<ul>
<li>No need to stop or allocate people to repeatedly do the same task of cleaning it everywhere. (Unless there is a very strong business justification to it)</li>
<li>You get gradually introduced to the new way of doing things. This gives time to reflect and compare with the old way. You have time to correct yourself if the new approach is not fitting well either or causing more trouble than previous.</li>
</ul>


<h3>Handling Conflicts</h3>

<p><img class="center" alt="Posts per month - 2016" src="/images/codereview_wtf.png"/></p>

<p>Foster environments where you don&rsquo;t curb discussions or other people&rsquo;s ideas but encourage everyone to actively participate and throw around even the stupidest of an idea.</p>

<blockquote><p><em>Psychological safety is a “shared belief, held by members of a team, that the group is a safe place for taking risks.” It is “a sense of confidence that the team will not embarrass, reject, or punish someone for speaking up,” Edmondson wrote in a 1999 paper. “It describes a team climate characterized by interpersonal trust and mutual respect in which people are comfortable being themselves.</em></p>

<p><a href="https://www.linkedin.com/pulse/what-google-learned-from-its-quest-build-perfect-team-charles-duhigg"><strong>- Charles Duhigg</strong>, <em>What Google Learned From Its Quest to Build the Perfect Team</em></a></p></blockquote>

<p>Code reviews should also be seen as a way to incorporate better practices from fellow developers and as a learning mechanism. Don&rsquo;t take comments personal, but look at it for what they are. When you have a conflicting opinion you can reply to the comment with your thoughts and cross check with the reviewer. Rarely it can happen that you have conflicting opinions on code review comments and you are not able to solve it among the people involved.  Walk up to the person (if you are co-located) or have a conversation over your teams messaging application. But make sure that it stays healthy. In case the discussion is not going the intended way you can involve senior team members or other fellow team members to seek their opinions too. If such kinds of conflicts are happening more often then the team needs to analyze the nature of review comments that these occur on, if it&rsquo;s between specific groups of people or any visible patterns and try to address them.</p>

<p>When taken in isolation any practices that a team does take time. So disregard any activity just because it adds more time to your process. When seen as part of the overall development cycle and the benefits it brings to the business, Code Reviews proves to be an essential practice. Different teams tend to have different guidelines and checklists for the reviews. Follow what works best for your team. Do you do code reviews as part of your development cycle? What do you feel important in a Code Review? Sound off in the comments!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Self-help Books]]></title>
    <link href="http://rahulpnath.com/blog/books/"/>
    <updated>2017-01-01T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/books</id>
    <content type="html"><![CDATA[<p>Over the past couple of years, I have read a lot of <a href="https://en.wikipedia.org/wiki/Self-help_book">Self-help books</a>. Here are a few that I liked and have drawn ideas from. Self-help books in itself is an easy way to procrastinate as you get an immediate high on knowing how optimized and productive your life can be. I have fallen for this a lot of times and its hard to keep away from it. Every time I read one of these books, I get the feeling that this is going to change my life. But then when I get to the end of the book all I need is more of it and ends up <a href="http://www.huffingtonpost.com/quora/why-self-help-books-rarel_b_9517224.html">starting with a new book</a>. Slowly with time I started to realize that all that is happening is reading and very little action.</p>

<p>To be successful with any of these books you need to draw ideas into your daily life and practice them. You need to build short term goals and get the behavior you are trying to create into you.</p>

<blockquote><p><em>Reading without action is just another way to procrastinate and is a waste of time.</em></p></blockquote>

<p>Take notes from the books, see how it can be incorporated into your daily life and improve one at a time. Revisit the notes often. I prefer reading this genre of books on the Kindle (<a href="http://www.rahulpnath.com/blog/ebook-or-hard-copy/">technical books I prefer physical copy</a>), as it requires little flipping back and forth.  On Kindle, you can <a href="https://www.amazon.com/gp/help/customer/display.html?nodeId=201241990">add or remove bookmarks, highlights, and notes at any location</a> and revisit this at a later point in time.</p>

<div>
<div class="row">
   <div class="col-sm-6 col-md-3">
      <div class="thumbnail">
         <a href="http://amzn.to/2hm8vDJ">
         <img src="http://rahulpnath.com/images/books_amillionthougts.jpg" data-holder-rendered="true" style="display: block;" >
         </a>
         <div class="caption">
            <h5>A Million Thoughts</b></h5>
         </div>
      </div>
   </div>
   <div class="col-sm-6 col-md-3">
      <div class="thumbnail">
         <a href="http://amzn.to/2gOYluc" >
         <img src="http://rahulpnath.com/images/books_powerofhabit.jpg" data-holder-rendered="true" style="display: block;">
         </a>
         <div class="caption">
            <h5><b>Power Of Habit</b></h5>
         </div>
      </div>
   </div>
   <div class="col-sm-6 col-md-3">
      <div class="thumbnail">
         <a href="http://amzn.to/2gsJaed" >
         <img src="http://rahulpnath.com/images/books_gtd.jpg" data-holder-rendered="true" style="display: block;">
         </a>
         <div class="caption">
            <h5><b>Getting Things Done</b></h5>
         </div>
      </div>
   </div>
   <div class="col-sm-6 col-md-3">
      <div class="thumbnail">
         <a href="http://amzn.to/2hsjXkq" >
         <img src="http://rahulpnath.com/images/books_warofart.jpg" data-holder-rendered="true" style="display: block;">
         </a>
         <div class="caption">
            <h5><b>The War of Art</b></h5>
         </div>
      </div>
   </div>
</div>
<div class="row">
<div class="col-sm-6 col-md-3">
   <div class="thumbnail">
      <a href="http://amzn.to/2hmeokB">
      <img src="http://rahulpnath.com/images/books_superhumanbyhabit.jpg" data-holder-rendered="true" style="display: block;" >
      </a>
      <div class="caption">
         <h5><b>Superhuman By Habit</b></h5>
      </div>
   </div>
</div>
<div class="col-sm-6 col-md-3">
   <div class="thumbnail">
      <a href="http://amzn.to/2gP4sig" >
      <img src="http://rahulpnath.com/images/books_winfriendsandinfluenceprople.jpg" data-holder-rendered="true" style="display: block;">
      </a>
      <div class="caption">
         <h5><b>How to Win Friends & Influence People</b></h5>
      </div>
   </div>
</div>
<div class="col-sm-6 col-md-3">
   <div class="thumbnail">
      <a href="http://amzn.to/2hmblsw" >
      <img src="http://rahulpnath.com/images/books_thefirsttwentyhours.jpg" data-holder-rendered="true" style="display: block;">
      </a>
      <div class="caption">
         <h5><b>The First 20 Hours</b></h5>
      </div>
   </div>
</div>
<div class="col-sm-6 col-md-3">
   <div class="thumbnail">
      <a href="http://amzn.to/2hsfy0H" >
      <img src="http://rahulpnath.com/images/books_thepassionateprogrammer.jpg" data-holder-rendered="true" style="display: block;">
      </a>
      <div class="caption">
         <h5><b>The Passionate Programmer</b></h5>
      </div>
   </div>
</div>
</div>
<div class="row">
   <div class="col-sm-6 col-md-3">
      <div class="thumbnail">
         <a href="http://amzn.to/2hsh1En">
         <img src="http://rahulpnath.com/images/books_eatthatfrog.jpg" data-holder-rendered="true" style="display: block;" >
         </a>
         <div class="caption">
            <h5><b>Eat That Frog</b></h5>
         </div>
      </div>
   </div>
   <div class="col-sm-6 col-md-3">
      <div class="thumbnail">
         <a href="http://amzn.to/2gsXmE0" >
         <img src="http://rahulpnath.com/images/books_smarterfasterbetter.jpg" data-holder-rendered="true" style="display: block;">
         </a>
         <div class="caption">
            <h5><b>Smarter Faster Better</b></h5>
         </div>
      </div>
   </div>
   <div class="col-sm-6 col-md-3">
      <div class="thumbnail">
         <a href="http://amzn.to/2hsr2kI" >
         <img src="http://rahulpnath.com/images/books_thecompoundeffect.jpg" data-holder-rendered="true" style="display: block;">
         </a>
         <div class="caption">
            <h5><b>The Compound Effect</b></h5>
         </div>
      </div>
   </div>
   <div class="col-sm-6 col-md-3">
      <div class="thumbnail">
         <a href="http://amzn.to/2hsoeUC" >
         <img src="http://rahulpnath.com/images/books_rework.jpg" data-holder-rendered="true" style="display: block;">
         </a>
         <div class="caption">
            <h5><b>Rework</b></h5>
         </div>
      </div>
   </div>
   </div>
   <div class="row">
   <div class="col-sm-6 col-md-3">
      <div class="thumbnail">
         <a href="http://amzn.to/2gJ7Uio">
         <img src="http://rahulpnath.com/images/books_fourhourworkweek.jpg" data-holder-rendered="true" style="display: block;" >
         </a>
         <div class="caption">
            <h5><b>Four Hour Work Week</b></h5>
         </div>
      </div>
   </div>
   <div class="col-sm-6 col-md-3">
      <div class="thumbnail">
         <a href="http://amzn.to/2hNVTUV" >
         <img src="http://rahulpnath.com/images/books_dothework.jpg" data-holder-rendered="true" style="display: block;">
         </a>
         <div class="caption">
            <h5><b>Do The Work</b></h5>
         </div>
      </div>
   </div>
   <div class="col-sm-6 col-md-3">
      <div class="thumbnail">
         <a href="http://amzn.to/2htP52l" >
         <img src="http://rahulpnath.com/images/books_zenhabits.jpg" data-holder-rendered="true" style="display: block;">
         </a>
         <div class="caption">
            <h5><b>Zen Habits</b></h5>
         </div>
      </div>
   </div>
   <div class="col-sm-6 col-md-3">
      <div class="thumbnail">
         <a href="http://amzn.to/2hFyZmZ" >
         <img src="http://rahulpnath.com/images/books_thepomodorotechnique.jpg" data-holder-rendered="true" style="display: block;">
         </a>
         <div class="caption">
            <h5><b>The Pomodoro Technique</b></h5>
         </div>
      </div>
   </div>
</div>
</div>


<p>Hope some of these helps you as well. Have a great year ahead!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2016: What Went Well, What Didn't and Goals]]></title>
    <link href="http://rahulpnath.com/blog/2016-recap/"/>
    <updated>2016-12-20T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/2016-recap</id>
    <content type="html"><![CDATA[<p><a href="http://www.oldlaundrytheatre.co.uk/happy-new-year-from-all-at-the-old-laundry/">
<img class="center" alt="Posts per month - 2016" src="/images/2016_happy_new_year.png"/>
</a></p>

<p>2016 was a great year and I thought sharing some of the things that went well, those that didn&rsquo;t and setting goals for 2017.</p>

<blockquote><p><strong>TLDR;</strong></p>

<p><em>2016 was a great year and is the first one where I am writing a &lsquo;year in review&rsquo; post. Blogging, Videos, Open Source and Community contribution are some of the things that went well. FSharp, Reading, Travel, Photography and Exercise did not go that great. Looking forward to 2017 and planning to keep the goodness of 2016 and add some more to it</em></p></blockquote>

<h3>What went well</h3>

<h4><strong>Blogging</strong></h4>

<p>This has been a great year with my blog. On an average, I published four blog posts a month. It started with a self-challenge from March to write every day. I was able to come up with eight posts that month, but then felt it was not something that I could stick with consistently. So I kept a target of four posts per month and stuck to it for the rest of the year. I automated a lot of mundane tasks in my blogging workflow right from <a href="http://www.rahulpnath.com/blog/optimizing-octopress-workflow-for-new-posts/">creating draft posts</a> to <a href="http://www.rahulpnath.com/blog/continuos-delivery-of-octopress-blog-using-travisci-and-docker/">deploying posts</a> and <a href="http://www.rahulpnath.com/blog/automatic_deployment_of_future_posts_with_octopress/">scheduling posts for future deployment</a>. This has saved a lot of time for me and helps me stick just with the writing part of blogging!</p>

<p><img class="center" alt="Posts per month - 2016" src="/images/2016_postspermonth.png"/></p>

<p>Sticking with <a href="http://www.rahulpnath.com/blog/maintaining-a-blogging-schedule/">publishing posts on a regular interval</a> was more about deciding that I have to write every day. I set a &lsquo;mini habit&rsquo; to write every day - at least one line every day - and stuck to it. This helped me get over the initial inertia of starting to write a post. Having set this goal to myself I had to consistently come with topics to blog about. This very much changed the way that I approached <a href="http://www.rahulpnath.com/blog/finding-a-job-abroad/">my day job</a>. I always involved in it with the need to find something to share, in a way that I can abstract it out from the business dependencies. Most of the decisions and issues that happened to us (the development team) are now documented here. This acts as a documentation for any new joiners and makes the <a href="http://www.rahulpnath.com/blog/make-it-easy-for-the-new-person-joining-your-team-have-a-project-ramp-up-plan/">ramp up to the project a bit easier</a>. More than anything it definitely helps me find the solution when I come across the same issue again. So if you still don&rsquo;t have a blog of your own, there is no better time than now. Make it a new year resolution. <a href="http://www.rahulpnath.com/blog/own-your-urls/">Get a URL</a> and start writing. I have also been successful in getting a couple of people (at least four that I personally know of) to blog. Getting started is the biggest hurdle, the rest will fall in the due course of time.</p>

<h4><strong>Youtube Channel</strong></h4>

<p>Starting a <a href="https://www.youtube.com/c/RahulNath">Youtube channel</a> had been something I wanted to do for a long time. I have just got started with it and posted one video. I now understand why people say recording is hard - there is a lot to it and it takes time to be good at it. The only way to get better if something is hard is to do more of it - <em><a href="http://martinfowler.com/bliki/FrequencyReducesDifficulty.html">Frequency Reduces Difficulty</a></em> I plan to start with one video per month and see how it goes. I have been procrastinating on the second video for a while, <strike>will see if I can get it out before this year!</strike> <a href="https://www.youtube.com/watch?v=JbshGF4ZwGE">Got it out just in time!</a></p>

<h4><strong>Open Source and Forums</strong></h4>

<p>Contributing to Open Source projects is a good way to learn. I have always struggled to find projects/issues to contribute to. But then I learned that it is again just a matter of deciding and committing to. <a href="http://www.firsttimersonly.com/">First Timers only</a> a good way to find issues and projects that one can possible jump right into. I decided to start looking at projects that I use more on a day to day basis - Asmspy and Autofixture were something that interested me. There were a couple of open issues in AsmSpy, that I picked up and <a href="http://mikehadlow.com/">Mike Hadlow</a> was more than happy to merge them in. I also decided to set up <a href="https://github.com/mikehadlow/AsmSpy/issues/14">Chocolatey package for AsmSpy</a>. On Mike&rsquo;s request, I now manage the <a href="https://chocolatey.org/packages/asmspy/">chocolatey package account</a> and am a contributor on AsmSpy project. I automated the <a href="http://www.rahulpnath.com/blog/automated-deployment-of-asmspy-to-chocolatey-using-appveyor/">deployment pipeline for AsmSpy</a> so that I do not have to worry about deploying the chocolatey package every time a change is made. Also got to <a href="https://github.com/AutoFixture/AutoFixture/issues?q=mentions:rahulpnath+is:closed">contribute to a few issues with AutoFixture</a> which is managed by <a href="http://blog.ploeh.dk/">Mark Seemann (ploeh)</a>. I was also lucky enough to meet him in person at <a href="http://www.rahulpnath.com/blog/ndc-sydney/">NDC Sydney</a>.</p>

<p>I keep a look at the <a href="https://social.msdn.microsoft.com/Forums/azure/en-US/home?forum=AzureKeyVault">Azure Key Vault MSDN forum</a> and try to help every time a question comes up. Answering questions on forums is also a <a href="http://www.rahulpnath.com/blog/staying-in-the-learning-loop/">good way to learn</a>, find interesting problems and <a href="http://www.rahulpnath.com/blog/stars-do-count/">at times rewarding</a>.</p>

<h3>What didn&rsquo;t go well</h3>

<ul>
<li><p><strong>FSharp</strong>: Learning FSharp is something that I really want to, but it&rsquo;s not been happening that well. I am on and off with this and it keeps getting sidelined.</p></li>
<li><p><strong>Reading</strong>: Compared to <a href="https://www.goodreads.com/user_challenges/3539650">2015</a> my reading has been a lot down in <a href="https://www.goodreads.com/user_challenges/5380726">2016</a>. Though I have been listening to a lot more podcasts, I think I have to get back on with reading in the coming year.</p></li>
<li><p><strong>Travel &amp; Photography</strong>: There&rsquo;s not been much travel except for the long vacation back home and a few local places in Sydney. Though I have been clicking along I was lazy to process them. There are still lying on my camera waiting to be processed.</p></li>
<li><p><strong>Exercise</strong>: Getting enough exercise is something that I have really lacked last year and I think I have also put up some weight because of it. Except for the walk up and down from home to station for the office commute, there&rsquo;s not been much of my body moving.</p></li>
</ul>


<h3>Goals for 2017</h3>

<blockquote><p><em>In preparing for battle I have always found that plans are useless, but planning is indispensable.</em></p>

<p>― Dwight D. Eisenhower</p></blockquote>

<ul>
<li><strong>Blogging</strong>: Stick to at least four posts per month. Try to see if I can get up to 6-8. I will have to improve the time that I take to write a post for this. Handling images for the blog needs to be automated as I spent some time converting and optimizing them.</li>
<li><strong>Videos</strong>: Create a schedule for publishing videos and improve the quality and delivery of the videos.</li>
<li><strong>Reading</strong>: Set up a reading plan and read at least 21 books (1 more than what I did in 2015).</li>
<li><strong>FSharp</strong>: Learn, Contribute and Blog</li>
<li><strong>Travel &amp; Photography</strong>: One trip at least once in 3 months and post photos</li>
<li><strong>Exercise</strong>: Run/Bike at least once a week.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solve the Business Problem, Don't Mimic The Process]]></title>
    <link href="http://rahulpnath.com/blog/solve-the-business-problem-dont-mimic-the-process/"/>
    <updated>2016-12-06T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/solve-the-business-problem-dont-mimic-the-process</id>
    <content type="html"><![CDATA[<p><a href="http://www.dhc-gmbh.com/en/kompetenzen/business-process-management/"><img class="center" alt="Business" src="/images/business_problem_automation.jpg"/></a></p>

<p>While working with clients I often get into conversations with the domain experts and people involved directly with the business. The discussions usually happen around what the process they are currently doing and how to automate those. Knowing the business process is helpful but getting influenced by that to design the solution is often not effective. Recently our team was in a conversation with a domain expert for a new feature request.</p>

<div class="alert alert-warning">
The series of events mentioned below were modified to fit into the conversational style used in the post.
</div>


<blockquote><p><em><strong>Domain Expert</strong> We need to charge customers a processing fee if they pay using an electronic payment method. Depending on the type of card (mastercard, visa etc) the processing charge percentage differs. The processing fees are always charged in the subsequent billing period after their current payment. For e.g. if a customer pays 1000$ for the month of November, then his December bill will have 2% card processing charge in the December invoice</em></p>

<p><em><strong>Team</strong> That sounds easy, think we have enough details to get started on this. Thank you.</em></p>

<p><em><strong>Domain Expert</strong> Perfect. Ahhh&hellip; Before you go, I think this can be a <a href="http://hangfire.io/">hangfire job</a> that runs on 29 every month, a few days before the billing date, 3rd, and generate these charges for the client. This is what we do manually at present. (And walks off)</em></p>

<p><em><strong>Team</strong> Discussing amongst themselves the team agreed that creating a recurring job is the way to go. Based on the assumption that this job will be run only once a month, the job was to read all the invoices from 29th of the previous month till 28th of the current month and charge the clients. The meeting was dismissed and off went everyone busy to get the new feature out</em></p></blockquote>

<h3>Business has Exceptions</h3>

<p>Problems started coming up the immediate month of feature deployment. Below is the sequence of events that happened.</p>

<ul>
<li><strong>29th</strong> : Nice work, team! The processing charges have been applied as expected.</li>
<li><strong>30th</strong> : Some of the invoices have wrong data. We have deleted them. Can you run the job?</li>
<li><strong>2nd</strong> : A few of our clients (as usual) paid late and we need to charge their processing fees. Can you run the job?</li>
<li><strong>15th</strong> : One of our clients is ending tomorrow, so we need to send them an invoice and it should include the processing fees for their last payment. Can you run the job?</li>
</ul>


<p>But wait! We had decided that we will run this job only once a month and that is the only time we need to process the charges. We cannot run that job over and over again.</p>

<blockquote><p><em>What I’ve noticed over the years is that our users find very creative ways to achieve their business objectives despite the limitations of the system that they’re working with. We developers ultimately see these as requirements, but they are better interpreted as <strong>workarounds</strong>.</em></p>

<p><strong><em>- <a href="http://udidahan.com/2013/04/28/queries-patterns-and-search-food-for-thought/">Udi Dahan</a></em></strong></p></blockquote>

<p>The business was right when it said that <em>&lsquo;This is what we do manually at present.</em> What they did not say though is that there were always exceptions. And in these cases, they did the same process, but just for those exceptions. Business process mostly will be around the majority of the cases and the exceptions always get handled ad-hoc. So for the business it&rsquo;s always that which takes a good part of their time that matters more.</p>

<h3>Finding the Way Out</h3>

<p>The problem, in this case, was that the team modeled the solution exactly as the business did manually. Think kind of a solution is most likely to fail in case of exceptions. The human brain can easily deal with these exceptions. But for a program to solve it that way it needs to be told so, which implies that there need to be alternate flow paths defined. So with the improved understanding of these exception cases, the team does another analysis through the problem. After some discussion the team re-defines their original problem statement - *We need to be able to run the job any number of times and it should have the same effect.</p>

<blockquote><p><em>A payment should get </em>one and only one<em> processing charge associated, no matter however times it is seen by the job.</em></p></blockquote>

<p>With the new implementation, we decided to maintain a list of payments (a strong identifier that does not change) we have seen and processed. So every time a payment is seen, it is matched to see if it is already processed. If a charge is not already applied, a charge is applied and added to the list of processed payments. This ensures that they can run the job anytime. The team added in capability to specify the time range to look for invoices. By default, this ranged from 29th - 28th. The team also added in a way to void out payment charges applied, so that whenever the invoices changed then can just clear that off and re-run the job. These changes gave the flexibility to meet the businesses exception cases.</p>

<h3>Idempotent</h3>

<blockquote><p><em>The term <a href="http://www.enterpriseintegrationpatterns.com/patterns/messaging/IdempotentReceiver.html">idempotent</a> is used in mathematics to describe a function that produces the same result if it is applied to itself, i.e. f(x) = f(f(x)). In Messaging this concept translates into a message that has the same effect whether it is received once or multiple times. This means that a message can safely be re-sent without causing any problems even if the receiver receives duplicates of the same message.</em></p></blockquote>

<p>Being idempotent is what we missed with the first implementation. There was an assumed &lsquo;idempotency&rsquo; that the job will be run only once a month. But this constraint is not something that the code had control of and something it could enforce. The job was also not idempotent at the granular level that it was affecting - payments. Asserting idempotency at the batch level fails when we want to re-run batches (when exceptions like the wrong invoice happens). Idempotency should be enforced at the unit level of change, which is what maintaining a list of processed payments helps with. Any payment that is not processed before will get processed now when the job is run. We can also ensure that the payment will only be processed at most once.</p>

<p>This is just an example where we fail to see beyond the business problem and also see the computing problems accompanying it. Not always will it be easy and fast to rewrite the code. Even if we fail to see these problems the business will eventually make us to. But it is when we can see the computing problems that accompanies a business problem that we start becoming better developers. Applying basic computing principles, probing the domain expert during discussions, sitting with domain experts while they work etc. are all good ways to start seeing the untold business processes. Hope this helps the next time you are into a meeting with domain expert or solving a business problem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Staying in the Learning Loop]]></title>
    <link href="http://rahulpnath.com/blog/staying-in-the-learning-loop/"/>
    <updated>2016-11-07T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/staying-in-the-learning-loop</id>
    <content type="html"><![CDATA[<p>The current state of the IT industry demands one to be constantly on the go and learning something new. New technologies, frameworks, languages etc. are getting released almost every other day. It is easy to get overwhelmed with all this information. The best way to keep up is to ignore most of it. But every now and then you would want to learn something new either because of project demands or out of personal interests. It is important to have a learning plan for yourself and stick through with it when wanting to learn something. If not it&rsquo;s easy to get distracted. These are some of the ways how I try to structure my learning.</p>

<p><a href="https://www.keele.ac.uk/media/keeleuniversity/lpdc/images/LPDC-Banner-Blue.jpg">
<img  alt="Make writing a habit - write daily" src="/images/learning_continuosly.png"/>
</a></p>

<h4><strong>Choosing and Sticking to a Topic</strong></h4>

<p>The most important thing in learning something new is to decide on what to learn. This could either be driven by work needs or personal interests. It&rsquo;s easier when driven by work needs as you do not have much to choose on. But still, you need to make sure that you stay within the boundaries of what you are trying to learn. It&rsquo;s easy to get off track as there might be a lot of things that come up which you are not aware of. At times understanding things with a certain level of abstraction is important. Just like social networks distracting you off from real work, different terminologies can get you off on a different path. So make sure you always stick to your end goal.</p>

<h4><strong>Books, Blogs, Videos</strong></h4>

<p>There are different ways that you can learn something new. It could either be books, videos, podcasts, blogs etc. There is no such thing as the best mode to learn. Mode of learning is person specific. So don&rsquo;t try to just imitate what your friend does. Try to find what works for you the best. Whenever I am learning something new, <a href="http://www.rahulpnath.com/blog/language-agnostic-books-for-every-developer-2/">books</a> work the best. Books give a structured approach to a new topic and eases your way through the topic. Though I have a Kindle, for technical books I <a href="http://www.rahulpnath.com/blog/ebook-or-hard-copy/">prefer hard copies</a>. Often I find the need to refer back or forward a few pages and it feels best on a physical book.  I find blogs useful for learning more about a topic that I already have some idea about. For getting an overview of topics and interesting things I find videos and podcasts useful. So depending upon the need I mix and match these different learning modes.</p>

<p><img alt="Current Reading List" src="/images/learning_books.jpg"/></p>

<h4><strong>Open Source Projects, Forums, Demo application</strong></h4>

<p>It is important that you try out whatever your learn. There are different ways that you can learn by doing and depends on the individual. When learning a new topic I choose to come up with a sample application to be built using the new technology that I am learning. I created <a href="https://www.microsoft.com/en-us/store/p/picfinity/9wzdncrdwxx8">Picfinity</a> when I was learning Window 8 Modern applications. Once comfortable with a topic I choose to either answer <a href="http://www.rahulpnath.com/blog/stars-do-count/">questions on forums</a> (mostly <a href="https://social.msdn.microsoft.com/profile/rahul%20p%20nath?type=forum&amp;referrer=http://social.msdn.microsoft.com/Forums/azure/en-US/home?forum=AzureKeyVault">msdn</a> or <a href="http://stackexchange.com/users/2205373/rahul-p-nath">stack overflow</a>). Contributing to open source projects is also another approach to gets some hands-on experience. Contributing to open source projects also helps the community and improves your self-confidence. <a href="https://github.com/">Github</a> is a good place to start with open source contribution.</p>

<h4><strong>Freelancing</strong></h4>

<p>Not always you get to implement what you learn at your work. Implementing in real world projects is an important aspect of learning. <a href="http://www.rahulpnath.com/blog/getting-started-with-freelancing-jobs-online/">Freelancing</a> is a good way to get work in areas that you want to improve or learn. Bid for projects that uses technologies that you are learning. It might be hard to get offered projects on technologies that you have no prior experience with. Showcasing any sample applications that you have built while learning increases your chances of getting the job. I used Picfinity to show that I can build Windows 8 and phone applications. This landed me opportunities to build different windows phone and windows 8 application.</p>

<h4><strong>Blog</strong></h4>

<p>Sharing your learnings helps improve your own understanding of the topic. It also helps others taking your same path and learning the new topic. Each one of us has a different perspective of understanding and learning things. So don&rsquo;t worry if you are writing about something that is already been written about. Make sure you blog your learnings and if you are new to blogging then there is no better time to <a href="http://www.rahulpnath.com/blog/category/blogging/">get started</a>. Blogs act as a good resume when applying for a job.</p>

<p>With new technologies and frameworks coming up every other day it is hard to keep up with all of them. It is not necessary to understand everything that is out there. What is important is that you should be able to learn quickly when the need arises. Also keep yourself aware of the changes in the industry and technologies you use. It does not matter if you do not know all the latest technologies. What matters is how fast you can learn a new concept. Have a learning plan! What do you find the most effective way to learn? Sound off in the comments</p>

<p><strong>Edit:</strong> Came across this interesting <a href="http://hanselminutes.com/543/becoming-a-more-social-developer-with-daphne-chong">podcast on Hanselminutes</a> where Scott talks to Daphne.</p>
]]></content>
  </entry>
  
</feed>
