<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: electron | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/category/electron/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2018-12-05T00:02:42+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting up an Electron Application using create-react-app Template]]></title>
    <link href="http://rahulpnath.com/blog/electron-and-react/"/>
    <updated>2017-10-10T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/electron-and-react</id>
    <content type="html"><![CDATA[<p><a href="https://electron.atom.io/">Electron</a> is a great way to build cross-platform desktop applications using HTML, CSS and JavaScript. I was surprised when I first came across Electron to see many of the applications that I use daily was developed in electron and I never knew about it. Since then I was interested in learning more about developing an application using Electron. Recently I was playing around with an idea for a side project and decided to use Electron as I wanted a desktop application. TDK react</p>

<h3>Setting up the React Application</h3>

<p>With the <a href="https://github.com/facebookincubator/create-react-app">create-react-app</a> template generator, it is easy to setup and get up and running a react application. All you need to run are the below commands, and you have everything set up for a react application.</p>

<pre><code class="bash">npm install -g create-react-app

create_react_app electron_react
cd electron_react
npm start
</code></pre>

<p>The above commands will create an &lsquo;electron-react&rsquo; folder with all the code and set up the app at *<a href="http://localhost:3000*">http://localhost:3000*</a> in development mode.</p>

<h3>Setting up Electron</h3>

<p>Now that we have a react application setup, let us integrate electron with it. The below command installs electron package.</p>

<pre><code class="bash">npm install electron
</code></pre>

<p>A <a href="https://github.com/electron/electron-quick-start">basic Electron application</a> needs just these files:</p>

<ul>
<li><em>package.json</em> - Points to the app&rsquo;s main file and lists its details and dependencies. We already have this as part of the react application.</li>
<li><em>main.js</em> - Starts the app and creates a browser window to render HTML. This is the app&rsquo;s main process. We will add this file.</li>
<li><em>index.html</em> - A web page to render. This is the app&rsquo;s renderer process. We already have this as part of the react application.</li>
</ul>


<p>Let&rsquo;s start by adding a main.js file. We will keep the code to the bare minimum. All we are doing here is adding a function <em>createWindow</em> which uses <em><a href="https://electron.atom.io/docs/api/browser-window/">BrowserWindow</a></em> from the electron package, to create a new window instance. The window loads the development server URL. We will modify this URL later to run independently without a hosted server so that it can be packaged and deployed easily. The <a href="https://electron.atom.io/docs/api/app/">app&rsquo;s</a> <a href="https://electron.atom.io/docs/api/app/#event-ready">ready</a> event is wired to create the new window.</p>

<pre><code class="js main.js">const {app, BrowserWindow} = require('electron');

let mainWindow;

function createWindow(){
    mainWindow = new BrowserWindow({ width: 800, height: 600});
    const startUrl = process.env.DEV_URL;

    mainWindow.loadURL(startUrl);

    mainWindow.on('closed', () =&gt; mainWindow = null);
}

app.on('ready', createWindow);
</code></pre>

<p>After updating the package.json with the electron application main entry point, we are all set to run the application.</p>

<pre><code class="bash package.json">"main": "src/main.js",
</code></pre>

<p>Fire up two consoles and launch the react application in one using <em>npm start</em> and the electron application in the other using <em>&lsquo;set DEV_URL=<a href="http://localhost:3000">http://localhost:3000</a> &amp;&amp; electron .&rsquo;</em></p>

<p><img class="center" alt="Electron React" src="/images/electron_react.png"></p>

<h3>Setting up for Deployment</h3>

<p>Opening up two consoles and starting up the react server first will start becoming a pain soon. To avoid this, we can use two npm packages to start both the tasks one after the other.</p>

<ul>
<li><a href="https://www.npmjs.com/package/concurrently">concurrently</a>: Run multiple commands concurrently.</li>
<li><a href="https://www.npmjs.com/package/wait-on">wait-on</a>: Wait for files, ports, sockets, http(s) resources to become available</li>
</ul>


<p>Install both the packages and modify the <em>package.json</em> as shown below.</p>

<pre><code class="bash package.json">"react-start": "react-scripts start",
"electron-dev": "set DEV_URL=http://localhost:3000 &amp;&amp; electron .",
"start": "concurrently \"npm run react-start\" \"wait-on http://localhost:3000/ &amp;&amp; npm run electron-dev\""
</code></pre>

<p>Running <em>npm start</em> now launches the react application, waits for the server to be up and running and then launches the electron application.</p>

<p>The electron app depends on the react application being hosted locally to run. Let&rsquo;s update <em>main.js</em> so that it can run from the generated output of the react application. Running <em>npm build</em> generates the website contents into the build folder.</p>

<pre><code class="js main.js">...
const path = require('path');
const url = require('url');
...
 const startUrl = process.env.DEV_URL ||
    url.format({
      pathname: path.join(__dirname, '/../build/index.html'),
      protocol: 'file:',
      slashes: true
    });
mainWindow.loadURL(startUrl);
...
</code></pre>

<p>Set the <em><a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#building-for-relative-paths">homepage</a></em> property in package.json (<em>&ldquo;homepage&rdquo;: &ldquo;./&rdquo;</em>) to enable relative paths on the generated <em>index.html</em> file. Once this is done, we can generate the site using <em>npm run build</em> and run the electron application using <em>&lsquo;electron .&rsquo;</em>. This will launch the application from the <em>build</em> folder.</p>

<p>Hope this helps you to jump start with your Electron app development using React.</p>

<p><strong>References</strong></p>

<ul>
<li><a href="https://medium.freecodecamp.org/building-an-electron-application-with-create-react-app-97945861647c">How to build an Electron app using create-react-app. No webpack configuration or “ejecting” necessary.</a></li>
<li><a href="https://github.com/facebookincubator/create-react-app">create-react-app</a></li>
<li><a href="https://github.com/electron/electron-quick-start">Electron: Quick Start Guide</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
