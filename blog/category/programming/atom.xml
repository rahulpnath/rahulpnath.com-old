<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/category/programming/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2017-08-06T00:02:43+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Azure Web App Restarting Automatically Due to Overwhelming Change Notification]]></title>
    <link href="http://rahulpnath.com/blog/azure-web-restarting-automatically-due-to-overwhelming-change-notification/"/>
    <updated>2017-07-24T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/azure-web-restarting-automatically-due-to-overwhelming-change-notification</id>
    <content type="html"><![CDATA[<p>At one of my clients, we faced a strange issue recently. The Azure Web application restarted automatically very often. The event log in the <a href="https://github.com/projectkudu/kudu/wiki/Kudu-console">Kudu console</a> showed the below error message.</p>

<blockquote><p><em>2017-07-13 00:09:50,333 [P45516/D4/T171] INFO  Umbraco.Core.UmbracoApplicationBase - Application shutdown. Details: HostingEnvironment</em></p>

<p><em>_shutDownMessage=Directory rename change notification for &rsquo;D:\home\site\wwwroot&#8217;.</em>  <br/>
<em>Overwhelming Change Notification in wwwroot</em>   <br/>
<em>HostingEnvironment initiated shutdown</em>  <br/>
<em>Directory rename change notification for &rsquo;D:\home\site\wwwroot&#8217;.</em>   <br/>
<em>Overwhelming Change Notification in wwwroot</em>   <br/>
<em>Initialization Error</em>   <br/>
<em>HostingEnvironment caused shutdown</em></p></blockquote>

<p>As you can tell from the logs, the website is an <a href="https://umbraco.com/">Umbraco</a> CMS hosted as an Azure Web application. We noticed that the restarts were happening more when the content was getting updated through <a href="https://our.umbraco.org/documentation/getting-started/backoffice/">backoffice</a>. The error also states that the restart was caused due to <em>Overwhelming Change Notification in wwwroot</em>. This hints that there are changes that are happening under the wwwroot folder, where the site is hosted.</p>

<div class="alert alert-info">
Even though this post details on why the specific site on Umbraco was restarting, most of the contents are still applicable for any other ASP.NET MVC application.
</div>


<h3>fcnMode Configuration</h3>

<p>A quick search got me to the <a href="https://msdn.microsoft.com/en-us/library/system.web.configuration.httpruntimesection.fcnmode(v=vs.110">fcnMode</a>.aspx)setting under <a href="https://msdn.microsoft.com/en-us/library/system.web.configuration.httpruntimesection(v=vs.110">httpRuntime</a>.aspx) section. An ASP.net application monitors certain files and folders under the wwwroot folder and will restart the application domain whenever it detects changes. This likely look looks the reason why the web site is restarting.</p>

<p>The <a href="https://msdn.microsoft.com/en-us/library/system.web.configuration.fcnmode(v=vs.110">fcnMode enumeration</a>.aspx) can take one of the four values below. For an Umbraco application this is by <a href="http://issues.umbraco.org/issue/U4-7712">default set to <em>Single</em></a>.</p>

<ul>
<li><strong>Default</strong>: For each subdirectory, the application creates an object that monitors the subdirectory. This is the default behavior.</li>
<li><strong>Disabled</strong>: File change notification is disabled.</li>
<li><strong>NotSet</strong>: File change notification is not set, so the application creates an object that monitors each subdirectory. This is the default behavior.</li>
<li><strong>Single</strong>: The application creates one object to monitor the main directory and uses this object to monitor each subdirectory.</li>
</ul>


<pre><code class="xml fcnMode set to Single for Umbraco application">&lt;system.web&gt;
    ...
    &lt;httpRuntime 
        requestValidationMode="2.0" 
        enableVersionHeader="false"
        targetFramework="4.5"
        maxRequestLength="51200" 
        fcnMode="Single" /&gt;
    ...
&lt;system.web&gt;
</code></pre>

<blockquote><p><em>FCNMode creates a monitor object with a buffer size of 4KB for each folder. When FCNMode is set to Single, a single monitor object is created with a buffer size of 64KB. When there are file changes, the buffer is filled with file change information. If the buffer gets overwhelmed with too many file change notifications an “Overwhelming File Change Notifications” error will occur and the app domain will recycle. The likelihood of the buffer getting overwhelmed is higher in an environment where you are using separate file server because the folder paths are much larger.</em></p>

<p>-<a href="http://www.dnnsoftware.com/community-blog/cid/154980/aspnet-file-change-notifications-and-dnn"> ASP.NET File Change Notifications and DNN</a></p></blockquote>

<p>You can read more about fcnMode setting and how it affects ASP.Net applications <a href="https://shazwazza.com/post/all-about-aspnet-file-change-notification-fcn/">here</a>.</p>

<h3>What&rsquo;s causing file changes?</h3>

<p>Default reaction when you come across such a setting or configuration value might be to turn that off and fcnMode does allow that as well - <em>Disabled</em>. But first, it is better that we understand what is causing file changes under the wwwroot folder and see if we can address that. The <a href="https://shazwazza.com/post/fcn-file-change-notification-viewer-for-aspnet/">FCN Viewer</a> helps visualize how many files and folders are being watched in as ASP.Net application.</p>

<p>In the Umbraco website, we are using a third party library <a href="http://imageprocessor.org/">ImageProcessor</a> that helps to process images dynamically. The ImageProcessor caches images and the <a href="http://imageprocessor.org/imageprocessor-web/configuration/#cacheconfig">cache location is configurable</a>. By default, it caches files under the App_Data/cache folder, which also happens to be one of the folders that the ASP.Net application monitors for changes. So anytime there are lots of files changing in the cache folder it causes the single monitor object monitoring the folders. This causes a buffer overflow and triggers an application restart due to <em>Overwhelming file change notifications</em>. However, ImageProcessor does allow moving the <a href="https://github.com/JimBobSquarePants/ImageProcessor/issues/518">cache folder outside of the wwwroot folder</a>. This causes the file not to be monitored and still work fine with the application. Since the <a href="https://twitter.com/Shazwazza/status/885770960321773568">library does not create the cache folder automatically</a>, we need to make sure that the folder specified in the config file exists.</p>

<p>Having moved the cache folder outside of the wwwroot, I no longer need to update the fcnMode setting and can leave it as intended. If you are facing application restarts as well due to overwhelming change notification in wwwroot see what is likely causing the file changes and then try and fix that instead of just setting the fcnMode to disabled.</p>

<p>Hope that helps fix your application restarting problem!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Left Align Your Code For Better Readability]]></title>
    <link href="http://rahulpnath.com/blog/left-align-your-code-for-better-readability/"/>
    <updated>2017-07-03T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/left-align-your-code-for-better-readability</id>
    <content type="html"><![CDATA[<p>Aesthetics of code is as important as the code you write. Aligning is an important part that contributes to the overall aesthetics of code. The importance of code aesthetics struck me while on a recent project. Below are some the code samples that I came across in the project. Traversing this code base was painful to me as the code was all over the place.</p>

<pre><code class="csharp Bad Formatting">public class Account
{
    public long   Id                    { get; set; }
    public string ClientId              { get; set; }
    public long   ContactId             { get; set; }
    public string UserName              { get; set; }
    public string Name                  { get; set; }
    public string Company               { get; set; }
    public string Address               { get; set; }
    public string BillingAddress        { get; set; }
}
</code></pre>

<pre><code class="csharp Bad Formatting">public ConnectToServer(string username, 
                       string password,
                       string server,
                       string port)
{
    ...
}
</code></pre>

<p>The code has too many alignment points that attract the eye which makes it hard to read in the first place. When in isolation this might still be fine to read, but with such a style across the code base, it soon becomes a pain for your eyes and your mind. When refactoring code, it becomes even harder as you need to put in the extra effort to make sure that this fancy alignment is maintained. Let&rsquo;s take a look at how even changing a property name (<em>Company to CompanyName</em>) or function name(<em>ConnectToServer to Connect</em>) will affect the current formatting.</p>

<pre><code class="csharp Renamed to CompanyName">public class Account
{
    ...
    public string Name              { get; set; }
    public string CompanyName           { get; set; }
    public string Address           { get; set; }
    ...
}
</code></pre>

<pre><code class="csharp Renamed to Connect">public Connect(string username, 
                       string password,
                       string server,
                       string port)
{
    ...
}
</code></pre>

<p>As you can see above the formatting is now all over the place, and you need to format them into place manually. Again when in isolation this might seem like a few press of spacebar. But when the property/function that you rename is used in multiple places this soon becomes a problem. Such code formatting introduces maintenance overhead and soon falls out of place if something gets missed.</p>

<h3>Better Ways To Format Code</h3>

<p>Left aligning code is one of the key things that I try to follow always. Keeping the code aligned to the left makes it easier to read (assuming that you are programming in a language written from left to right). Since we read from left to right having most of the code aligned to the left means that you have more code visible. Left aligning also means that you would almost avoid the need to scroll the code editor when reading through the code horizontally.</p>

<p>Let&rsquo;s take a look how left aligning the above code will look like.</p>

<pre><code class="csharp Left Aligned">public class Account
{
    public long Id { get; set; }
    public string ClientId { get; set; }
    public long ContactId { get; set; }
    public string UserName { get; set; }
    public string Name { get; set; }
    public string Company { get; set; }
    public string Address { get; set; }
    public string BillingAddress { get; set; }
}
</code></pre>

<pre><code class="csharp Left Aligned Multiple Lines">public ConnectToServer(
    string username, 
    string password,
    string server,
    string port)
{
    ...
}
</code></pre>

<pre><code class="csharp Left Aligned Single Line">public ConnectToServer(
    string username, string password, string server, string port)
{
    ...
}
</code></pre>

<p>As you can see above left aligning makes it much easier to read and also reduces the number of alignment points. This is also refactoring friendly as there are no specific space patterns that need to be maintained. As for the parameters in a single line VS parameters in multiple lines (as above), I prefer the multi-line approach, as it keeps the code further aligned to the left and also reduces the chance of getting a horizontal scroll bar. You can use <a href="http://www.rahulpnath.com/blog/introducing-code-formatting-into-a-large-codebase/">Column Guides</a> to remind yourself to keep the code within the acceptable horizontal space.</p>

<p>Code formatting is an important aspect of coding. It is important that as a team you need to agree on some standard practices and find ways to stick to it. You can use <a href="http://www.rahulpnath.com/blog/introducing-code-formatting-into-a-large-codebase/">styling tools</a>, <a href="http://www.rahulpnath.com/blog/code-review/">Code Reviews</a>, etc. to make sure it does not get missed. It takes a while for any new practices to set in, but soon it will be of second nature and easy to follow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Using Git Locally in a TFVC Repository]]></title>
    <link href="http://rahulpnath.com/blog/using-git-locally-in-a-tfvc-repository/"/>
    <updated>2017-06-21T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/using-git-locally-in-a-tfvc-repository</id>
    <content type="html"><![CDATA[<p>The project that I am currently working on using <a href="https://www.visualstudio.com/en-us/docs/tfvc/overview">Team Foundation Version Control</a>(TFVC) as it&rsquo;s source control. After <a href="http://www.rahulpnath.com/blog/git-checkout-tfs/">using Git</a> for a long time it felt hard to move back to TFVC. One of the biggest pain for me is losing the short commits that I do when working. Short commits help keep track of the work and also quickly revert unwanted changes. Branching is also much easier with Git and allows to switch between work without much hassle of &lsquo;<em>shelving -> undoing -> pulling back the latest as with TFS.</em>&rsquo;</p>

<p><img src="/images/tfvc_local_git.png" alt="Use Git Locally in a TFVC Repository" class="center" /></p>

<p>The best part with git is that you can use it to work with any folder in your system and does not need any setup. By just running &lsquo;<em><a href="https://git-scm.com/docs/git-init">git init</a></em>&rsquo; it initializes a git repository in the folder. Running <em>init</em> against my local TFVC source code folder, I initialized a git repository locally. Now it allows me to work locally using git - make commits, revert, change branches, etc. Whenever I reach a logical end to the work, I create a shelveset and push the changes up the TFVC source control from Visual Studio.</p>

<p>If you want to interact with the TFVC source control straight from the command line, you can try out <a href="https://github.com/git-tfs/git-tfs">git-tfs</a> - a Git/TFS bridge. For me, since I am happy working locally with git and pushing up the finished work as shelvesets from Visual Studio I have not explored the git-tfs tool.</p>

<p>Hope this helps someone if you feel stuck with TFVC repositories!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring to Composite Pattern]]></title>
    <link href="http://rahulpnath.com/blog/refactoring-to-composite-pattern/"/>
    <updated>2017-04-13T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/refactoring-to-composite-pattern</id>
    <content type="html"><![CDATA[<p>I often come across functions that do multiple things. Many times such functions have a common pattern where multiple sections within the function use the same parameters for calculations. The results from these different code sections within the function are either separated by conditionals (if, switch, etc.) or combined using various arithmetic operators. The most obvious refactoring in such scenarios is to move the code sections into different functions within the same class. Having it in separate functions keeps the code readable. But on closer observation, such functions can be moved into different classes, keeping each of these code sections as the only responsibility.</p>

<h3>Identifying the Refactoring</h3>

<p>Within a function when a similar pattern of code repeats, it could be refactored into multiple classes and composed to give the same functionality. Let us take a simple example of a function where we are validating an Account object based on different criteria. The various criteria end up as conditionals within the function. This function can soon get big and difficult to manage. It also makes it harder to test. If you are adding more validations to this class over a period you are violating the Open-Closed Principle (OCP), the O in <a href="http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod">SOLID</a>. Depending on the level of abstraction that we are looking at, the class also violates the Single Responsibility Principle(SRP), the S in SOLID. The function handles validations based on different criteria.</p>

<pre><code class="csharp">public List&lt;string&gt; Validate(Account account)
{
    var result = new List&lt;string&gt;();

    if (string.IsNullOrEmpty(account.Email))
        result.Add("No email");
    else if (!IsValidEmailFormat(account.Email))
        result.Add("Email not valid");

    if (account.BillingDetails == null)
        result.Add("Billing Details does not exists");

    ...

    return result;
}
</code></pre>

<h3>The Composite Pattern</h3>

<p><a href="https://en.wikipedia.org/wiki/Composite_pattern">Composite pattern</a> is appropriate when the client ignores the difference between the composition of objects and individual objects. The pattern helps developers to maintain the complexity of the code and also separate out class responsibilities.</p>

<blockquote><p><em>Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly</em></p></blockquote>

<p><img alt="Composite Pattern" src="/images/composite_pattern.png" /></p>

<h3>Refactoring</h3>

<p>In the Account validation above, the function checks for an email and validates the format, checks for valid billing details, etc. The validations could also extend on to users attached to the account and check if there is at least one user, the user has email, phone number, etc. Each of these validations can be moved into separate classes and composed together in one class so that they are all executed when an account needs to be validated. You can see a tree like hierarchy forming here, and the actual validation is composed of all these validations</p>

<p><img alt="Account Validation hierarchy" src="/images/composite_pattern_validation.png" /></p>

<p>The actual C# code looks like this after the refactoring.</p>

<pre><code class="csharp">public interface IValidateAccount
{
    IEnumerable&lt;string&gt; Validate(Account account);
}

public class AccountValidators : IValidateAccount
{
    public readonly IEnumerable&lt;IValidateAccount&gt; Validators;
    public AccountValidators()
    {
        Validators = new List&lt;IValidateAccount&gt;()
        {
          new AccountHasEmailValidator(),
          new AccountEmailIsValidValidator(),
          new AccountHasBillingDetailsValidator()
          ... // Add more validators
        };
    }
    public IEnumerable&lt;string&gt; Validate(Account account)
    {
        return Validators.SelectMany(validator =&gt; validator.Validate(account));
    }
}

public class AccountHasEmailValidator : IValidateAccount
{
    public IEnumerable&lt;string&gt; Validate(Account account)
    {
        if (account != null &amp;&amp; string.IsNullOrEmpty(account.Email))
            yield return "No email";
    }
}

public class AccountEmailIsValidValidator : IValidateAccount
{
    public IEnumerable&lt;string&gt; Validate(Account account)
    {
        if (account != null &amp;&amp; account.Email != null &amp;&amp; !IsValidEmail(account.Email))
            yield return "Email not valid";
    }
}
</code></pre>

<p>After the refactoring, we have separate classes for each of the validation rules. The <em>AccountValidators</em> class composes all the other validators and provides the same uniform interface for the consumers to validate an account. It calls on to all the Validators iteratively and invokes the Validate method on them. You can use Dependency Injection to inject in all validators to this class if you are not comfortable hard-wiring them. The IoC container can be setup using <a href="http://www.rahulpnath.com/blog/ioc-registration-by-convention/">registration by convention</a>, which prevents the needs for explicit registration for any new validators.</p>

<p>One other worry that I have seen common when moving to such a pattern is that - <em>We now have a lot more classes. Does that not affect the performance?</em>. If you are following SOLID principles to the core and want to maintain loose coupling in your code then creating more classes is something you cannot avoid. We do not want any
<a href="http://wiki.c2.com/?GodClass">God Classes</a> in our code and the first step towards it is to split them into different classes.</p>

<blockquote><p><em>If an Object Oriented language cannot handle the creation of many classes and objects then why should we be using it in the first place?</em></p>

<p>-<em><a href="https://vimeo.com/68378923">Big Object Graphs Up Front, Mark Seemann</a></em></p></blockquote>

<p>The composition can be complex conditions as in the case below. For, e.g., let&rsquo;s say we need to execute a different kind of algorithm to calculate based on a property.</p>

<pre><code class="csharp">public class AccountCalculator : ICalculate
{
    public AccountCalculator(ICalculate calculate1, ICalculate calculate2, ICalculate calculate3)
    {
        ...
    }

    public int Calculate(Account account)
    {
        if(account.PropertyExists)
            return calculate1.Calculate();
        else
              return calculate2.Calculate() + calculate3.Calculate();
    }
}
</code></pre>

<p>The above composition makes it easy to test the composed parts and the composition separately. It also helps keep the tests simple and easy to understand. The code is separated into maintainable classes and each criteria can be modified independently.</p>

<p>Composite Pattern is a useful technique to keep code maintainable and readable. Identifying the pattern is a bit of a challenge, but the more you see it the more familiar you will be. Hope this helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Problems with Known Exceptions and Ignoring It]]></title>
    <link href="http://rahulpnath.com/blog/the-problems-with-known-exception-and-ignoring-it/"/>
    <updated>2017-03-21T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/the-problems-with-known-exception-and-ignoring-it</id>
    <content type="html"><![CDATA[<p>&ldquo;<em>Oh yes! That is an expected error. It is because…</em>&rdquo;.</p>

<p>How many times have you given that explanation yourself or heard the other developer tell that? Known errors or exceptions are common in applications and us developers find ways to live with such errors. At times when the number of such errors grows it becomes a problem directly or indirectly to the business. These known errors could either be exceptions in application logs, failed messages (commands/events) in a <a href="https://en.wikipedia.org/wiki/Event-driven_architecture">message based architecture</a>, alert popups in Windows client applications, etc.</p>

<p><img alt="Known Errors" src="/images/known_errors.png" /></p>

<p>We should try and keep known errors and exception count close to zero. Below are some of the problems that can happen by ignoring it over a period.</p>

<h4><strong>Business Value</strong></h4>

<p>Since the errors are known to us, we train ourselves or even the users to ignore them. It is easy to justify that fixing them does not have any business value as there is no direct impact. This assumption need not be true. If a piece of code has no value then why is it there in the first place? Possibly it is not having any visible effects at present but might be having an impact at a later point in time. It could also be that it is not affecting the data consistency of your system, but is a problem for an external system. There can be business flows that are written at a later point of time not being aware of this known error. Some developer time gets lost when glancing over such errors or messages in the log which directly equates to money for the business.</p>

<h4><strong>Important Errors Missed</strong></h4>

<p>If there are a lot of such known errors, it is easy for new or important ones to get missed or ignored. Depending on the frequency of the known error, it can end up flooding the logs. The logs start to get overwhelming to monitor or trace for other issues with lots of such known errors. The natural tendency for people when they find something overwhelming is to ignore it. I worked on a system which had over 250 failed messages coming to the error queue daily. It was overwhelming to monitor them and was soon getting ignored. Important errors were getting missed and often ended up as support requests for the application. Such errors otherwise could have been proactively handled, giving the end user more confidence.</p>

<h4><strong>Lower Perceived Stability</strong></h4>

<p>The overall perceived stability of the system comes down as more and more such errors happen. It is applicable both for the users and developers. When errors no longer get monitored or tracked, critical errors gets ignored. Users have to resort to other means like support requests for the errors they face. For users who are new to the system, it might take a while to get used to the known errors. These errors decrease the trust they have in the system and soon starts suspecting everything as an issue or a problem.</p>

<p>Seeing more and more of such errors does not leave a positive impact on the developers. It&rsquo;s possible that developers loose interest to work on an unstable system and start looking for a change. It is also a challenge when new members join the team. It takes time for them to get used to errors and exceptions and to learn to ignore them.</p>

<h4><strong>Stereotyping Exceptions</strong></h4>

<p>Errors of a particular type can get stereotyped together, and get ignored mistaking it for one that is already known. It is easy for different &lsquo;<em>object null reference exception</em>&rsquo; error messages to be treated as a particular error whereas it could be failing for various reasons. At one of my clients, we had a specific message type failing with the null reference error. We had identified the reason for one such message and found that it is not causing &lsquo;<em>any direct business impact</em>&rsquo; and can be ignored. The message was failing as one of the properties on the message was alphanumeric while the code expected numeric. The simple fix in the code would be to validate it, but since this was not causing any business impact it was ignored, and messages of that type kept piling up. Until later where we found that there were other message formats of the same message type failing which was for a different reason. And those messages were causing a loss of revenue to the business. But since we were stereotyping the error messages of the particular type to the one that we found invalid and not having a business impact all of such messages were ignored. The stereotyping resulted in the important message getting ignored.</p>

<h4><strong>Maintaining a Known Bugs Database</strong></h4>

<p>When having a large number of such errors, it is important to document a list of such errors.It forces us to a new document and also comes with the responsibility of maintaining it. For any new developers or users joining the system, they need to go through the documentation to verify if it is a known error or not. Internalizing these errors might take some time, and critical errors can get missed during this time. Any such document needs to be kept current and up to date as and when new errors are found or more details found for older ones. This is not the best of places where a developers time is spent.</p>

<h4><strong>Count Keeps Increasing</strong></h4>

<p>If the count of such errors is not monitored and not valued for the probability of the number of error messages increasing is higher. New errors getting introduced will not be noticed, and even when noticed it becomes acceptable. <em>We already have a lot of them, so it is fine.</em> It sets a wrong goal for the team and can soon become unmanageable.</p>

<h4><strong>New Business Flow Assuming Exception</strong>s</h4>

<p>Since the exceptions are so used to, it is highly possible that we set that as an expectation. New business flows come up expecting a certain kind of exception to be thrown or assuming a particular type of message will not get processed. Since we are so used to the fact that it happens, we take it for granted and start coding against it. It might be the last thing that happens on a project, but believe me, it happens!. Such code becomes harder to maintain and might not work once the actual exception gets fixed.</p>

<p>Ignoring exceptions and getting around to live with it can be more costly over a longer period. The further we delay action on such errors the higher the cost involved. Even though there is no immediate or direct business value seen from fixing such errors, we saw that on a longer run it could have a great impact. So try not to live with such errors but instead prioritize them with the work your team is doing and get it fixed. A fix might not always be an extra null check or a conditional to avoid the error. It might seem the easier approach to reducing the errors but will soon become a different problem. Understand the business and explore into what is causing the error. Do you have any known exceptions in the application you are working? What are you doing about it?</p>
]]></content>
  </entry>
  
</feed>
