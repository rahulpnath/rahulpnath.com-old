<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/category/programming/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2017-04-15T00:04:29+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Refactoring to Composite Pattern]]></title>
    <link href="http://rahulpnath.com/blog/refactoring-to-composite-pattern/"/>
    <updated>2017-04-13T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/refactoring-to-composite-pattern</id>
    <content type="html"><![CDATA[<p>I often come across functions that do multiple things. Many times such functions have a common pattern where multiple sections within the function use the same parameters for calculations. The results from these different code sections within the function are either separated by conditionals (if, switch, etc.) or combined using various arithmetic operators. The most obvious refactoring in such scenarios is to move the code sections into different functions within the same class. Having it in separate functions keeps the code readable. But on closer observation, such functions can be moved into different classes, keeping each of these code sections as the only responsibility.</p>

<h3>Identifying the Refactoring</h3>

<p>Within a function when a similar pattern of code repeats, it could be refactored into multiple classes and composed to give the same functionality. Let us take a simple example of a function where we are validating an Account object based on different criteria. The various criteria end up as conditionals within the function. This function can soon get big and difficult to manage. It also makes it harder to test. If you are adding more validations to this class over a period you are violating the Open-Closed Principle (OCP), the O in <a href="http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod">SOLID</a>. Depending on the level of abstraction that we are looking at, the class also violates the Single Responsibility Principle(SRP), the S in SOLID. The function handles validations based on different criteria.</p>

<pre><code class="csharp">public List&lt;string&gt; Validate(Account account)
{
    var result = new List&lt;string&gt;();

    if (string.IsNullOrEmpty(account.Email))
        result.Add("No email");
    else if (!IsValidEmailFormat(account.Email))
        result.Add("Email not valid");

    if (account.BillingDetails == null)
        result.Add("Billing Details does not exists");

    ...

    return result;
}
</code></pre>

<h3>The Composite Pattern</h3>

<p><a href="https://en.wikipedia.org/wiki/Composite_pattern">Composite pattern</a> is appropriate when the client ignores the difference between the composition of objects and individual objects. The pattern helps developers to maintain the complexity of the code and also separate out class responsibilities.</p>

<blockquote><p><em>Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly</em></p></blockquote>

<p><img alt="Composite Pattern" src="/images/composite_pattern.png" /></p>

<h3>Refactoring</h3>

<p>In the Account validation above, the function checks for an email and validates the format, checks for valid billing details, etc. The validations could also extend on to users attached to the account and check if there is at least one user, the user has email, phone number, etc. Each of these validations can be moved into separate classes and composed together in one class so that they are all executed when an account needs to be validated. You can see a tree like hierarchy forming here, and the actual validation is composed of all these validations</p>

<p><img alt="Account Validation hierarchy" src="/images/composite_pattern_validation.png" /></p>

<p>The actual C# code looks like this after the refactoring.</p>

<pre><code class="csharp">public interface IValidateAccount
{
    IEnumerable&lt;string&gt; Validate(Account account);
}

public class AccountValidators : IValidateAccount
{
    public readonly IEnumerable&lt;IValidateAccount&gt; Validators;
    public AccountValidators()
    {
        Validators = new List&lt;IValidateAccount&gt;()
        {
          new AccountHasEmailValidator(),
          new AccountEmailIsValidValidator(),
          new AccountHasBillingDetailsValidator()
          ... // Add more validators
        };
    }
    public IEnumerable&lt;string&gt; Validate(Account account)
    {
        return Validators.SelectMany(validator =&gt; validator.Validate(account));
    }
}

public class AccountHasEmailValidator : IValidateAccount
{
    public IEnumerable&lt;string&gt; Validate(Account account)
    {
        if (account != null &amp;&amp; string.IsNullOrEmpty(account.Email))
            yield return "No email";
    }
}

public class AccountEmailIsValidValidator : IValidateAccount
{
    public IEnumerable&lt;string&gt; Validate(Account account)
    {
        if (account != null &amp;&amp; account.Email != null &amp;&amp; !IsValidEmail(account.Email))
            yield return "Email not valid";
    }
}
</code></pre>

<p>After the refactoring, we have separate classes for each of the validation rules. The <em>AccountValidators</em> class composes all the other validators and provides the same uniform interface for the consumers to validate an account. It calls on to all the Validators iteratively and invokes the Validate method on them. You can use Dependency Injection to inject in all validators to this class if you are not comfortable hard-wiring them. The IoC container can be setup using <a href="http://www.rahulpnath.com/blog/ioc-registration-by-convention/">registration by convention</a>, which prevents the needs for explicit registration for any new validators.</p>

<p>One other worry that I have seen common when moving to such a pattern is that - <em>We now have a lot more classes. Does that not affect the performance?</em>. If you are following SOLID principles to the core and want to maintain loose coupling in your code then creating more classes is something you cannot avoid. We do not want any
<a href="http://wiki.c2.com/?GodClass">God Classes</a> in our code and the first step towards it is to split them into different classes.</p>

<blockquote><p><em>If an Object Oriented language cannot handle the creation of many classes and objects then why should we be using it in the first place?</em></p>

<p>-<em><a href="https://vimeo.com/68378923">Big Object Graphs Up Front, Mark Seemann</a></em></p></blockquote>

<p>The composition can be complex conditions as in the case below. For, e.g., let&rsquo;s say we need to execute a different kind of algorithm to calculate based on a property.</p>

<pre><code class="csharp">public class AccountCalculator : ICalculate
{
    public AccountCalculator(ICalculate calculate1, ICalculate calculate2, ICalculate calculate3)
    {
        ...
    }

    public int Calculate(Account account)
    {
        if(account.PropertyExists)
            return calculate1.Calculate();
        else
              return calculate2.Calculate() + calculate3.Calculate();
    }
}
</code></pre>

<p>The above composition makes it easy to test the composed parts and the composition separately. It also helps keep the tests simple and easy to understand. The code is separated into maintainable classes and each criteria can be modified independently.</p>

<p>Composite Pattern is a useful technique to keep code maintainable and readable. Identifying the pattern is a bit of a challenge, but the more you see it the more familiar you will be. Hope this helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Problems with Known Exceptions and Ignoring It]]></title>
    <link href="http://rahulpnath.com/blog/the-problems-with-known-exception-and-ignoring-it/"/>
    <updated>2017-03-21T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/the-problems-with-known-exception-and-ignoring-it</id>
    <content type="html"><![CDATA[<p>&ldquo;<em>Oh yes! That is an expected error. It is becauseâ€¦</em>&rdquo;.</p>

<p>How many times have you given that explanation yourself or heard the other developer tell that? Known errors or exceptions are common in applications and us developers find ways to live with such errors. At times when the number of such errors grows it becomes a problem directly or indirectly to the business. These known errors could either be exceptions in application logs, failed messages (commands/events) in a <a href="https://en.wikipedia.org/wiki/Event-driven_architecture">message based architecture</a>, alert popups in Windows client applications, etc.</p>

<p><img alt="Known Errors" src="/images/known_errors.png" /></p>

<p>We should try and keep known errors and exception count close to zero. Below are some of the problems that can happen by ignoring it over a period.</p>

<h4><strong>Business Value</strong></h4>

<p>Since the errors are known to us, we train ourselves or even the users to ignore them. It is easy to justify that fixing them does not have any business value as there is no direct impact. This assumption need not be true. If a piece of code has no value then why is it there in the first place? Possibly it is not having any visible effects at present but might be having an impact at a later point in time. It could also be that it is not affecting the data consistency of your system, but is a problem for an external system. There can be business flows that are written at a later point of time not being aware of this known error. Some developer time gets lost when glancing over such errors or messages in the log which directly equates to money for the business.</p>

<h4><strong>Important Errors Missed</strong></h4>

<p>If there are a lot of such known errors, it is easy for new or important ones to get missed or ignored. Depending on the frequency of the known error, it can end up flooding the logs. The logs start to get overwhelming to monitor or trace for other issues with lots of such known errors. The natural tendency for people when they find something overwhelming is to ignore it. I worked on a system which had over 250 failed messages coming to the error queue daily. It was overwhelming to monitor them and was soon getting ignored. Important errors were getting missed and often ended up as support requests for the application. Such errors otherwise could have been proactively handled, giving the end user more confidence.</p>

<h4><strong>Lower Perceived Stability</strong></h4>

<p>The overall perceived stability of the system comes down as more and more such errors happen. It is applicable both for the users and developers. When errors no longer get monitored or tracked, critical errors gets ignored. Users have to resort to other means like support requests for the errors they face. For users who are new to the system, it might take a while to get used to the known errors. These errors decrease the trust they have in the system and soon starts suspecting everything as an issue or a problem.</p>

<p>Seeing more and more of such errors does not leave a positive impact on the developers. It&rsquo;s possible that developers loose interest to work on an unstable system and start looking for a change. It is also a challenge when new members join the team. It takes time for them to get used to errors and exceptions and to learn to ignore them.</p>

<h4><strong>Stereotyping Exceptions</strong></h4>

<p>Errors of a particular type can get stereotyped together, and get ignored mistaking it for one that is already known. It is easy for different &lsquo;<em>object null reference exception</em>&rsquo; error messages to be treated as a particular error whereas it could be failing for various reasons. At one of my clients, we had a specific message type failing with the null reference error. We had identified the reason for one such message and found that it is not causing &lsquo;<em>any direct business impact</em>&rsquo; and can be ignored. The message was failing as one of the properties on the message was alphanumeric while the code expected numeric. The simple fix in the code would be to validate it, but since this was not causing any business impact it was ignored, and messages of that type kept piling up. Until later where we found that there were other message formats of the same message type failing which was for a different reason. And those messages were causing a loss of revenue to the business. But since we were stereotyping the error messages of the particular type to the one that we found invalid and not having a business impact all of such messages were ignored. The stereotyping resulted in the important message getting ignored.</p>

<h4><strong>Maintaining a Known Bugs Database</strong></h4>

<p>When having a large number of such errors, it is important to document a list of such errors.It forces us to a new document and also comes with the responsibility of maintaining it. For any new developers or users joining the system, they need to go through the documentation to verify if it is a known error or not. Internalizing these errors might take some time, and critical errors can get missed during this time. Any such document needs to be kept current and up to date as and when new errors are found or more details found for older ones. This is not the best of places where a developers time is spent.</p>

<h4><strong>Count Keeps Increasing</strong></h4>

<p>If the count of such errors is not monitored and not valued for the probability of the number of error messages increasing is higher. New errors getting introduced will not be noticed, and even when noticed it becomes acceptable. <em>We already have a lot of them, so it is fine.</em> It sets a wrong goal for the team and can soon become unmanageable.</p>

<h4><strong>New Business Flow Assuming Exception</strong>s</h4>

<p>Since the exceptions are so used to, it is highly possible that we set that as an expectation. New business flows come up expecting a certain kind of exception to be thrown or assuming a particular type of message will not get processed. Since we are so used to the fact that it happens, we take it for granted and start coding against it. It might be the last thing that happens on a project, but believe me, it happens!. Such code becomes harder to maintain and might not work once the actual exception gets fixed.</p>

<p>Ignoring exceptions and getting around to live with it can be more costly over a longer period. The further we delay action on such errors the higher the cost involved. Even though there is no immediate or direct business value seen from fixing such errors, we saw that on a longer run it could have a great impact. So try not to live with such errors but instead prioritize them with the work your team is doing and get it fixed. A fix might not always be an extra null check or a conditional to avoid the error. It might seem the easier approach to reducing the errors but will soon become a different problem. Understand the business and explore into what is causing the error. Do you have any known exceptions in the application you are working? What are you doing about it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Defensive Coding]]></title>
    <link href="http://rahulpnath.com/blog/defensive-coding/"/>
    <updated>2017-02-07T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/defensive-coding</id>
    <content type="html"><![CDATA[<p>Often when writing code or in code review discussions it comes up - &lsquo;<em>Should I be doing a null check here?</em>.&rsquo; and we start off long discussions. Like in most cases, there is no definite answer to this. In this post let us examine some of the pros and cons of having defensive checks and how and when we can avoid it to make the code more readable.</p>

<p><img alt="Defensive Coding" src="/images/defensive_coding.jpg" /></p>

<p>Let&rsquo;s see an example to explore more. The below code aggregated details from different repository classes and returns a combined model. I have kept this simple with just three dependencies.</p>

<pre><code class="csharp">public PersonDetails GetPersonDetails(Guid personId)
{
    var person = personRepository.GetPerson(personId);
    var subscriptionPlan = subscriptionRepository.GetSubscriptionForPerson(person.Email);
    var billingSummary = billingRepository.GetSummary(subscriptionPlan.Id);

    return new PersonDetails() {...};
}
</code></pre>

<p>As you see, there are no null checks on any of the values returned from external dependencies. The code expects all calls to be successful with no exceptions - &lsquo;<a href="https://en.wikipedia.org/wiki/Happy_path">happy path</a>&rsquo; scenario.
The problem is when an error happens; the exception stack trace will look like something below.</p>

<pre><code class="text">Object reference not set to an instance of an object.
at UserQuery.GetPersonDetails(Guid personId)
  at UserQuery.Main()
</code></pre>

<p>We will not be able to tell which of the values was null, making it hard to debug the error. We have to manually go through the code checking how each of the dependencies retrieves values and check which one possibly was null. Debugging takes a lot of time and might be difficult depending on the complexity of the dependencies. The advantage of the above code though is that it is readable and there is <strong><em>noise</em></strong> in the code.</p>

<h3>Extensive Defense</h3>

<p>Let us now modify the above example to see how it would be to add defensive code and check for nulls.</p>

<pre><code class="csharp">public PersonDetails GetPersonDetails(Guid personId)
{
    if (personId == Guid.Empty)
        throw new ArgumentNullException(nameof(personId);

    var person = personRepository.GetPerson(personId);
    if (person == null)
        throw new Exception("Person is null");

    if (person.Email == null)
        throw new Exception("Email is null for person " + personId);

    var subscriptionPlan = subscriptionRepository.GetSubscriptionForPerson(person.Email);
    if (subscriptionPlan == null)
        throw new Exception("Subscription Plan is null");

    var billingSummary = billingRepository.GetSummary(subscriptionPlan.Id);
    if (billingSummary == null)
        throw new Exception("BillingSummary is null");

    return new PersonDetails() { };
}
</code></pre>

<p> The defensive checks added for guarding against invalid values makes the code harder to read. Defensive checks are there for incoming parameters as well and validate if they are null/default value (for Guid). However when an error happens the stack trace will mention the name of the property which was null. Debugging is fast and easy and makes the exception message useful. But we don&rsquo;t want our code filled with defensive checks like this.</p>

<h3>Team Conventions and Practices</h3>

<p>Let us dig a bit deeper into why we had to put in the defensive checks in the first place. We had to check for null on <em>person</em> since the repository decided to return a null when it could not find the person given an id. Does it even make sense or add any value in returning a null reference from the repository? Unless the business works in a way that there is a high possibility of something returning null this does not add any value. Even in cases like that, we should revert to other options which we will see in a while. When most of the time we expect a person to exists, it is better for the repository to throw an exception right away that the person does not exist. If the validations and the defensive checks are performed at the boundaries, then we do not need to do a null check anymore when getting a person or any similar functions.</p>

<pre><code class="csharp">public Person GetPerson(Guid personId)
{
    if (personId == Guid.Empty)
        throw new ArgumentNullException(nameof(personId));

    var person = DataContext.Get(personId);
    if (person == null)
        throw new UserDoesNotExistsException("Person does not exists with id ", personId);

    return person;
} 
</code></pre>

<p>For cases where there are possibilities of a value existing or not you can resort to <a href="http://www.rahulpnath.com/blog/stronger-code-contracts/">Stronger Code Contracts</a>. Using the Maybe type to indicate a value might or might not be present is a good way to force defensive checks. Maybe type ensures that any consumer of the code handles the case where the object does not exist. Readability of the code also improves in this case.</p>

<p>If you have noticed in the above code when checking for null&rsquo;s, I checked the Email property for null as well. Setting up team conventions that properties cannot be null, help reduce defensive checks for it. You could use various techniques to ensure properties are not null like setting a default value for the property in the constructor, <a href="https://en.wikipedia.org/wiki/Null_Object_pattern">Null object pattern</a>, checking for null&rsquo;s when setting property values or modeling the object in a way that optional parameters are not direct properties on the object.</p>

<pre><code class="csharp">public class Person
{
    private Email email;

    public Person()
    {
       Email = Email.Empty;
    }

    public Email Email
    {
        get { return email; }
        set
        {
            if (value == null)
                throw new ArgumentNullException("email cannot be null");

            email = value;
        }
    }
}
</code></pre>

<p>With the updated repository code and the property changes, we can rewrite the original code much similar as it was before introducing the defensive checks. The guard clauses at the start of the function, checking for the parameters is still important. Validating for input parameters helps find the problems earlier in the code stack and follows the <a href="https://en.wikipedia.org/wiki/Fail-fast">fail fast</a> pattern. It helps us find exactly where the null was introduced and address the issue faster. The defensive code is at the beginning of the function and can be easily skipped over while reading. If you are not that keen to write this on all functions, you can also write some helper classes which Validates a list of parameters (<a href="https://msdn.microsoft.com/en-au/library/w5zay9db.aspx">params</a>). I prefer the explicit check and used to skipping over them when reading code.</p>

<pre><code class="csharp">public PersonDetails GetPersonDetails(Guid personId)
{
   if (personId == Guid.Empty)
        throw new ArgumentNullException(nameof(personId);

    var person = personRepository.GetPerson(personId);
    var subscriptionPlan = subscriptionRepository.GetSubscriptionForPerson(person.Email);
    var billingSummary = billingRepository.GetSummary(subscriptionPlan.Id);

    return new PersonDetails() {...};
}
</code></pre>

<h3>Value Objects and Defensive Coding</h3>

<p>Let us now look at other ways to improve defensive checks on properties. Modeling properties as <a href="http://www.rahulpnath.com/blog/thinking-beyond-primitive-values-value-objects/">Value Objects</a> helps contain the defensive code within the property. Like in the above case where email cannot be null, the checks to make sure that it is a valid email can be within the Email class. Containing this logic in the class removes the need for the rest of the code to check for it. If an email object exists, it will be valid. It is the same with names, date ranges, money, etc. The lesser we expose primitive type properties, the less defensive code we need to write. It also removes the problems of checking <em>string.IsNullOrEmpty</em> at some places and just for nulls at others.</p>

<p>Though this is not an extensive examination of all possible cases, we have still seen some common scenarios. Defensive coding is required. It is about striking a balance and making <a href="http://www.rahulpnath.com/blog/stronger-code-contracts/">code contracts stronger</a> to convey the intent. The defensive checks are within the classes responsible for the object and exist at a central place. It removes the need to check for it elsewhere in the code. This is a simple application of <a href="https://en.wikipedia.org/wiki/Encapsulation_(computer_programming">Encapsulation</a>. So the next time you check for null make sure it is where it should be!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Quick Launch in Visual Studio]]></title>
    <link href="http://rahulpnath.com/blog/quick-launch-in-visual-studio/"/>
    <updated>2017-02-02T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/quick-launch-in-visual-studio</id>
    <content type="html"><![CDATA[<p><img alt="Visual Studio Quick Launch" src="/images/visualstudio_quicklaunch.png" /></p>

<p>As a .NET developer, I spent the majority of my time in Visual Studio. Knowing to navigate fast within the IDE or quickly find what I want is important. Many times finding specific settings or navigating to individual windows can take a while, especially if you are not familiar with it and don&rsquo;t know exactly where to look. Visual Studio has a quick launch toolbar that is designed exactly for this. Be it opening the Package Manager Console or changing the font style you can use the quick launch to search and navigate to it.</p>

<blockquote><p><em>You can use <a href="https://msdn.microsoft.com/en-us/library/hh417697.aspx">Quick Launch</a> to quickly search and execute actions for IDE assets such as options, templates, menus. You can&rsquo;t use Quick Launch to search for code and symbols. The Quick Launch search box is located at the top-right corner of the menu bar and is accessible by choosing the <strong>Ctrl+Q</strong> keys.</em></p></blockquote>

<p>The added advantage is that you can use the quick launch bar to <strong><em>learn new keyboard shortcuts</em></strong>. Searching for an item also shows the keyboard shortcut for it next to it. Over time you can remember the direct keyboard shortcut and avoid quick launch as well.</p>

<p><img alt="Visual Studio Quick Launch learn keyboard shortcuts" src="/images/visualstudio_quicklaunch_keyboardShortcuts.png" /></p>

<p>Knowing the tools that you use is an important part of development. Able to navigate fast within the IDE enables to remove any time wasted poking around the IDE. Use that time to read and write code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Avoid State Mutation]]></title>
    <link href="http://rahulpnath.com/blog/avoid-state-mutation/"/>
    <updated>2017-02-01T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/avoid-state-mutation</id>
    <content type="html"><![CDATA[<p>How many times have you had to navigate down a long chain of function calls to find out that some code deep down was changing the value of an object passed to it? The change could either be setting the value to null or modifying the value in itself. When passing around reference types, it&rsquo;s easy to run into this situation very often.  This happens not just when debugging existing code, but also when looking at the code we have just finished writing. Maintaining state transitions and object state based on the order in which functions are invoked on them can soon become confusing and buggy. So the best way is to try and avoid them in the first place.</p>

<p><img alt="Avoid State Mutation" src="/images/mutation.png" /></p>

<h3>What is state Mutation</h3>

<p>The process of changing the value of a variable or an object over time after creation is called mutation. In simpler terms when you are changing the value of an object, you are mutating the state. I am sure that everyone would have had some time getting their head around the below statement when starting off with programming (I did)</p>

<pre><code class="csharp">var x = 1;
x = x + 1;
</code></pre>

<p>By second nature (depending on the programming languages one is exposed to e.g. csharp, java, etc.) you would say the above statement is perfectly fine and not think twice about anything. But show it to someone who is new to programming. They will find it hard to understand those two statements, the same phase that we have all gone through. &lsquo;=&rsquo; has turned into an assignment operator while it is an equality operator in mathematics. There are languages where &lsquo;=&rsquo; still stands for equality (like FSharp). In the example above the value of x is mutated - it is changed from 1 to 2.</p>

<blockquote><p><em>The process of actually changing a variableâ€™s value over time, within a single context, is called mutation.</em></p></blockquote>

<h3>Risks of Mutation</h3>

<p>Mutable types can pose risks when passing a mutable value as function parameters or when returning mutable values from functions.</p>

<h4><strong>Passing Mutable Value</strong></h4>

<p>Let us take a simple example below. I have a list of integers, and I want to check if the first item of the incoming list and the sorted one are same. I have a simple sort method which implements <a href="https://en.wikipedia.org/wiki/Bubble_sort">Bubble sort</a>. What do you think will be the output?</p>

<pre><code class="csharp">{
    var list = new List&lt;int&gt;() { 2, 1, 3 };
    var sortedList = Sort(list);
    if (sortedList.First() == list.First())
        Console.WriteLine("First item is in place");
}

public IEnumerable&lt;int&gt; Sort(IEnumerable&lt;int&gt; list)
{
    var listEvaluated = list as IList&lt;int&gt; ?? list.ToList();
    int size = listEvaluated.Count();
    for (int i = 1; i &lt; size; i++)
    {
        for (int j = 0; j &lt; (size - i); j++)
        {
            if (listEvaluated[j] &gt; listEvaluated[j + 1])
            {
                int temp = listEvaluated[j];
                listEvaluated[j] = listEvaluated[j + 1];
                listEvaluated[j + 1] = temp;
            }
        }
    }

    return listEvaluated;
}
</code></pre>

<p>Yes, it prints out the message that the <em>First item is in place</em>. Before getting into the details of the issue, let us set our expectations correct. When calling the Sort method, we do not expect it to change the contents of the original list. Given that the function&rsquo;s signature is that of a Query (returns a value), we expect it not to create any <a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science">side effects</a>). According to <a href="https://en.wikipedia.org/wiki/Command%E2%80%93query_separation">Command Query Separation</a> (CQS) by Bertrand Meyer in <a href="http://amzn.to/2hZ4P9C">Object Oriented Software Construction</a></p>

<blockquote><p><em>Every method should either be a command that performs an action, or a query that returns data to the caller, but not both. In other words, Asking a question should not change the answer. More formally, methods should return a value only if they are referentially transparent and hence possess no side effects.</em></p></blockquote>

<p>Applying CQS means that any method can either be a Query or a Command. A command changes the state of the system but does not return a value (void). A query does not change the state of the system and returns a value and should be idempotent. Such functions are also referred to as <a href="https://en.wikipedia.org/wiki/Pure_function">pure functions</a>. The above Sort function only partially confirms to being a query. It does return the same output given the same input, the sorted list. But it changes the state of the system and has side effects - it mutates the list passed. The issue in the implementation of the Sort is that it casts the list passed in as <em>IList<int></em>, if it is already one. So when the parameter list is of type IList, listEvaluated points to the same list. If you force copy the list irrespective of it being a list or not will fix the issue. I will discuss more on how this kind of a conditional evaluation got in here in a separate post.</p>

<pre><code class="csharp">var listEvaluated = list.ToList();
</code></pre>

<p>This kind of change is only possible if the development team owns the Sort function. If this is a third-party library that you are consuming then the only way to avoid the problem will be to send in a copy of the list. Even trying to pass the list <a href="https://msdn.microsoft.com/en-us/library/e78dcd75(v=vs.110).aspx">AsReadOnly</a> will not work here. Check it out if you are not sure why.</p>

<pre><code class="csharp">var sortedList = Sort(list.ToList());
</code></pre>

<p>The above solution does not imply that every time we need to pass in a list to a function we should defensively copy it (using ToList). <em>It depends</em>. Within a development team, there can be a convention that it sticks to CQS principle. In case of exceptions, make sure that it is communicated to everyone. Communication to developers is done best by naming the function to reflect that or adding a comment that shows up in the IDE intellisense (if any). For code that you consume from third parties or open sources make sure you understand well how the library behaves and check the documentation before using it. Ensure you have <a href="http://www.rahulpnath.com/blog/category/tdd/">unit tests</a> asserting the assumptions and behavior in all cases.</p>

<h4><strong>Returning Mutable Values</strong></h4>

<p>Let us take an example to see the possible effects of returning mutable values from a function. Below is a configuration helper class which returns a configuration object. The helper method is used in three different places of the application shown as <em>config1, config2, config3</em>. In one of the cases, the business logic requires the Duration value to be twice that in configuration. Since the real configuration helper reaches out to the database for its values, it was decided to cache the values after the first call. The ConfigurationHelper uses &lsquo;<em><a href="https://en.wikipedia.org/wiki/Singleton_pattern">Singleton Pattern</a></em> to achieve the caching Below is the implementation. Do you see any problems?</p>

<pre><code class="csharp">{
    var config1 = ConfigurationHelper.Get();
    Console.WriteLine(config1);
    ...
    var config2 = ConfigurationHelper.Get();
    config2.Duration = config2.Duration * 2;
    Console.WriteLine(config2);
    ...
    var config3 = ConfigurationHelper.Get();
    Console.WriteLine(config3);
}

public class ConfigurationHelper
{
    private static Configuration configuration;
    public static Configuration Get()
    {
        if (configuration == null)
            configuration = new Configuration { Duration = 1 };

        return configuration;
    }
}

public class Configuration
{
    public int Duration { get; set; }
}
</code></pre>

<p>The first caller will get the configuration value 1, as expected. The second caller also gets the configuration value 1, but it goes on to set the value as two times, so it becomes 2. The third caller, which does not have any idea of the second caller or its specific business requirements also gets the configuration value as 2. They get a wrong configuration because the second caller updated the same object that the ConfigurationHelper holds. Again this is a side effect of how the ConfigurationHelper returns the configuration. There are two or more ways to solve this problem. The ConfigurationHelper class can return a new instance of the Configuration class every time someone requests for it. To return a new instance requires removing the private variable and the conditional check associated with it. Removing the check is similar to the defensive copying that we discussed in the previous example and also every call to get the configuration, now needs to hit the database. One could argue that only one caller mutates the object and it is unnecessary to create a new instance for the rest. We can remove the public setter&rsquo;s on the Configuration class properties. Without a setter, the second caller cannot change the Duration property of the Configuration class. Removing the setter means that we add a constructor as well to take in the parameters that it requires as below.</p>

<pre><code class="csharp">public class Configuration
{
    public int Duration { get; private set; }

    public Configuration(int duration)
    {
            Duration = duration;
    }
}
</code></pre>

<p>The above ensures that nobody can change the value of the configuration object once created. So the second caller can longer assign the new duration value to the same object. If it wants to continue using a configuration object it needs to create a new Configuration object with the new duration. If there are more properties on the configuration object you can create extension methods like WithDuration to create a new Configuration class copying all the values as is from the old object and replace just the Duration.</p>

<pre><code class="csharp">public static class ConfigurationExtension
{
    public static Configuration WithDuration(this Configuration configuration, int duration)
    {
        return new Configuration(duration, configuration.OtherValue);
    }
}
</code></pre>

<p>As we have seen the above two cases, mutation can cause undesired effects unless those are intended for. It does not mean that mutating is bad and you should stop it immediately. But if you start writing your code using immutable types, <a href="http://www.rahulpnath.com/blog/thinking-beyond-primitive-values-value-objects/">Value Objects</a>, etc. you will slowly move to a point where you no longer need to mutate values. When you do not mutate state, it is easier to reason about code. You no longer need to wade through those method calls to find who is changing the value of a property. Immutability is one of the key features of functional languages and changes how programs are written. You take away most of the problems involved in multi-threading when a function can no longer mutate the state of the object. So the next time you make change check if you are changing the state of the object, think twice and see if you can find a way around!</p>

<p><strong>References:</strong></p>

<ul>
<li><a href="http://web.cs.wpi.edu/~cs2102/common/kathi-notes/mutation-part2.html">Mutation</a></li>
<li><a href="http://web.mit.edu/6.005/www/fa15/classes/09-immutability/">Mutability &amp; Immutability</a></li>
<li><a href="https://www.cs.utexas.edu/~wcook/anatomy/anatomy.htm#Mutable">Mutable State</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
