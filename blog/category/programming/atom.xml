<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/category/programming/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2017-12-14T00:02:07+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generating a Large PDF from Website Contents - Merging PDF Files]]></title>
    <link href="http://rahulpnath.com/blog/generating-a-large-pdf-from-website-contents-part-iii/"/>
    <updated>2017-09-19T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/generating-a-large-pdf-from-website-contents-part-iii</id>
    <content type="html"><![CDATA[<p>In the previous post, <a href="http://www.rahulpnath.com/blog/generating-a-large-pdf-from-website-contents-part-ii/">Generating a Large PDF from Website Contents - HTML to PDF, Bookmarks and Handling Empty Pages</a>, we saw how to generate a PDF from HTML and add bookmarks to the generated PDF files. The PDF file generated is for an individual section which now needs to be merged to form a single PDF file. The individual PDF files contain the relevant content for the section and related bookmarks, which needs to be combined into a single PDF file.</p>

<p>One of the important things to keep intact when merging is the document hierarchy. The Sections, Sub-Categories, and Categories should align correctly so that the final bookmark tree and the Table of Contents appear correctly. It is best to maintain the list of individual PDF document streams in the same hierarchy as required. Since we know the required structure right from the UI, this can be easily achieved by using a data structure similar as shown below</p>

<pre><code class="csharp">public class DocumentSection
{
    public MemoryStream PDFDocument {get; set;}

    public List&lt;DocumentSection&gt; ChildSections {get; set;}

    ... // Any additional details that you need
}
</code></pre>

<p>The above structure allows us to maintain a tree-like structure of the document. The structure is the same as that is provided to the user to select the PDF options. I used the <a href="https://www.nuget.org/packages/iTextSharp-LGPL/">iTextSharp</a> library to merge PDF documents. To interact with the PDF, we first need to create a PdfReader object from the stream. Using the  SimpleBookmark class, we can get the existing bookmarks for the PDF.</p>

<pre><code class="csharp">var pdfReader = new PdfReader(stream);
ArrayList bookmarks = SimpleBookmark.GetBookmark(pdfReader);
</code></pre>

<p>iText representation of bookmarks is a bit complex. It represents them as an ArrayList of Hashtables. The Hashtable has keys like Action, Title, Page, Kids, etc. Kids property represents child bookmarks and is the same ArrayList type. Since it was hard to work with this structure, I created a wrapper class to interact easily with the bookmarks.</p>

<pre><code class="csharp">public class Bookmark
{
    public Bookmark(
        string title, string destinationType, int pageNumber, 
        float xLeft, float yTop, float zZoom)
    {
        Children = new List&lt;Bookmark&gt;();
        Title = title;
        PageNumber = pageNumber;
        DestinationType = destinationType ?? "XYZ";
        XLeft = xLeft;
        YTop = yTop;
        ZZoom = zZoom;
        PageBreak = false;
    }

    ... // Class properties for the constructor parameters

    public ArrayList ToiTextBookmark()
    {
        ArrayList arrayList = new ArrayList
        {
            ToiTextBookmark(this),
        };
        return arrayList;
    }

    private Hashtable ToiTextBookmark(Bookmark bookmark)
    {
        var kids = new ArrayList();
        var hashTable = new Hashtable
        {
            ["Action"] = "GoTo",
            ["Title"] = bookmark.Title,
            ["Page"] = $@"{bookmark.PageNumber} {bookmark.DestinationType} 
                         {bookmark.XLeft} {bookmark.YTop} {bookmark.ZZoom}",
            ["Kids"] = kids,
        };

        foreach (var childBookmark in bookmark.Children)
        {
            kids.Add(ToiTextBookmark(childBookmark));
        }

        return hashTable;
    }
}
</code></pre>

<p>Recursively iterating through the list of DocumentSections, I add all the bookmarks to a root Bookmark class. The root bookmark class represents the full bookmark of the PDF file. The PageNumber is offset using a counter variable. The counter variable is incremented by the number of pages in each of PDF section (<em>pdfReader.NumberOfPages</em>) as it gets merged to the bookmark root. This ensures that the bookmark points to the correct bookmark page in the combined PDF file.</p>

<p>The individual documents are then merged by iterating through all the generated document sections. Once done we get the final PDF as a byte array which is returned to the user.</p>

<pre><code class="csharp">public byte[] MergeSections(List&lt;DocumentSection&gt; documentSections, Bookmark bookmarkRoot)
{
    int pageNumber = 0;
    using (var stream = new MemoryStream())
    {
        var document = new Document();
        var pdfWriter = PdfWriter.GetInstance(document, stream);
        document.Open();
        var pdfContent = pdfWriter.DirectContent;
        MergeSectionIntoDocument(documentSections, document, pdfContent, pdfWriter, pageNumber);
        pdfWriter.Outlines = bookmarkRoot.ToiTextBookmark();
        document.Close();
        stream.Flush();
        return stream.ToArray();
    }
}

private void MergeSectionIntoDocument(
    List&lt;DocumentSection&gt; documentSections,
    Document document,
    PdfContentByte pdfContent,
    PdfWriter pdfWriter,
    int pageNumber)
{
    foreach (var documentSection in documentSections)
    {
        var stream = documentSection.DocumentStream;
        stream.Position = 0;
        var pdfReader = new PdfReader(stream);

        for (var i = 1; i &lt;= pdfReader.NumberOfPages; i++)
        {
            var page = pdfWriter.GetImportedPage(pdfReader, i);
            document.SetPageSize(new iTextSharp.text.Rectangle(0.0F, 0.0F, page.Width, page.Height));
            document.NewPage();
            pageNumber++;
            pdfContent.AddTemplate(page, 0, 0);
            this.AddPageNumber(pdfContent, document, pageNumber);
        }

        if(documentSection.ChildSections.Any())
            MergeSectionIntoDocument(documentSection.ChildSections, document, pdfContent, pdfWriter, pageNumber);
    }
}
</code></pre>

<p>To generate a Table of Contents (ToC), we can use the root bookmark information. We need to manually create a PDF page, read the bookmark text and add links to the page with the required font and styling. iText provides API&rsquo;s to create custom PDF pages.</p>

<p>We are now able to generate a single PDF based on the website contents.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NDC Sydney 2017]]></title>
    <link href="http://rahulpnath.com/blog/ndc-sydney-2017/"/>
    <updated>2017-08-21T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/ndc-sydney-2017</id>
    <content type="html"><![CDATA[<p>Last week was a busy one at <a href="http://ndcsydney.com/">NDC Sydney</a> and was happy to be back there <a href="http://www.rahulpnath.com/blog/ndc-sydney/">for the second time</a>.The conference was three days long with 117 speakers, 37 technologies, and 151 talks. Some of the popular speakers were <a href="https://fsharpforfunandprofit.com/">Scott Wlaschin</a>, <a href="http://odetocode.com/about/scott-allen">Scott Allen</a>,<a href="https://www.troyhunt.com/">Troy Hunt</a>, <a href="https://twitter.com/DamianEdwards">Damian Edwards</a>, <a href="http://blog.stevensanderson.com/">Steve Sanderson</a> and <a href="http://ndcsydney.com/speakers/">a lot more</a>.</p>

<p><img class="center" alt="NDC Sydney" src="/images/ndc_sydney_2017.png" /></p>

<h3>Sessions</h3>

<p>Each talk is one hour long and <a href="http://ndcsydney.com/agenda/">eight talks happen at the same time</a>. Below are the talks I attended:</p>

<ul>
<li><a href="http://ndcsydney.com/talk/keynote-using-eeg-and-machine-learning-to-perform-lie-detection/">Keynote: Using EEG and Machine Learning to Perform Lie Detection</a></li>
<li><a href="http://ndcsydney.com/talk/a-teams-transition-to-continuous-delivery-1/">A teams transition to Continuous Delivery</a></li>
<li><a href="http://ndcsydney.com/talk/docker-from-scratch/">Docker, FROM scratch</a></li>
<li><a href="http://ndcsydney.com/talk/technical-debt/">The Technical Debt Prevention Clinic</a></li>
<li><a href="http://ndcsydney.com/talk/how-to-start-and-run-a-software-lifestyle-business/">How to start and run a software lifestyle business</a></li>
<li><a href="http://ndcsydney.com/talk/asynchronous-programming-from-the-ground-up/">Asynchronous Programming From The Ground Up</a></li>
<li><a href="http://ndcsydney.com/talk/building-docker-applications-with-net-tooling-cross-platform-support-and-migration/">Building Docker Applications with .NET - tooling, cross platform support and migration</a></li>
<li><a href="http://ndcsydney.com/talk/hack_your_career/">Hack Your Career</a></li>
<li><a href="http://ndcsydney.com/talk/writing-high-performance-code-in-net/">Writing high performance code in .NET</a></li>
<li><a href="http://ndcsydney.com/talk/growing-serverless-code-with-azure-functions-and-f/">Growing Serverless code with Azure Functions and F#</a></li>
<li><a href="http://ndcsydney.com/talk/the-websites-down-stories-and-lessons-on-keeping-your-website-up/">&ldquo;The website&rsquo;s down!&rdquo; Stories and lessons on keeping your website up</a></li>
<li><a href="http://ndcsydney.com/talk/self-aware-applications-automatic-production-monitoring/">Self-Aware Applications: Automatic Production Monitoring</a></li>
<li><a href="http://ndcsydney.com/talk/domain-modeling-made-functional/">Domain Modeling Made Functional</a></li>
<li><a href="http://ndcsydney.com/talk/interactive-c-development-with-roslyn/">Interactive C# Development with Roslyn</a></li>
<li><a href="http://ndcsydney.com/talk/building-resilient-applications-in-microsoft-azure/">Building Resilient Applications In Microsoft Azure</a></li>
<li><a href="http://ndcsydney.com/talk/functional-design-patterns/">Functional Design Patterns</a></li>
<li><a href="http://ndcsydney.com/talk/logic-vs-side-effects-functional-goodness-you-dont-hear-about/">Logic vs. side effects: functional goodness you don&rsquo;t hear about</a></li>
<li><a href="http://ndcsydney.com/talk/how-one-team-built-their-first-microservice/">How one team built their first microservice</a></li>
</ul>


<p>All sessions are recorded and are <a href="https://vimeo.com/ndcconferences">available here</a>. The Sydney 2017 ones will soon be there. Overall it was a good event but did not match the one last year. Last year there were more of the popular speakers and the talk content was also more interesting. But still, I am glad that NDC Sydney is still happening, and it gives a good exposure and networking possibilities for developers. Thanks to Readify for sponsoring my tickets and it’s one of the <a href="http://www.rahulpnath.com/blog/finding-a-job-abroad/">good things about working with Readify</a>.</p>

<p>Hope to see you next year as well!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating a Large PDF from Website Contents - HTML to PDF, Bookmarks and Handling Empty Pages]]></title>
    <link href="http://rahulpnath.com/blog/generating-a-large-pdf-from-website-contents-part-ii/"/>
    <updated>2017-08-16T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/generating-a-large-pdf-from-website-contents-part-ii</id>
    <content type="html"><![CDATA[<p>In the previous post, <a href="/blog/generating-a-large-pdf-from-website-contents">Generating a Large PDF from Website Contents</a> we saw from a high level the approach taken to generate PDF files from a Content Management System (CMS) website. In this post, we will delve further into the details of each of those areas.</p>

<h3>HTML To PDF</h3>

<p>There are a lot of libraries and services that support converting HTML to PDF. We chose this mechanism mainly for keeping the content formatting simple and reusable. Most of the PDF data was to be structured like the website content. This means we can reuse (read copy/paste) the HTML styling for the PDF content as well.</p>

<p>We used <a href="https://www.essentialobjects.com/Products/EOPdf/Default.aspx">Essential Objects HTML to PDF Converter</a> library. Our website is hosted as an Azure Web App and the <a href="https://www.essentialobjects.com/doc/pdf/install/deploy.aspx">Essential Objects library does not work in the Azure sandbox environment</a>. The <a href="https://github.com/projectkudu/kudu/wiki/Azure-Web-App-sandbox#pdf-generation-from-html">Azure Sandbox restriction</a> affects most of the HTML to PDF libraries. The recommended approach to use those libraries is to host the PDF conversion logic on an Azure Virtual Machine, which is what we also ended up doing. Alternatively, you can choose to use one of the <a href="https://stackoverflow.com/questions/5344176/is-there-a-web-service-for-converting-html-to-pdf">HTML to PDF hosted services</a>.</p>

<p>The below code snippet is what you need to convert an HTML URL endpoint to PDF. It uses the HtmlToPdf class from the <a href="https://www.nuget.org/packages/EO.Pdf/">EO.Pdf Nuget package</a>. The HtmlToPdfOptions specifies various conversion and formatting options. You can set margin space, common headers, footers, etc. for the generated PDF content. It also provides extensibility points in the PDF conversion pipeline.</p>

<pre><code class="csharp">public FileContentResult Convert(string url)
{
    var pdfStream = new MemoryStream();
    var pdfDocument = new PdfDocument();
    var pdfOptions = this.GetPdfOptions();

    var result = HtmlToPdf.ConvertUrl(url, pdfDocument, pdfOptions);
    pdfDocument.Save(pdfStream);

    return new FileContentResult(pdfStream.ToArray(), "application/pdf");
}
</code></pre>

<blockquote><p><strong><em>HTML Formatting Tip</em></strong></p>

<p><em>You might want to avoid content being split across multiple pages. E.g., images, charts, etc. In this cases, you can use the <a href="https://css-tricks.com/almanac/properties/p/page-break/">page-break-*</a> CSS property to adjust page breaks. <a href="https://www.essentialobjects.com/doc/pdf/htmltopdf/paging.aspx">Essentials objects honors the page-break-*</a> settings and adjusts the content when converting into PDF.</em></p></blockquote>

<h3>Bookmarks</h3>

<p><em>A <a href="https://helpx.adobe.com/acrobat/using/page-thumbnails-bookmarks-pdfs.html#about_bookmarks">bookmark</a> is a type of link with representative text in the Bookmarks panel in the navigation pane. Each bookmark goes to a different view or page in the document. Bookmarks are generated automatically during PDF creation from the table-of-contents entries of a document.</em></p>

<p>We generate a lot of small PDF files (per section and category/sub-category) and then merge them together to form the larger PDF. Each of the sections has one or more entries towards Table Of Contents (TOC). We decided to generate bookmarks first per each generated PDF. When merging the individual PDF, the bookmarks are merged first, and then the TOC is created from the full bookmark tree.</p>

<p>Bookmarks can be created automatically or manually using Essential Objects library. Most of the other libraries also provide similar functionality. Using the <a href="https://www.essentialobjects.com/doc/EO.Pdf.HtmlToPdfOptions.AutoBookmark.html">AutoBookmark property</a> we can have bookmarks created automatically based on HTML header (H1-H6) elements. If this does not fit with your scenario, then you can create them manually. In our case, we insert hidden HTML tags to specify bookmarks. Bookmark hierarchy is represented using custom attributes as shown below.</p>

<pre><code class="html">&lt;a class="bookmark" id="TOC_Category1" name="Category1"&gt;Category 1&lt;/a&gt;
...
&lt;a class="bookmark" id="TOC_Category1_Section1" name="Section1" tocParent="TOC_Category1"&gt;Section 1&lt;/a&gt;
...
&lt;a class="bookmark" id="TOC_Category1_Section2" name="Section2" tocParent="TOC_Category1"&gt;Section 2&lt;/a&gt;
...
</code></pre>

<p>Once the PDF is created from the URL, we parse the HTML content for elements with <em>bookmark</em> class and manually add the bookmarks into the generated PDF. The <em><a href="https://www.essentialobjects.com/doc/EO.Pdf.HtmlDocument.GetElementsByClassName_overload_1.html">GetElementsByClassName</a></em> and the <em><a href="https://www.essentialobjects.com/doc/EO.Pdf.HtmlElement.CreateBookmark_overloads.html">CreateBookmark</a></em> methods help us to create bookmarks from the hidden HTML elements in the page.</p>

<pre><code class="csharp">{
 ...
 var result = HtmlToPdf.ConvertUrl(url, pdfDocument, pdfOptions);
 BuildBookmarkTree(pdfDocument, result);
 pdfDocument.Save(pdfStream);
 ...
}

private static void BuildBookmarkTree(PdfDocument pdfDocument, HtmlToPdfResult htmlToPdfResult)
{
    var bookmarkElements = htmlToPdfResult.HtmlDocument.GetElementsByClassName("bookmark");
    foreach (var htmlElement in bookmarkElements)
    {
        var bookmark = htmlElement.CreateBookmark();
        ... // Custom logic to build the bookmark hierarchy
        // based on custom attributes or whatever approach you choose.

        pdfDocument.Bookmarks.Add(bookmark);
    }
}
</code></pre>

<h3>Handling Empty Pages</h3>

<p>In our case, the content is from a CMS, and the user gets an option to select what categories/sub-categories and sections of data to be displayed in the generated PDF. At times it happens that some of the selected combinations might not have any data in the system. To avoid printing a blank page (or an error page) in the generated PDF, we can check the conversion result to check for the returned content. Whenever the content does not exists the HTML endpoint returns an <a href="https://msdn.microsoft.com/en-us/library/system.web.mvc.emptyresult(v=vs.118">EmptyResult class</a>.aspx). At the PDF conversion side, you can check if the response is empty and accordingly perform your logic to ignore the generated PDF.</p>

<pre><code class="csharp">public static class HtmlToPdfResultExtensions
{
    public static bool IsEmptyResponse(this HtmlToPdfResult htmlToPdfResult)
    {
        return htmlToPdfResult != null &amp;&amp;
            htmlToPdfResult.HtmlDocument != null &amp;&amp;
            htmlToPdfResult.HtmlDocument.Body != null &amp;&amp;
            string.IsNullOrEmpty(htmlToPdfResult.HtmlDocument.Body.InnerText);
    }
}
</code></pre>

<p>Once the individual PDF files are created for each of the section and category/subcategory combination, we can merge them together to generate the full PDF. We will see in the next post how to merge the bookmarks together along with shifting the PDF pages and generating Table of Contents from the bookmarks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating a Large PDF from Website Contents]]></title>
    <link href="http://rahulpnath.com/blog/generating-a-large-pdf-from-website-contents/"/>
    <updated>2017-08-08T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/generating-a-large-pdf-from-website-contents</id>
    <content type="html"><![CDATA[<p>At one of my recent clients, we had a requirement to generate a PDF dynamically based on the contents of the website. The website is a Content Management System (CMS) built on top of <a href="https://umbraco.com/">Umbraco</a>. The content is grouped into different categories and sub-categories. Each category and sub-category had different sections/sub-sections under that. Some sections are optional for certain categories, and all of these are dynamic. In this post, I will walk through at high level the approach taken to solve the problem.</p>

<p>The user selects the categories/sub-categories and the sections that they wish to export as PDF. On submit, a PDF needs to be generated based on the website content.</p>

<pre><code class="csharp Model Structure of Domain">public class Category
{
    public string Name { get; set; }
    public List&lt;Section&gt; Sections { get; set; }
    public List&lt;Category&gt; SubCategory { get; set; }
}

public class Section
{
    public string Name { get; set; }
    public List&lt;Section&gt; SubSections { get; set; }
}
</code></pre>

<p><img src="/images/pdf_generation.png" class="center" alt="Select options to download" /></p>

<p>The actual site had one more level of options (say sub-sections), so you can imagine the number of possible combinations to generate the content. The site content was huge as well, and a PDF with all options selected would be around 4000-5000 pages. So creating the PDF every time some one clicks the button was out of the question. We had to cache the generated PDF&rsquo;s and serve them as the request comes in. But the challenge was how to manage the cache so that we can build up the PDF based on the options selected.</p>

<div class="alert alert-info">
If you are using HTML to PDF libraries be aware that most of the libraries out there (<a href="https://www.essentialobjects.com/Products/EOPdf/Default.aspx">Essential Object</a>, <a href="http://www.evopdf.com/">EvoPDF</a> etc.) <strong>does not work on Azure Web Apps</strong>. This is because of the <a href="https://github.com/projectkudu/kudu/wiki/Azure-Web-App-sandbox#pdf-generation-from-html">sandbox restrictions</a> on the applications irrespective of the Azure plan you are on. The preferred solution is to host the conversion code on a VM. If you find that an overhead (which it is) consider using the SAAS alternatives for converting HTML to PDF.
</div>


<p>Below is the flow diagram of the complete process of generating the PDF as a request comes. The request specifies the categories/sub-categories along with the sections that need to be in the generated PDF.</p>

<p><img src="/images/pdf_generation_flow.png" class="center" alt="PDF Generation Flow" /></p>

<p>We decided to create a PDF file for each section per category/subcategory selection. Once all the sections are ready, all the PDF files will be merged into one. While merging we also build up the bookmark tree and the table of contents. Inserting the table of contents page at the start of the PDF requires pushing all the page numbers to match the new ones.</p>

<p>The PDF layout for individual sections per category/subcategory is in HTML. The application exposes endpoints for the HTML content for the different sections. We used <a href="https://www.essentialobjects.com/Products/EOPdf/Default.aspx">Essential Object HTML to PDF Converter</a> to convert the HTML to PDF files. Bookmarks for the associated section are embedded in HTML. While converting to PDF, the bookmarks get added to the PDF, which later gets merged into the full bookmark tree. The generated PDF file is cached for any new requests.</p>

<p>Since we have around forty categories/sub-categories, twelve section, and ten sub-sections, generating the full PDF take a while. So we generate the cache at fixed intervals and as required (when content is updated in the CMS). The above approach of generating PDF files has been working fine for us. Since the individual PDF sections are generated in isolation, it gives us the flexibility to scale the generation process as required. Combining the generated PDF files is often fast and can be cached at a different level as well to speed up the whole process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Azure Web App Restarting Automatically Due to Overwhelming Change Notification]]></title>
    <link href="http://rahulpnath.com/blog/azure-web-restarting-automatically-due-to-overwhelming-change-notification/"/>
    <updated>2017-07-24T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/azure-web-restarting-automatically-due-to-overwhelming-change-notification</id>
    <content type="html"><![CDATA[<p>At one of my clients, we faced a strange issue recently. The Azure Web application restarted automatically very often. The event log in the <a href="https://github.com/projectkudu/kudu/wiki/Kudu-console">Kudu console</a> showed the below error message.</p>

<blockquote><p><em>2017-07-13 00:09:50,333 [P45516/D4/T171] INFO  Umbraco.Core.UmbracoApplicationBase - Application shutdown. Details: HostingEnvironment</em></p>

<p><em>_shutDownMessage=Directory rename change notification for &rsquo;D:\home\site\wwwroot&#8217;.</em>  <br/>
<em>Overwhelming Change Notification in wwwroot</em>   <br/>
<em>HostingEnvironment initiated shutdown</em>  <br/>
<em>Directory rename change notification for &rsquo;D:\home\site\wwwroot&#8217;.</em>   <br/>
<em>Overwhelming Change Notification in wwwroot</em>   <br/>
<em>Initialization Error</em>   <br/>
<em>HostingEnvironment caused shutdown</em></p></blockquote>

<p>As you can tell from the logs, the website is an <a href="https://umbraco.com/">Umbraco</a> CMS hosted as an Azure Web application. We noticed that the restarts were happening more when the content was getting updated through <a href="https://our.umbraco.org/documentation/getting-started/backoffice/">backoffice</a>. The error also states that the restart was caused due to <em>Overwhelming Change Notification in wwwroot</em>. This hints that there are changes that are happening under the wwwroot folder, where the site is hosted.</p>

<div class="alert alert-info">
Even though this post details on why the specific site on Umbraco was restarting, most of the contents are still applicable for any other ASP.NET MVC application.
</div>


<h3>fcnMode Configuration</h3>

<p>A quick search got me to the <a href="https://msdn.microsoft.com/en-us/library/system.web.configuration.httpruntimesection.fcnmode(v=vs.110">fcnMode</a>.aspx)setting under <a href="https://msdn.microsoft.com/en-us/library/system.web.configuration.httpruntimesection(v=vs.110">httpRuntime</a>.aspx) section. An ASP.net application monitors certain files and folders under the wwwroot folder and will restart the application domain whenever it detects changes. This likely look looks the reason why the web site is restarting.</p>

<p>The <a href="https://msdn.microsoft.com/en-us/library/system.web.configuration.fcnmode(v=vs.110">fcnMode enumeration</a>.aspx) can take one of the four values below. For an Umbraco application this is by <a href="http://issues.umbraco.org/issue/U4-7712">default set to <em>Single</em></a>.</p>

<ul>
<li><strong>Default</strong>: For each subdirectory, the application creates an object that monitors the subdirectory. This is the default behavior.</li>
<li><strong>Disabled</strong>: File change notification is disabled.</li>
<li><strong>NotSet</strong>: File change notification is not set, so the application creates an object that monitors each subdirectory. This is the default behavior.</li>
<li><strong>Single</strong>: The application creates one object to monitor the main directory and uses this object to monitor each subdirectory.</li>
</ul>


<pre><code class="xml fcnMode set to Single for Umbraco application">&lt;system.web&gt;
    ...
    &lt;httpRuntime 
        requestValidationMode="2.0" 
        enableVersionHeader="false"
        targetFramework="4.5"
        maxRequestLength="51200" 
        fcnMode="Single" /&gt;
    ...
&lt;system.web&gt;
</code></pre>

<blockquote><p><em>FCNMode creates a monitor object with a buffer size of 4KB for each folder. When FCNMode is set to Single, a single monitor object is created with a buffer size of 64KB. When there are file changes, the buffer is filled with file change information. If the buffer gets overwhelmed with too many file change notifications an “Overwhelming File Change Notifications” error will occur and the app domain will recycle. The likelihood of the buffer getting overwhelmed is higher in an environment where you are using separate file server because the folder paths are much larger.</em></p>

<p>-<a href="http://www.dnnsoftware.com/community-blog/cid/154980/aspnet-file-change-notifications-and-dnn"> ASP.NET File Change Notifications and DNN</a></p></blockquote>

<p>You can read more about fcnMode setting and how it affects ASP.Net applications <a href="https://shazwazza.com/post/all-about-aspnet-file-change-notification-fcn/">here</a>.</p>

<h3>What&rsquo;s causing file changes?</h3>

<p>Default reaction when you come across such a setting or configuration value might be to turn that off and fcnMode does allow that as well - <em>Disabled</em>. But first, it is better that we understand what is causing file changes under the wwwroot folder and see if we can address that. The <a href="https://shazwazza.com/post/fcn-file-change-notification-viewer-for-aspnet/">FCN Viewer</a> helps visualize how many files and folders are being watched in as ASP.Net application.</p>

<p>In the Umbraco website, we are using a third party library <a href="http://imageprocessor.org/">ImageProcessor</a> that helps to process images dynamically. The ImageProcessor caches images and the <a href="http://imageprocessor.org/imageprocessor-web/configuration/#cacheconfig">cache location is configurable</a>. By default, it caches files under the App_Data/cache folder, which also happens to be one of the folders that the ASP.Net application monitors for changes. So anytime there are lots of files changing in the cache folder it causes the single monitor object monitoring the folders. This causes a buffer overflow and triggers an application restart due to <em>Overwhelming file change notifications</em>. However, ImageProcessor does allow moving the <a href="https://github.com/JimBobSquarePants/ImageProcessor/issues/518">cache folder outside of the wwwroot folder</a>. This causes the file not to be monitored and still work fine with the application. Since the <a href="https://twitter.com/Shazwazza/status/885770960321773568">library does not create the cache folder automatically</a>, we need to make sure that the folder specified in the config file exists.</p>

<p>Having moved the cache folder outside of the wwwroot, I no longer need to update the fcnMode setting and can leave it as intended. If you are facing application restarts as well due to overwhelming change notification in wwwroot see what is likely causing the file changes and then try and fix that instead of just setting the fcnMode to disabled.</p>

<p>Hope that helps fix your application restarting problem!</p>
]]></content>
  </entry>
  
</feed>
