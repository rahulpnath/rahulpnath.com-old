<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: productivity | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/category/productivity/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2017-12-16T00:02:22+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Text Editing - Extract Data]]></title>
    <link href="http://rahulpnath.com/blog/text-editing-extract-data/"/>
    <updated>2017-10-19T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/text-editing-extract-data</id>
    <content type="html"><![CDATA[<p>At times you might need to extract data from a large text. Let&rsquo;s say you have a JSON response, and you want to extract all the <em>id</em> fields in the response and <a href="http://www.rahulpnath.com/blog/text-editing-split-or-combine-multiple-lines/">combine them as comma separated</a>. Here&rsquo;s how you can easily extract data from large text using Sublime (or any other text editor that supports simultaneous editing).</p>

<pre><code class="json https://jsonplaceholder.typicode.com/posts">[
  {
    "userId": 1,
    "id": 1,
    "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
    "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"
  },
  {
    "userId": 1,
    "id": 2,
    "title": "qui est esse",
    "body": "est rerum tempore vitae\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\nqui aperiam non debitis possimus qui neque nisi nulla"
  },
  ...
]
</code></pre>

<p>Again the key here is to select the recurring pattern first. In this case, it is <em>&ldquo;id&rdquo;:</em> and then selecting all occurrences of that. Once all occurrences are selected, we can select the whole line and extract that out. Repeat the same to remove the <em>id</em> text. Then follow the same steps we used to <a href="http://www.rahulpnath.com/blog/text-editing-split-or-combine-multiple-lines/">combine text</a>.</p>

<div style="text-align: center;">
    <iframe width="560" height="315" src="https://www.youtube.com/embed/ouKm7Wkldp0" frameborder="0" allowfullscreen></iframe>
</div>


<p>Hope this helps you to extract data from large text files.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Text Editing - Split or Combine Multiple Lines]]></title>
    <link href="http://rahulpnath.com/blog/text-editing-split-or-combine-multiple-lines/"/>
    <updated>2017-10-13T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/text-editing-split-or-combine-multiple-lines</id>
    <content type="html"><![CDATA[<p>As a developer, I often end up needing to manipulate text. Sometimes this text can get quite large, and it might take a while to do it manually. If you have a text editor under your <a href="http://www.rahulpnath.com/blog/tools-that-I-use/">tool belt</a>, it often helps in situations like that. Let&rsquo;s looks at one of the common scenarios that I come across and how we can solve that using a text editor. I use <a href="https://www.sublimetext.com/">Sublime Text</a> as my go-to editor for such text editing hacks, but you can do this in any text editor that supports <a href="https://en.wikipedia.org/wiki/Simultaneous_editing">simultaneous editing</a>.</p>

<p>Let&rsquo;s say I just get a list of comma separated values and need to insert double (or single) quotes around each value to use in a SQL query. To demonstrate this, I ended up going to <a href="https://www.random.org/integers/">random.org</a> to generate a list of random values and had to use the same technique that I was to demonstrate as in the SQL query case. I generated 12 random numbers, and the site gave a tab separated list of values, as shown below.</p>

<pre><code class="text">91    66    31    11    90
80    1    24    48    61
61    66
</code></pre>

<p>I now need to convert this into a comma-separated list. Let&rsquo;s see how we can go about doing this.</p>

<ol>
<li>Select the recurring character pattern. In this case, it is the tab space.</li>
<li>Select all occurrences of the pattern. (Alt + F3 - Find All in Sublime)</li>
<li>Act on all the occurrences. In this case, I want to remove them, so I use <em>Del</em></li>
<li>Since I want to introduce a comma between each of the numbers, I first split them into multiple lines using <em>Enter</em>. Now I have all the numbers on a separate line.</li>
<li>Select all the numbers and insert a cursor at the end of each. ( Ctrl + Shift + L)</li>
<li>Insert comma. We still have the cursor at the end of all lines, so just pressing <em>Delete</em> again combines all the lines into one. Remove the trailing comma.</li>
</ol>


<div style="text-align: center;">
    <iframe width="560" height="315" src="https://www.youtube.com/embed/nDDWviJ5xHM" frameborder="0" allowfullscreen></iframe>
</div>


<p>Though this is a specific example, I hope you get the general idea on how to go about manipulating text, to split and combine as required. I hope you will be able to insert double (or single) quotes around each value in the comma separated values that we have now, to use in a SQL query!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: The Headphones Rule]]></title>
    <link href="http://rahulpnath.com/blog/the-headphones-rule/"/>
    <updated>2017-08-30T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/the-headphones-rule</id>
    <content type="html"><![CDATA[<p><img src="/images/headphone_rule.png" class="center" alt="The Headphones Rule" ></p>

<p>&lsquo;<em>I need some undistracted time</em>.&rsquo;</p>

<p>This was one of the things that came up in my team&rsquo;s retrospective yesterday. Having some undistracted time is necessary for getting things done. It&rsquo;s a good practice to have a consensus among the team members on how to manage disruptions and indicate whether you are open for a chat.</p>

<p><a href="http://theheadphonesrule.com/">The Headphone Rule</a> is an interesting way to indicate whether a person is open to interactions or not.</p>

<blockquote><p><em>no headphones, you can talk to me.</em></p>

<p><em>1 headphone, you can talk to me about work</em></p>

<p><em>2 headphones, do not talk to me.</em></p></blockquote>

<p>For people who do not use a headphone, some other technique needs to be used (like sticky notes, colored lights, etc.). Luckily in my team, everyone uses headphones, and it was an acceptable solution. Irrespective of the way you choose it is important to have some agreed way to indicate whether you are interruptible or not. It helps you and the team to have some undistracted time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Chocolatey - Install Softwares With Ease]]></title>
    <link href="http://rahulpnath.com/blog/chocolatey-install-softwares-with-ease/"/>
    <updated>2017-08-04T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/chocolatey-install-softwares-with-ease</id>
    <content type="html"><![CDATA[<p><img src="/images/chocolatey.png" alt="Chocolatey - Package Manager for Windows" class="center" ></p>

<p><a href="https://chocolatey.org/">Chocolatey</a> is a package manager for Windows. Chocolatey is a central store of applications, tools, and other packages. It allows you to install them on your computer from the command line. Let’s look at an example to make things more clear. Let’s say I want to install the Google Chrome Browser on my system. Below is how I would go about installing it.</p>

<blockquote><p><strong>Installing Google Chrome (Without Chocolatey)</strong></p>

<ol>
<li>Bing for Google Chrome (Assuming that you are on Windows and open up Internet Explorer and search for Google Chrome)</li>
<li>Click the relevant link from the Search Results</li>
<li>Hit the Download Chrome button</li>
<li>Wait for the installer to download and open that to install.</li>
</ol>


<p><strong>Installing Google Chrome (With Chocolatey)</strong></p>

<ol>
<li>Run &lsquo;<em>choco install googlechrome</em>&rsquo; from command line</li>
</ol>
</blockquote>

<p>Installing with Chocolatey is quick and easy. You no longer need to go around searching the web for the software that you want to install. If you are unsure of the package name (e.g. googlechrome), you can search the entire packages library. This is possible from the command line using &lsquo;<em>choco search</em>.&rsquo; Or you can also search on their <a href="https://chocolatey.org/packages">website</a>.</p>

<p>Run the below script from the command line to <a href="https://chocolatey.org/install">install Chocolatey Package Manager</a>. Once installed you can start managing applications through the command line using Chocolatey.</p>

<pre><code class="bash">@"%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" -NoProfile -ExecutionPolicy Bypass -Command "iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))" &amp;&amp; SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"
</code></pre>

<p>Other than installing and searching packages, Chocolatey also supports a lot of other commands to manage applications including un-installation. The entire commands supported are available <a href="https://chocolatey.org/docs/commandslist">here</a>. Instead, you can get the details in your command line using &lsquo;<em>choco -h</em>.&rsquo;</p>

<p>Hope that helps you save some time when you next want to install something.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Left Align Your Code For Better Readability]]></title>
    <link href="http://rahulpnath.com/blog/left-align-your-code-for-better-readability/"/>
    <updated>2017-07-03T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/left-align-your-code-for-better-readability</id>
    <content type="html"><![CDATA[<p>Aesthetics of code is as important as the code you write. Aligning is an important part that contributes to the overall aesthetics of code. The importance of code aesthetics struck me while on a recent project. Below are some the code samples that I came across in the project. Traversing this code base was painful to me as the code was all over the place.</p>

<pre><code class="csharp Bad Formatting">public class Account
{
    public long   Id                    { get; set; }
    public string ClientId              { get; set; }
    public long   ContactId             { get; set; }
    public string UserName              { get; set; }
    public string Name                  { get; set; }
    public string Company               { get; set; }
    public string Address               { get; set; }
    public string BillingAddress        { get; set; }
}
</code></pre>

<pre><code class="csharp Bad Formatting">public ConnectToServer(string username, 
                       string password,
                       string server,
                       string port)
{
    ...
}
</code></pre>

<p>The code has too many alignment points that attract the eye which makes it hard to read in the first place. When in isolation this might still be fine to read, but with such a style across the code base, it soon becomes a pain for your eyes and your mind. When refactoring code, it becomes even harder as you need to put in the extra effort to make sure that this fancy alignment is maintained. Let&rsquo;s take a look at how even changing a property name (<em>Company to CompanyName</em>) or function name(<em>ConnectToServer to Connect</em>) will affect the current formatting.</p>

<pre><code class="csharp Renamed to CompanyName">public class Account
{
    ...
    public string Name              { get; set; }
    public string CompanyName           { get; set; }
    public string Address           { get; set; }
    ...
}
</code></pre>

<pre><code class="csharp Renamed to Connect">public Connect(string username, 
                       string password,
                       string server,
                       string port)
{
    ...
}
</code></pre>

<p>As you can see above the formatting is now all over the place, and you need to format them into place manually. Again when in isolation this might seem like a few press of spacebar. But when the property/function that you rename is used in multiple places this soon becomes a problem. Such code formatting introduces maintenance overhead and soon falls out of place if something gets missed.</p>

<h3>Better Ways To Format Code</h3>

<p>Left aligning code is one of the key things that I try to follow always. Keeping the code aligned to the left makes it easier to read (assuming that you are programming in a language written from left to right). Since we read from left to right having most of the code aligned to the left means that you have more code visible. Left aligning also means that you would almost avoid the need to scroll the code editor when reading through the code horizontally.</p>

<p>Let&rsquo;s take a look how left aligning the above code will look like.</p>

<pre><code class="csharp Left Aligned">public class Account
{
    public long Id { get; set; }
    public string ClientId { get; set; }
    public long ContactId { get; set; }
    public string UserName { get; set; }
    public string Name { get; set; }
    public string Company { get; set; }
    public string Address { get; set; }
    public string BillingAddress { get; set; }
}
</code></pre>

<pre><code class="csharp Left Aligned Multiple Lines">public ConnectToServer(
    string username, 
    string password,
    string server,
    string port)
{
    ...
}
</code></pre>

<pre><code class="csharp Left Aligned Single Line">public ConnectToServer(
    string username, string password, string server, string port)
{
    ...
}
</code></pre>

<p>As you can see above left aligning makes it much easier to read and also reduces the number of alignment points. This is also refactoring friendly as there are no specific space patterns that need to be maintained. As for the parameters in a single line VS parameters in multiple lines (as above), I prefer the multi-line approach, as it keeps the code further aligned to the left and also reduces the chance of getting a horizontal scroll bar. You can use <a href="http://www.rahulpnath.com/blog/introducing-code-formatting-into-a-large-codebase/">Column Guides</a> to remind yourself to keep the code within the acceptable horizontal space.</p>

<p>Code formatting is an important aspect of coding. It is important that as a team you need to agree on some standard practices and find ways to stick to it. You can use <a href="http://www.rahulpnath.com/blog/introducing-code-formatting-into-a-large-codebase/">styling tools</a>, <a href="http://www.rahulpnath.com/blog/code-review/">Code Reviews</a>, etc. to make sure it does not get missed. It takes a while for any new practices to set in, but soon it will be of second nature and easy to follow.</p>
]]></content>
  </entry>
  
</feed>
