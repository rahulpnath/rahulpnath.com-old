<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: wcf | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/category/wcf/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2017-07-31T00:02:24+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WCF to ASP.NET Web API]]></title>
    <link href="http://rahulpnath.com/blog/wcf-to-asp-net-web-api/"/>
    <updated>2012-07-07T10:16:57+00:00</updated>
    <id>http://rahulpnath.com/blog/wcf-to-asp-net-web-api</id>
    <content type="html"><![CDATA[<p>Windows Communication Foundation(WCF) brought around a unified programming model for building service oriented application.All the previous technologies that was used to build services like MSMQ, remoting, ASMX Web Services,all came under one umbrella.</p>

<p>WCF had embraced SOAP,moving away from the <a href="http://rahulpnath.wordpress.com/2011/06/11/rest-after-a-long-time/">restful web</a> giving all sorts of flexibility and configurability.Everyone was happy for sometime thinking about the power that actually WCF gave by just changing a set of configurations and embraced it entirely.But then most of this configuration did not apply to many of the user scenario,and just went unused,coming with the extra ‘baggage’ that SOAP had to carry around.</p>

<p>I found Scott’s summary the best,as in this <a href="http://www.hanselminutes.com/264/this-is-not-your-fathers-wcf-all-about-the-webapi-with-glenn-block">podcast</a>,when he speaks of WCF</p>

<blockquote><p>”<em>If you are giving me an api whose strong point is it can talk over multi transport and has abstracted me away from the details that i actually need in the name of flexibility that i am not going to use,then that is just baggage</em>”</p></blockquote>

<p>WCF had its own way of being restful,so came WCF WebHTTP,WCF Rest Starter Kit and even a WCF Web Api.Apparently ASP.NET MVC,which is inherently restful,was also having getting capabilities to build basic web Api’s.</p>

<p>With <a href="http://www.asp.net/mvc/mvc4">ASP.NET MVC 4</a> , both the paths that REST had taken merges as <a href="http://www.asp.net/web-api">ASP.NET Web API</a>.     <br/>
So yes this is the ideal platform for building Restful services on the .NET Framework.    <br/>
Web API is nothing but services exposed over http,providing reach to various devices and platforms without doubt,as http is supported across platforms and devices.SOAP did use http,but it used it more as a transport than an application protocol,by sending message packets over http.But with Web Api the ‘contract’ is the actions of HTTP –GET ,PUT ,POST ,DELETE etc..</p>

<p>All said WCF still holds good in cases where SOAP is necessary,where it was actually intended to be used.It’s just the REST’ful part take a new form.</p>

<p>Can’t wait to get you hands dirty!!!! Jump in with <a href="http://channel9.msdn.com/Events/TechEd/NorthAmerica/2012/DEV309">this</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WCF Simplified ]]></title>
    <link href="http://rahulpnath.com/blog/wcf-simplified/"/>
    <updated>2011-02-02T13:58:56+00:00</updated>
    <id>http://rahulpnath.com/blog/wcf-simplified</id>
    <content type="html"><![CDATA[<p>Windows Communication Foundation(WCF) is basically a framework that assists in building  service oriented applications.I really felt it to be complicated in the early days that I got exposed to it,and always tried to keep away from it.But the more I tried to keep away,the more closer I needed to be with it(not sure whether that would be another of Murphy&rsquo;s law).So finally got to sit with a book for couple of days and this is what I came out  with.</p>

<p><em>WCF is all about exposing CLR types as services and consuming services as CLR types</em></p>

<p>WCF brings together all the previous distributed programming models that were there, like ASMX,remoting,MSMQ making everyones life easier.You get the power of all previous technologies just by changing a set of configurations in a config file.The keywords in WCF is ABC which itself can be termed Endpoint.Endpoint is nothing but the A(Address),B(Binding) and C(Contract) put together.So now what is this ABC.(I would be relating this to you and explaining as you yourself is a &lsquo;service&rsquo;  in one way or the other.You provide a service to your family,friends,employer,government etc.)</p>

<ul>
<li><strong>A</strong>ddress</li>
</ul>


<p>This is nothing but the address where your service would be located and would also tell the transportation mechanism that would be used like HTTP,TCP,Peer Network,IPC,MSMQ.With respect to,&lsquo;<em>you as a service</em>&rsquo;,this is exactly the address where one  can find you so that a consumer of your service can get the service that you provide.This can be your mail-id,phone number or house address,which also shows the mode of communication,depending on the kind of consumer that you are serving.</p>

<ul>
<li><strong>B</strong>inding</li>
</ul>


<p>It is just a set of grouped combinations of transport protocol,encoding of the message ,security, reliability,transaction ,interoperability etc.Again with regards to &lsquo;<em>you as a service</em>&rsquo;,this can be seen as the langugae accent,how securely the information came on to you and things like that.</p>

<ul>
<li><strong>C</strong>ontract</li>
</ul>


<p>This just specifies what the service does.This specifies what functionalities the service provides and also the way the data can be passed in and given out.With respect to <em>&lsquo;you as a service</em>&rsquo; this can be seen as the functionalities/activities that you do,the language in which that you can communicate(Say Engligh,French etc).Contracts in WCF are basically of 4 types,Service contract,Data contract,Fault contract and Message contract.Service contract specifies the set of functionalities that the service provides,Data contract specifies the way the data is exchanged,Fault contract specifies how faults/exceptions would be communicated out and Message contract specifies the format of  the message that is actually send(this is used very rarely,unless there is a specific structure that is to followed).Contracts aim at supporting interoperability and so it is to be expressed in a technology independent way.</p>

<p>Another key word that might come in between to confuse you more would be Channels.Now this is nothing but,something related to Binding.Since in a binding you specify different things like security,encoding and what not,each of these specific things are handled in its on layer/channel.You can see that there is something called Channel Stack,i.e. a stack of  different classes,each providing a discrete set of functionality.This whole stack would in turn make up your binding.Based on the you choose binding different channels would be stacked up together,just like you have different burgers with different layers of toppings :).As in burgers,you always have the option of making a custom binding too.</p>

<p>Any message that comes in to this channel stack,gets acted upon by different channels providing it/wrapping the message with security,reliability,transaction etc ,so that it comes out of the stack with all the features applied.So this takes away all the extra effort,that otherwise you would have had to do manually.This wrapping happens on the sending side and unwrapping happens on the receiving side.Because of this kind of architecture,WCF&rsquo;s architecture is also called &lsquo;<em>interception-based</em>&rsquo; architecture,as at each point it is intercepted and injected with additional features.</p>

<p>WCF has an extensible model.This means that at any place you can plugin your own custom implementations if required .<em><strong>System.ServiceModel</strong></em> is the one single namespace that turns life in the distributed world elegant and simple.So do explore it and start thinking everything around you as a service,so that you could relate things more to WCF :)</p>

<p>Suggested Reading</p>

<p>1. <a href="http://www.amazon.com/gp/product/0596805489/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596805489&amp;linkCode=as2&amp;tag=rahulpnath-20">Programming WCF Services: Mastering WCF and the Azure AppFabric Service Bus</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=rahulpnath-20&amp;l=as2&amp;o=1&amp;a=0596805489" alt="" /> by Juval Lowy</p>

<p>2. <a href="http://www.amazon.com/gp/product/0735623066/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0735623066&amp;linkCode=as2&amp;tag=rahulpnath-20">Inside Windows  Communication Foundation (Pro Developer)</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=rahulpnath-20&amp;l=as2&amp;o=1&amp;a=0735623066" alt="" /> by Justin Smith</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Callbacks in WCF]]></title>
    <link href="http://rahulpnath.com/blog/callbacks-in-wcf/"/>
    <updated>2010-09-01T09:48:00+00:00</updated>
    <id>http://rahulpnath.com/blog/callbacks-in-wcf</id>
    <content type="html"><![CDATA[<p>Quite often in the client-server model,the requirement of getting notified of certain changes in the server pops up.Say for example in the movie ticket booking system.When a person selects a seat for booking,the selected seat should become disabled for all the users currently logged in,so that you can avoid the message &lsquo;Sorry the seat you were trying to book is already booked&rsquo;.<br/>
In such scenarios polling the server for changes might be one way to go about it.<br/>
Another way might be the server calling back to all the clients when a seat selection happens.<br/>
This post is about the second way and when the booking system is developed using WCF :)<br/>
The WCF framework provides a easy way to achieve this&hellip;..<a href="http://msdn.microsoft.com/en-us/library/system.servicemodel.servicecontractattribute.callbackcontract.aspx">Callbacks</a></p>

<p>The whole concept is simple.The server keeps track of all the active clients and knows how to call them when the required change happens in the server.<br/>
Again its all about certain interfaces that you have implement  and some attributes that you have to specify.<br/>
The <a href="http://msdn.microsoft.com/en-us/library/system.servicemodel.servicecontractattribute.aspx">ServiceContract</a> that the client exposes also specifies the CallbackContract type.This is again another interface that the client needs to implement so that the server knows the type of client it is serving and can call back the functions on that interface.<br/>
This is much more like the eventing model.All functions in the CallbackContract would be like your event handlers,which would be invoked by the server on a particular event happening in the server.<br/>
You can go ahead and create a Publisher-Subscriber framework itself so that any future requirements of such nature would be easy to implement<br/>
<a href="http://msdn.microsoft.com/en-us/magazine/cc163537.aspx#S6">This </a>article by Juval Lowy suggest a good way to implement a publisher-subscriber framework in WCF using callbacks.</p>

<p>The code provided below shows a quick example of Callbacks.Run minimum of two clients,so you get to understand what it is all about :)</p>

<p><a href="http://rapidshare.com/files/416414378/PublisherSubscriber.rar">Code Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Role Based Access Control]]></title>
    <link href="http://rahulpnath.com/blog/role-based-access-control/"/>
    <updated>2010-06-30T16:39:00+00:00</updated>
    <id>http://rahulpnath.com/blog/role-based-access-control</id>
    <content type="html"><![CDATA[<p>RBAC(Role Based Access Control) is something that is very common in the day-to-day world.<br/>
So what is this all about.It is just about a authorization check on whether you have the access to a particular resource or not.<br/>
When faced with scenarios like this when developing applications, where you have to implement Role based access for the different users that are to use the system you might be confused on how to implement this.<br/>
Say you have a WCF service exposing a set of services.You have a WPF thick client consuming this service.Say for example you are exposing a service to Add/Delete/View Employees.Based on the various roles you need to allow/disallow the access to the functionality.The easiest way would be enable/disable the controls that would be used invoke the corresponding functionality,based on the user role.<br/>
So am I done?<br/>
What if tomorrow you are exposing this service to some other client of yours,who is to develop his on User Interface(UI) for the service.<br/>
Do I have a problem here?<br/>
Yes of course!!!<br/>
What if he does not make the same check on the UI to enable/disable the controls that would act as his inputs.So here exactly is where you have a access break.Any user will be able to perform all functions irrespective of the access specified for him.<br/>
So how do I go about?<br/>
Make this check at the service level itself.Check for access and throw a NoAccess exception if not authorized.What exactly happens when you try to enter a no-access area in your office :)<br/>
UI synchronization is an added level to this,so that you can stop unnecessary service calls.</p>

<p>Will soon post a implementation sample :)</p>
]]></content>
  </entry>
  
</feed>
