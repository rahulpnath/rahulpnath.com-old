<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tipow | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/category/tipow/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2017-05-05T00:02:19+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Visual Studio Task List - Keep Track of Your TODO Comments]]></title>
    <link href="http://rahulpnath.com/blog/visual-studio-task-list-keep-track-of-your-todo-comments/"/>
    <updated>2017-05-03T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/visual-studio-task-list-keep-track-of-your-todo-comments</id>
    <content type="html"><![CDATA[<p>It often happens when coding that I skip over some part and want to come back to it at a later point in time. I leave some comments in the code so that I do not miss it. It can be a bit tricky to keep track of these comments themselves. Before pushing up the changes to <a href="https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell">master branch</a> or creating a <a href="https://help.github.com/articles/about-pull-requests/">Pull Request</a>, I make sure that all such comments are addressed.</p>

<p>Visual Studio comes with a <a href="https://msdn.microsoft.com/en-us/library/txtwdysk(v=vs.120).aspx">Task List</a> that is handy to track such unfinished work in code. It helps track your pending work items in one place and easily navigate to it. To have a comment appear in the task list, it has to start with a defined token (TODO, HACK, UNDONE, etc.) followed by the comment.</p>

<pre><code class="csharp">public bool IsInRange(DateTime theDateTime)
{
    //TODO: Implement this function
    throw new NotImplementedException();
}
</code></pre>

<p><img src="/images/taskList.png" class="center" alt="Visual Studio Task List" /></p>

<blockquote><p><em>A comment in your code preceded by a comment marker and a predefined token will appear in the Task List window. For example, the above comment has three distinct parts:</em></p>

<ul>
<li><em>The comment marker (//)</em></li>
<li><em>The token (TODO)</em></li>
<li><em>The comment (the rest of the text)</em></li>
</ul>
</blockquote>

<p>Visual Studio by default has TODO, HACK and UNDONE as tokens. You can modify this under Options -> Task List. New custom tokens can be added as required and used instead of the default ones.</p>

<p><img src="/images/taskList_customize.png" class="center" alt="Visual Studio, Customize Task List" /></p>

<p>When in a multi-member team you can either use custom tokens per member or append the comment with your name or feature name. The Task List provides Search feature with which you can filter the tasks created by you or for the feature you are working.</p>

<p>I try to remove all TODO comments before merging to the master branch. For tasks that need to be tracked even after a merge, I create separate work items to the project backlog (VSTS, GitHub Tasks, Jira whatever the team is using). I might still leave the TODO comment with the relevant ticket details as well for tracking.</p>

<p>The next time you leave some unfinished work for later make sure you have it tracked. Hope it helps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: IF This Then That (IFTTT) - Connect Your Services]]></title>
    <link href="http://rahulpnath.com/blog/if-this-then-that-ifttt-connect-your-services/"/>
    <updated>2017-04-24T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/if-this-then-that-ifttt-connect-your-services</id>
    <content type="html"><![CDATA[<p><em><a href="https://en.wikipedia.org/wiki/IFTTT">IFTTT</a> is a free web-based service that people use to create chains of simple conditional statements, called applets. An applet is triggered by changes that occur within other web services such as Gmail, Facebook, Instagram, or Pinterest. An applet may send an e-mail message if the user tweets using a hashtag or to copy a photo on Facebook to a user&rsquo;s archive if someone tags a user in a photo</em></p>

<p>IFTTT helps you connect the services in your life. Most of the things that you use on the web is a service. There are a <a href="https://ifttt.com/search">broad range of services</a> that are available on IFTTT that you can start using right away. Each service has a set of triggers and actions. We can create applets which wire up triggers (if this) of one service to actions (then that) of another service.</p>

<p><img alt="IFTTT" src="/images/ifttt_recipe.png" class="center" /></p>

<p>There are a lot of <a href="https://ifttt.com/discover">pre-created applets</a> available for immediate use. You can also create custom applets that wire up the triggers and actions of services of your choice. For e.g. Whenever a new item is available on my blog <a href="https://ifttt.com/feed">RSS feed</a> I <a href="https://ifttt.com/gmail">send an email</a> to <a href="http://www.rahulpnath.com/blog/buffer-smarter-social-sharing/">Buffer</a>. The email to Buffer triggers it to share the post to all my connected social media accounts.</p>

<p><img alt="IFTTT Recommended" src="/images/ifttt_popular.png" class="center" /></p>

<p>If you are consuming the services of IFTTT, then it is free to use. <a href="https://platform.ifttt.com/pricing">Paid plans</a> are for publishing your service and making it available for others to consume.
IFTTT also has apps for <a href="https://itunes.apple.com/app/apple-store/id660944635?mt=8">iOS</a> and <a href="https://play.google.com/store/apps/details?id=com.ifttt.ifttt&amp;utm_source=/about&amp;utm_medium=web">Android</a>. With the apps you can also use the mobile capabilities like location, messages, etc. to trigger actions.</p>

<p>Start connecting the dots between your services and get the web to work for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: f.lux - Make it Easy For Your Eyes]]></title>
    <link href="http://rahulpnath.com/blog/flux-make-it-easy-for-your-eyes/"/>
    <updated>2017-04-20T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/flux-make-it-easy-for-your-eyes</id>
    <content type="html"><![CDATA[<p>If you spent a lot of time in front of a computer then <a href="https://justgetflux.com/">f.lux</a> is for you. You would have heard that using laptop or mobile just before sleep is bad. It is because of the <a href="http://www.bluelightexposed.com/">blue light</a> that digital screens emit.</p>

<blockquote><p><em>During the day, computer screens look goodâ€”they&rsquo;re designed to look like the sun. But, at 9PM, 10PM, or 3AM, you probably shouldn&rsquo;t be looking at the sun.</em></p>

<p><em>f.lux fixes this: it makes the color of your computer&rsquo;s display adapt to the time of day, warm at night and like sunlight during the day.</em></p></blockquote>

<p><img class="center" alt="Flux Current Setting" src="/images//flux_current.png" /></p>

<p><em>Tell f.lux what kind of lighting you have, and where you live. Then forget about it. f.lux will do the rest, automatically.</em> <br/>
f.lux adjusts the screen to the room you are in and the time of the day. You can set the lighting that the room has, and it will adjust the screen for it.</p>

<p><img class="center" alt="Flux Settings" src="/images//flux_settings.png" /></p>

<p>I have been using f.lux for a couple of years and had it always on(except occasionally when <a href="http://www.rahulpnath.com/blog/photography-learning-to-click/">processing photos</a>). <a href="https://fluxometer.com/">f.luxometer</a> tells how much blue light f.lux removes if you are interested.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: Buffer - Smarter Social Sharing]]></title>
    <link href="http://rahulpnath.com/blog/buffer-smarter-social-sharing/"/>
    <updated>2017-04-11T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/buffer-smarter-social-sharing</id>
    <content type="html"><![CDATA[<p>Posts on this blog are published automatically on preset dates. I have created a custom workflow for this in Octopress, my blogging framework. If you are interested in the end to end workflow check out my <a href="https://www.youtube.com/watch?v=1YTjHWjepag">video on it</a>. Publishing to different social media was also one of the things that I wanted to automate in the whole workflow. So whenever a post is published to my blog, it also posts to the different social media (Twitter, Facebook, and LinkedIn).</p>

<p><a href="https://buffer.com/">Buffer</a> is a tool to manage all your social media networks and publish content to it at one. It is a &lsquo;<em>Write Once, Publish Everywhere</em>&rsquo; kind of service and works best for me. From the Buffer website or using <a href="https://buffer.com/extensions">browser extensions</a> posts can be manually buffered. A buffered post can be published immediately, scheduled to be shared next or scheduled for a particular date and time. You can have custom messages for each of the social network that you are sharing.</p>

<p><img src="/images/buffer_share.png" alt="Buffer Share" class="center" /></p>

<p>For automatic updates from my blog, I use <a href="https://buffer.com/guides/email">Buffer via Email</a>. With every buffer account, there is an associated email address. A post can be buffered by sending an email to this address in a specific format. So every time a new blog is published I send an email to my buffer account to publish immediately (@postnow). Automatic sharing posts also helps me reduce the time I spend on social networks; <a href="http://www.rahulpnath.com/blog/life-learnings-after-being-a-parent/">learning to disconnect</a></p>

<p>I am on their <a href="https://buffer.com/pricing">Free plan</a> at present. I have only less than ten posts scheduled at any point in time, and the plan provides all the features I need.</p>

<p>Hope this helps you manage your social media content.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: AutoFixture - Make Your Unit Tests Robust]]></title>
    <link href="http://rahulpnath.com/blog/autofixture-make-your-unit-tests-robust/"/>
    <updated>2017-04-06T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/autofixture-make-your-unit-tests-robust</id>
    <content type="html"><![CDATA[<blockquote><p><em><a href="https://github.com/AutoFixture/AutoFixture">AutoFixture</a> is an open source library for .NET designed to minimize the &lsquo;<a href="http://wiki.c2.com/?ArrangeActAssert">Arrange</a>&rsquo; phase of your unit tests in order to maximize maintainability. Its primary goal is to allow developers to focus on what is being tested rather than how to setup the test scenario, by making it easier to create object graphs containing test data.</em></p></blockquote>

<p><img alt ="AutoFixture" class = "center" src="/images/autofixture.jpg" /></p>

<p>If you are on .NET platform and write tests (there is no reason you wouldn&rsquo;t) you should check out AutoFixture. AutoFixture makes test data setup easy. It is a generalization of the <a href="http://www.natpryce.com/articles/000714.html">Test Data Builder</a> pattern and helps make your tests more robust and maintainable. Below is a sample (as taken from the GitHub page) shows how minimal setup is required for testing. Check out the post, <a href="http://www.rahulpnath.com/blog/refactoring-test-code-removing-constructor-dependency/">Refactoring Test Code: Removing Constructor Dependency</a> to see in detail how AutoFixture can be used to make the tests more stable against changes.</p>

<pre><code class="csharp">[Theory, AutoData]
public void IntroductoryTest(
    int expectedNumber, MyClass sut)
{
    int result = sut.Echo(expectedNumber);
    Assert.Equal(expectedNumber, result);
}
</code></pre>

<p>If you are new to AutoFixture, I highly recommend checking out the <a href="https://github.com/AutoFixture/AutoFixture/wiki/Cheat-Sheet">Cheat Sheet</a> to get started. Check out my post on <a href="http://www.rahulpnath.com/blog/populating-data-for-tests/">Populating Data for Tests</a> for some common patterns of using AutoFixture and how it can reduce setup code. Understanding the <a href="https://github.com/AutoFixture/AutoFixture/wiki/Internal-Architecture">Internal Architecture</a> of AutoFixture helps if you want to extend it for customization. AutoFixture integrates well with the different testing frameworks and support libraries that are popular. I mostly use it with <a href="https://xunit.github.io/">xUnit</a> and <a href="https://github.com/Moq/moq4/wiki/Quickstart">Moq</a>.</p>

<p>Hope this helps with your testing!</p>

<p><em>I am happy to have <a href="https://github.com/AutoFixture/AutoFixture/pulls?q=is:pr+is:closed+author:rahulpnath">contributed</a> (minor) to such a great library.</em></p>
]]></content>
  </entry>
  
</feed>
