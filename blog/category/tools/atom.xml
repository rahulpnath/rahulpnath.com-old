<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/category/tools/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2016-10-14T03:50:23+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automated Deployment of AsmSpy to Chocolatey Using AppVeyor]]></title>
    <link href="http://rahulpnath.com/blog/automated-deployment-of-asmspy-to-chocolatey-using-appveyor/"/>
    <updated>2016-08-01T04:32:19+00:00</updated>
    <id>http://rahulpnath.com/blog/automated-deployment-of-asmspy-to-chocolatey-using-appveyor</id>
    <content type="html"><![CDATA[<p>Recently I have been trying to contribute to open source projects, to build the habit of reading others code. I chose to start with projects that I use regularly. <a href="https://github.com/mikehadlow/AsmSpy">AsmSpy</a> is one such project.</p>

<blockquote><p><em>AsmSpy is a Command line tool to view assembly references. It will output a list of all conflicting assembly references. That is where different assemblies in your bin folder reference different versions of the same assembly.</em></p></blockquote>

<p><img class="center" alt="AsmSpy assembly conflicts" src="/images/asmspy.png" /></p>

<p>I started with an <a href="https://github.com/mikehadlow/AsmSpy/pull/20">easy issue</a> to get familiar with the code and to confirm that the project owner, <a href="https://github.com/mikehadlow">Mike Hadlow</a>, accepts Pull Requests (PR). Mike was fast to approve and merge in the changes. There was a feature request to make AsmSpy available as <a href="https://chocolatey.org/">Chocolatey</a> package. Chocolatey is a package manger for Windows, to automate software management. AsmSpy, being a tool that&rsquo;s not project specific, it makes sense to deliver this via Chocolatey and makes installation easier. Mike added me as a project <a href="https://help.github.com/articles/permission-levels-for-a-user-account-repository/">collaborator</a>, which gave better control over the repository.</p>

<h3>Manually Releasing the Chocolatey Package</h3>

<p>AsmSpy is currently distributed as a <a href="http://static.mikehadlow.com/AsmSpy.zip">zip package</a>. Chocolatey supports packaging from a URL with a PowerShell script <a href="https://github.com/chocolatey/choco/wiki/HelpersInstallChocolateyZipPackage"><em>Install-ChocolateyZipPackage</em></a>. For the first release I <a href="https://github.com/mikehadlow/AsmSpy/pull/22">used this helper script to create the Chocolatey package</a> and uploaded it to my account. After fixing a few review comments the <a href="https://chocolatey.org/packages/asmspy/1.0.0">package got published</a>.</p>

<p><img class="center" alt="choco install asmspy" src="/images/asmspy_choco.png" /></p>

<h3>Automating Chocolatey Releases</h3>

<p>Now that I have to manage the AsmSpy Chocolatey package installations, I decided to automate the process of Chocolatey package creation and upload. Since I had used AppVeyor for <a href="http://www.rahulpnath.com/blog/automated-clickonce-deployment-of-a-wpf-application-using-appveyor/">automating Click-Once deployment</a> of <a href="https://github.com/rahulpnath/clal">CLAL</a>, I decided to use AppVeyor for this.</p>

<h4><strong>The Goal</strong></h4>

<p>I wanted to automatically deploy any new version of the package to Chocolatey. Any time a <a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging">tagged commit</a> is made in the main branch (master) it should trigger a deployment and push the new package to Chocolatey. This will give us the flexibility to control version numbers and decide when we actually want to make a release.</p>

<h4><strong>Setting up the Appveyor Project</strong></h4>

<p>Since now I am a collaborator on the project, AppVeyor shows the AsmSpy GitHub repository in my AppVeyor account too. Setting up a project is really quick in AppVeyor and most of it is automatic. Any commits now to the repository triggers an automated build</p>

<p><img alt="Appveyor add new project" src="/images/asmspy_appveyor_addProject.png" /></p>

<p>After playing around with different Appveyor project settings and build scripts, I noticed that AppVeyor was no longer triggering builds on commit pushes in the repository. I tried deleting and adding the AppVeyor project, but with no luck.</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">The <a href="https://twitter.com/appveyor">@appveyor</a> project suddenly stopped triggering auto builds on pushes.Deleted and added new project <a href="https://t.co/qfV8P2fmWN">https://t.co/qfV8P2fmWN</a> any thoughts?</p>&mdash; Rahul P Nath (@rahulpnath) <a href="https://twitter.com/rahulpnath/status/754764006976466944">July 17, 2016</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>The AppVeyor team was quick to respond and suggested a possible problem with the Webhook URL not configured under the GitHub repository. The Webhook URL for AppVeyor is available under the projects settings. Since I did not have access to the Settings page of the GitHub repository, I reached out to Mike, who promptly updated the Webhook URL for AppVeyor under GitHub project settings. This fixed the issue of builds not triggering automatically when commits are pushed to the GitHub repository.</p>

<p><img alt="Github webhook url for appveyor" src="/images/asmspy_github_webhook.png"/></p>

<h4><strong>Creating Chocolatey Package</strong></h4>

<p>AppVeyor has <a href="https://www.appveyor.com/blog/2014/11/06/appveyor-with-a-hint-of-chocolatey">support for Chocolatey commands</a> out of the box, which makes it easy to create packages on a successful build. I added in the <a href="https://github.com/mikehadlow/AsmSpy/blob/master/AsmSpy/AsmSpy.nuspec">nuspec file</a> that defines the Chocolatey Package and added an after-build script to generate the package. AppVeyor exposes <a href="https://www.appveyor.com/docs/environment-variables">environment variables</a>, that are set for every build. In the &lsquo;after_build&rsquo; scripts I trigger Chocolatey packaging only if the build is triggered by a commit with a tag (APPVEYOR_REPO_TAG_NAME). Every build generates the zip package that can be used to test the current build.</p>

<pre><code class="yaml   ">version: 1.0.{build}
build:
  verbosity: minimal
after_build:
- cmd: &gt;-
    7z a asmspy.zip .\AsmSpy\bin\Debug\AsmSpy.exe
    if defined APPVEYOR_REPO_TAG_NAME choco pack .\AsmSpy\AsmSpy.nuspec --version %APPVEYOR_REPO_TAG_NAME%
    if defined APPVEYOR_REPO_TAG_NAME appveyor PushArtifact asmspy.%APPVEYOR_REPO_TAG_NAME%.nupkg -DeploymentName ReleaseNuget
artifacts:
- path: asmspy.zip
  name: Zip Package
- path: '\AsmSpy\bin\*.nupkg'
  name: Nuget Package
</code></pre>

<h4><strong>Setting up Chocolatey Environment</strong></h4>

<p>Since Chocolatey is built on top of NuGet infrastructure, it supports deployment to it like you would do for a NugGet package. The <a href="https://www.appveyor.com/docs/deployment/nuget">NuGet deployment provider</a> publishes packages to a NuGet feed. All you need to provide is the feed URL and the API key and the package to deploy. I created a NuGet deployment environment with the chocolatey NuGet URL, my account API key and the Artifact to deploy.</p>

<p><img  alt="AppVeyor Chocolatey environment" src="/images/asmspy_appveyor_environment.png"/></p>

<p>The projects build setting is configured to deploy to the Environment created above for a build triggered by a commit with a tag.</p>

<pre><code class="yaml   ">deploy:
- provider: Environment
  name: AsmSpy Chocolatey
  on:
    branch: master
    APPVEYOR_REPO_TAG: true
</code></pre>

<p>From now on any tagged commit is pushed into the master branch on the repository it will trigger a release into Chocolatey. I have not tested this yet as there were no updates to the tool. I might trigger a test release sometime soon to see if it all works well end to end. Since with this automated deployment, we no longer use the zip URL to download the package in Chocolatey. The exe gets bundled along with the package. There might be some extra build scripts required to support the upgrade scenario for Chocolatey. I will update the post after the first deployment using this new pipeline!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Application Occasionally Throwing 'Could not Load File or Assembly or one of its Dependencies' Exception]]></title>
    <link href="http://rahulpnath.com/blog/could-not-load-file-or-assembly-or-one-of-its-dependencies/"/>
    <updated>2016-07-01T00:45:05+00:00</updated>
    <id>http://rahulpnath.com/blog/could-not-load-file-or-assembly-or-one-of-its-dependencies</id>
    <content type="html"><![CDATA[<p>We were facing a strange &lsquo;could not load DLL issue&rsquo;, when building and running multiple host projects in Visual Studio (VS 2015), side by side. We had 2 host projects - an NServiceBus worker role project (a console application) and a Web application and a few other projects, a couple of which are shared between both the host projects. It often happened in our team, when running the IIS-hosted Web application, it threw the error :</p>

<p> <span style='color:red'><em>Could not load file or assembly &lsquo;Newtonsoft.Json&rsquo; or one of its dependencies. The located assembly&rsquo;s manifest definition does not match the assembly reference. </em></span>.</p>

<p>The bin folder of the Web application did have a Newtonsoft.Json DLL, but of a different version of it than what was specified in the packages.config/csproj file. On a rebuild, the correct DLL version gets placed into the bin folder and everything works fine. Though the exception was observed by most of the team members, it did not happen always, which was surprising</p>

<blockquote><p><em>Knowing what exactly caused the issue, I created a sample project to demonstrate it for this blog post. All screenshots and code samples are of the sample application.</em></p></blockquote>

<h3>Using AsmSpy to find conflicting assemblies</h3>

<p><a href="https://github.com/mikehadlow/AsmSpy">AsmSpy</a> is a command-line tool to view conflicting assembly references in a given folder. This is helpful to find the different assemblies that refer to different versions of the same assembly in the given folder. Using AsmSpy, on the bin folder of the web application, it showed the conflicting  Newtonsoft.Json DLL references by different projects in the solution. There were three different versions of Newtonsoft Nuget package referred in the whole solution. The web project referred to an older version than the shared project and the worker project.</p>

<pre><code class="text">asmspy WebApplication1\bin\ nonsystem

Detailing only conflicting assembly references.
Reference: Newtonsoft.Json
   7.0.0.0 by SharedLibrary
   6.0.0.0 by WebApplication1
   4.5.0.0 by WebGrease
</code></pre>

<p>The assembly binding redirects for both the host projects were correct and using the version of the package that it referred to in the packages.config and project (csproj) file.</p>

<h3>Using MsBuild Structured Log to find conflicting writes</h3>

<p>Using the <a href="https://github.com/KirillOsenkov/MSBuildStructuredLog">Msbuild Structured Log Viewer</a> to analyze what was happening with the build, I noticed the below &lsquo;<em>DoubleWrites</em>&rsquo; happening with Newtonsoft DLL. The double writes list shows all the folders from where the DLL was getting written into the bin folder of the project getting building. In the MSBuild Structured log viewer, a DLL pops up only when there are more than one places from where a DLL is getting written, hence the name &lsquo;<em>Double writes</em>. This is a problem as there is a possibility of one write overriding other, depending on the order of writes, causing DLL version conflicts (which is exactly what&rsquo;s happening here).</p>

<p><img src="/images/doubleWrite_msbuildLogViewer.png" alt="Double Write Dll conflict" /></p>

<p>But in this specific case, the log captured above does not show the full problem but hints us of a potential problem. The build capture when building the whole solution (sln) shows that there are 2 writes happening from 2 different Newtonsoft package folders, which shows a potential conflict (<em>as shown above</em>). This does not explain the specific error we are facing with the Web application. Running the tool on just the Web application project (csproj), it does not show any DoubleWrites (<em>as shown below</em>).</p>

<p><img class="left" src="/images/doubleWrite_proj_msbuildLogViewer.png" alt="Double Write Dll conflict" /></p>

<p>This confirms that there is something happening with the Web application bin outputs when we build the worker/shared dependency project.</p>

<h3>Building Web application in Visual Studio</h3>

<p>When building a solution with a Web application project in Visual Studio (VS), I noticed that VS copies all the files from the bin folder of referred projects into the bin of the Web application project. This happens even if you build the shared project alone, as VS notices a change in the files of a dependent project and copies it over. So in this particular case, every time we build the dependent shared project or the worker project (which in turn triggers a build on the shared project), it ended up changing the files in shared projects bin folder, triggering VS to copy it over to the Web application&rsquo;s bin folder. This auto copy happens only for the Web application project and not for the Console/WPF project. (<a href="https://twitter.com/rahulpnath/status/745841691979022336">Yet to find</a> what causes this auto copy on VS build)</p>

<p><figure>
    <img src="/images/doubleWrite_dll_conflict.jpg" alt="Double Write Dll conflict" />
    <figcaption><em>Bin folder of Web application and Console application after building Shared project</em></figcaption>
</figure></p>

<p>Since <strong><em><a href="https://msdn.microsoft.com/en-us/library/aa984582(v=vs.71).aspx">CopyLocal</a></em></strong>, by default was true for the shared project, Newtonsoft DLLs were also getting copied into the shared project bin and in turn into Web applications bin (by VS). Since the Web application did not build during the above rebuild, it now has a conflicting DLL version of Newtonsoft in its bin folder, that does not match the assembly version it depends on, hence throws the exception, the next time I load the Web application from IIS.</p>

<p>I confirmed with other team members on the repro steps for this issue</p>

<ul>
<li>Get the latest code and do a full rebuild from VS</li>
<li>Launch Web app works fine</li>
<li>Rebuild just one of the dependent projects that have Newtonsoft DLL dependency (which has CopyLocal set to true)</li>
<li>Launch Web app throws the error!</li>
</ul>


<p>It was a consistent repro with the above steps.</p>

<p>To fix the issue, I can choose either to update the Newtonsoft Package version across all the projects in the solution, or set CopyLocal to false, to prevent the DLL getting copied into the bin folder of the shared project and end up copied to Web application bin. <strong><em>I chose to set CopyLocal to false in this specific case.</em></strong></p>

<h3>The Sample Application</h3>

<p>Now that we know what exactly causes the issue, it is easy to create a <a href="https://github.com/rahulpnath/Blog/tree/master/DoubleWrites">sample application</a> to reproduce this issue.</p>

<ul>
<li>Create a Web application project and add NuGet package reference to older version of Newtonsoft</li>
<li>Create a console application/WPF application with a newer version of Newtonsoft Package.</li>
<li>Create a shared library project with a newer version of Newtonsoft Nuget package. Add this shared project as  a project reference to both Web application and console/WPF application.</li>
</ul>


<pre><code class="powershell ">Install-Package Newtonsoft.Json -ProjectName WebApplication1 -Version 6.0.1
Install-Package Newtonsoft.Json -ProjectName SharedLibrary -Version 7.0.1
Install-Package Newtonsoft.Json -ProjectName WpfApplication1 -Version 8.0.3
</code></pre>

<p>Follow the build repro steps above to reproduce the error. Change CopyLocal or update NuGet references and see issue gets resolved.</p>

<p>Hope this helps in case you come across a similar issue!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CLAL - Command Line Application Launcher]]></title>
    <link href="http://rahulpnath.com/blog/clal-command-line-application-launcher/"/>
    <updated>2016-04-07T06:11:22+00:00</updated>
    <id>http://rahulpnath.com/blog/clal-command-line-application-launcher</id>
    <content type="html"><![CDATA[<p>CLAL (Command Line Application Launcher) is a desktop application to launch any (currently supports only SQL Server Management Studio - <a href="https://msdn.microsoft.com/en-us/library/ms162825.aspx">ssms</a>) command line application. It helps manage different configurations with which a command line application can be launched - such as different connection strings to various databases.</p>

<p><strong> <a href="http://bit.ly/1REGiFT">Install the latest version here</a> </strong></p>

<p>CLAL allows you to first specify the meta data of the command line application first and then create the various configurations for that by filling in the parameters as specified in the metadata. Currently since this only supports <em>ssms</em>, the metadata edit screen is not present and is hard coded into the application. The image below shows the various database servers that I connect to, and CLAL helps me reach them quickly</p>

<p><img class="center" alt="Command Line Application Launcher" src="/images/clal.png" /></p>

<p>Use the &lsquo;<em>Add Configuration</em>&rsquo; button to add a new configuration. You can specify a <em>Friendly Name</em> for the configuration and then fill in the other details required by the command line. Alternatively for <em>ssms</em> you can also paste in a connection string and have all the fields automatically populated.</p>

<p><img class="center" alt="Command Line Application Launcher" src="/images/clal_new.png" /></p>

<p>Once new configuration is saved you can launch the application with the specified configuration either using the <em>Launch</em> button or double click on the configuration name in the list.</p>

<blockquote><p><em>Work in progress to support other command line applications and to update the look and feel.</em></p></blockquote>

<p><a href="https://github.com/rahulpnath/clal/issues"><strong>Contribute</strong></a> to the development by coding or reporting issues that you find file using the application. <a href="http://www.rahulpnath.com/blog/category/clal/">Check out these articles</a> for my learnings while building this application.</p>

<h4><strong>Credits</strong></h4>

<p><a href="https://github.com/rahulpnath/clal/tree/master/Resources">Icons/Logo</a>: <a href="https://twitter.com/RoshTS">Rosh TS</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Fiddler to help in Manual Testing]]></title>
    <link href="http://rahulpnath.com/blog/using-fiddler-to-help-in-manual-testing/"/>
    <updated>2016-03-07T17:33:03+00:00</updated>
    <id>http://rahulpnath.com/blog/using-fiddler-to-help-in-manual-testing</id>
    <content type="html"><![CDATA[<p>Fiddler is an HTTP debugging proxy server application, that captures HTTP and HTTPS traffic and displays to the user. It also enables modifying HTTP traffic when sent or received. Fiddler is <a href="http://www.rahulpnath.com/blog/tools-that-I-use/">one of the tools that I use daily</a> and is an indispensable one for any web developer.</p>

<p>This post gives an introduction on how you can use fiddler to help with &lsquo;manual testing&rsquo;. We will see how to use Fiddler to create requests to Web API,  modify and replay an existing request. We will also see how to test error scenarios to see how the application functions in those cases. The sample solution is the default Web API project in Visual Studio with a few changes.</p>

<h3>Composing a Request</h3>

<p>When testing API&rsquo;s to see how it behaves with various inputs, one often needs to send in different parameters. Fiddler allows composing new requests and  modifying existing ones.</p>

<p>Using the Fiddler composer window (shown in the image below), we can create new requests from scratch and execute them. It provides two modes to create requests:</p>

<ul>
<li>Parsed : This is an assisted form to create requests</li>
<li>Raw : This allows to create raw http requests and issue them.</li>
</ul>


<p>Fiddler also allows saving raw requests in the Scratchpad tab to execute as and when required. On clicking Execute Fiddler creates an HTTP request from the entered data and sends to the server. To modify requests you can either drag and drop the request from the displayed URL&rsquo;s list into the composer tab or right-click on an entry and <em>Unlock for Editing</em> (keyboard shortcut - F2). After making the changes to the request in the Inspector window, right-click on the request again to Replay -> Reissue ( R).</p>

<p><img class="center" alt="Fiddler Composer tab" src="/images/fiddler_composer.png" /></p>

<h3>Testing Error Cases</h3>

<p>Testing error cases is tricky, especially from a UI level. Things usually don&rsquo;t go wrong in the development/testing environment and <a href="http://blog.codinghorror.com/the-works-on-my-machine-certification-program/">almost never on a developers machine</a> which makes it very hard to test for cases where something does not work. Fiddler makes it easy to test error scenarios with <a href="http://docs.telerik.com/fiddler/KnowledgeBase/AutoResponder">AutoResponder</a>, which allows returning handcrafted responses for requests, without actually hitting the server.</p>

<p>To create an auto response for a URL, select the URL from the URL&rsquo;s list and drag it into the AutoResponder tab or select the URL and click on Add Rule button on AutoResponder tab, which will create a new rule. By default Fiddler creates a rule with an exact match (Exact:) with the selected URL. Fiddler supports different <a href="http://docs.telerik.com/fiddler/KnowledgeBase/AutoResponder#matching-rules">matching rules</a> which include regular expression matches. A list of default response text are available to choose from to respond to requests that match the URL matching rule. We can also create a custom response and save it for reuse. The next time a request with matching URL is found the custom response gets returned to the caller.</p>

<blockquote><p><em>Make sure that the &lsquo;Unmatched requests passthrough&rsquo; option is true in the AutoResponder tab to make sure that all other requests pass through to the server.</em></p></blockquote>

<p><img class="center" alt="Fiddler AutoResponder tab" src="/images/fiddler_autoresponder.png" /></p>

<p>To create a custom response, choose &lsquo;Create a New Response&rsquo; or &lsquo;Find a file&rsquo; (if you already have the response saved in a text file). You can save custom responses in the <em>ResponseTemplates</em> folder in the root folder of Fiddler installation, to have them populated in the AutoResponder tab. When editing existing response data, make sure properties like Content-Length reflects the correct values. You can also set a <a href="http://docs.telerik.com/fiddler/KnowledgeBase/AutoResponder#latency">Latency</a> for the response, to simulate response coming from a server. RIght click on the rules for the Set Latency option and enter the value in milliseconds.</p>

<p>With the AutoResponder set to matching URL, we can easily have it return error codes or simulated error messages to test how the UI handles them. You don&rsquo;t have to depend on &lsquo;actual server errors&rsquo; to test if the UI handles error correctly. You can use this to test how application behaves with different return values by mocking with valid custom responses.  Fiddler provides richer capabilities of using scripts to <a href="http://docs.telerik.com/fiddler/KnowledgeBase/FiddlerScript/ModifyRequestOrResponse">modify a request or response</a>.</p>

<p>Hope this helps you get started with using Fiddler for testing and manipulating requests/responses.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automated ClickOnce Deployment of a WPF Application using Appveyor]]></title>
    <link href="http://rahulpnath.com/blog/automated-clickonce-deployment-of-a-wpf-application-using-appveyor/"/>
    <updated>2016-03-04T12:00:03+00:00</updated>
    <id>http://rahulpnath.com/blog/automated-clickonce-deployment-of-a-wpf-application-using-appveyor</id>
    <content type="html"><![CDATA[<p>This post covers the current deployment setup of <a href="https://github.com/rahulpnath/clal">CLAL</a>(Command Line Application Launcher), a desktop application, that I am building. Since it is a WPF application, it supports <a href="https://msdn.microsoft.com/en-us/library/t71a733d.aspx">ClickOnce Deployment</a> that enables to create self-updating applications which can install with minimum interaction from the user. ClickOnce supports different <a href="https://msdn.microsoft.com/en-us/library/71baz9ah.aspx">deployment strategy</a> of which distributing it through the web is quite popular as it makes software distribution easier. It works well when the software size is not large so that application installation is faster. For CLAL, there are two deployments served from Azure: <a href="http://www.rahulpnath.com/clal/Releases/commandlineapplicationlauncherui.application">Latest stable build</a> and the <a href="http://www.rahulpnath.com/clal/Latest/commandlineapplicationlauncherui.application">Current build</a>.</p>

<p>I did not want to do manually, the entire deployment process of building the solution, running all the tests, creating the ClickOnce package and pushing it up to Azure, I decided to automate this. Since <a href="https://www.appveyor.com/">Appveyor</a>, a hosted distributed continuous integration service used to build and test projects, is free for open-source projects and integrates very well with application developed on the Windows platform.</p>

<h3>Setting up Appveyor project</h3>

<p>Setting up Appveyor to read from Github is very easy. Once you authorize access to Github, Appveyor lists all the projects that you have in your Github account. After selecting a project, it creates a <a href="https://ci.appveyor.com/project/rahulpnath/clal">&lsquo;build project&rsquo;</a> for that in Appveyor, where you can control all build related activities. Appveyor automatically pulls in your latest source code from the repository, when a build triggers. Build configurations can be specified using a <a href="https://www.appveyor.com/docs/appveyor-yml">configuration file</a> (appveyor.yml) living at the repository root or using the user interface. For CLAL I exclusively use the configuration from the file and the latest version is available <a href="https://github.com/rahulpnath/clal/blob/master/appveyor.yml">here</a>.
Primarily there are two branches (<em>master</em> and <em>development</em>) on the git repository which builds as the latest stable and current build. Since these two deployments have few attributes different (like the version numbers, deployment URL, update URL), I use <a href="https://www.appveyor.com/docs/branches#conditional-build-configuration">conditional build configuration</a> to have separate configuration properties for the branches.</p>

<p>The primary things that vary for the different deployments are a few ClickOnce publishing properties, the version number, the build configurations - release/debug and the deployment locations. We will see in detail below how we handle this.</p>

<pre><code class="yaml">-
  branches:
    only:
      - master
  version: 0.2.2.0
  test:
    assemblies: '**\*.*Test.dll'
  configuration: Release
  # Rest of the configuration
  -
  version: 0.2.2.{build}
  test:
    assemblies: '**\*.*Test.dll'
  configuration: Debug
  # Rest of the configuration
</code></pre>

<h3>ClickOnce Publish Profile</h3>

<p>To create the publish profile, I used the Visual Studio Publish option on the project, which generates all the <a href="https://msdn.microsoft.com/en-us/library/ms165431.aspx#Anchor_2">Publishing Properties</a>. Most of these values remain the same across all deployment version (release and development). For the ones that are unique to the deployment version like the PublishUrl, UpdateUrl, and ApplicationVersion I removed them from <em>csproj</em> file. The deployment version specific properties is set in the Appveyor configuration file and used by the build script to set the right values.</p>

<p><img class="center" alt="ClickOnce publish settings" src="/images/clickonce_publishsetting.png" /></p>

<p>In the Appveyor configuration, the <a href="https://www.appveyor.com/docs/build-configuration#script-blocks-in-build-configuration">before_build</a> step these values are set as environment variables, which gets <a href="http://help.appveyor.com/discussions/questions/980-custom-msbuild-property">automatically passed into the MSBuild as Properties</a>. The certificate required for signing ClickOnce manifest gets installed during this step.</p>

<pre><code class="yaml"> before_build:
    - nuget restore src\CommandLineApplicationLauncher.sln
    - ps: "$env:ApplicationVersion=$env:APPVEYOR_BUILD_VERSION;$env:UpdateUrl='http://www.rahulpnath.com/clal/Releases/';
    $env:PublishUrl='http://www.rahulpnath.com/clal/Releases/';$mypwd = ConvertTo-SecureString -String \"/(Z&amp;rbrFG){p/6W@8xZvg\" -Force
    –AsPlainText\nImport-PfxCertificate –FilePath
    C:\\projects\\clal\\src\\CommandLineApplicationLauncherUI\\CommandLineApplicationLauncherUI_TemporaryKey.pfx cert:\\currentuser\\my -Password $mypwd"
</code></pre>

<h3>Versioning</h3>

<p>I am using <a href="http://semver.org/">semantic versioning</a> and wanted to control the version numbers for the releases explicitly. Since ClickOnce supports only four digit version numbers, the last one always defaults to zero in the release version. For Current build (development) deployments, the fourth place is used to maintain the build number, so that I can support different build version in development. I use a <a href="https://www.appveyor.com/docs/build-configuration#build-versioning">sequential number generated by appveyor</a> and set in the configuration file.
<code>yaml
version: 0.2.2.{build}
</code>
For a  release I run the below script on the master branch, which updates the version number across the source code files and then push the changes to Github, which triggers a build to the updated version. Then I merge back the master into development so that the next build on development branch would be a build number off the latest released version. The script uses <a href="https://github.com/ploeh/ZeroToNine">ZeroToNine</a> for updating AssemblyInfo files and updates the version numbers in the Appveyor configuration files.</p>

<pre><code class="powershell">param([Parameter(Mandatory=$true)][string]$version) 

# Update All AssemblyInfo file versions
$z29 = "./ExternalTools/ZeroToNine/Zero29.exe"
&amp;$z29 -a $version

# Update Appveyor.yml
((Get-Content ./Appveyor.yml | Out-String) 
-replace "version: .*\.0", ("version: " + $version + ".0") 
-replace "version: .*\.{build}", ("version: " + $version + ".{build}")).Trim("`r`n") 
| Set-Content -NoNewline Appveyor.yml
</code></pre>

<h3>Artifacts and Deployment</h3>

<p>The csproj file of the WPF application has <em>Publish</em> also as a default target, which results in a publish everytime the project is build. By default, the publish directory is in the bin folder under a subdirectory <em>app.publish</em>. Appveyor allows specifying folders as <a href="https://www.appveyor.com/docs/packaging-artifacts">artifacts</a>, which marks all the files under them as artifacts. The below script is for the latest stable build and marks it with a name &lsquo;releaseBuild&rsquo;.</p>

<pre><code class="yaml"> after_build:
    - ps: $root = Resolve-Path .\src\CommandLineApplicationLauncherUI\bin\Release\app.publish;
     [IO.Directory]::GetFiles($root.Path, '*.*', 'AllDirectories') | % { Push-AppveyorArtifact $_ -FileName $_.Substring($root.Path.Length + 1) -DeploymentName releaseBuild }
</code></pre>

<p>Appveyor allows to <a href="https://www.appveyor.com/docs/deployment">deploy using multiple providers</a> and <a href="https://www.appveyor.com/docs/deployment/ftp">FTP</a> is one of them. I use this to deploy the artifcats generated to an Azure FTP from which I serve the installer. This is currently hosted on my blog domain. The password for the FTP location is <a href="https://ci.appveyor.com/tools/encrypt">encrypted using the Appveyor tool</a>. The below configuration pushes all the artifacts with the name &lsquo;releaseBuild&rsquo; to the FTP folder.</p>

<pre><code class="yaml">deploy:
    provider: FTP
    protocol: ftps
    host: waws-prod-sg1-003.ftp.azurewebsites.windows.net
    username: rahulpnath\rahulpnath
    password:
      secure: YOmcTqGUyjYpJOKAnOAfO30hb59cCBTy+Otlj+qrcAo=
    folder: /site/wwwroot/clal/Releases
    artifact: releaseBuild
</code></pre>

<p>With each push into the Github repository now we have Appveyor listening to it, pulling the latest source code, installing the code signing certificate for ClickOnce, building and running all tests in the project, publish the ClickOnce application, packaging and deploying this to the Azure FTP. There is a completely automated deployment pipeline and makes it easy to publish updates to <a href="https://github.com/rahulpnath/clal">CLAL</a>!</p>
]]></content>
  </entry>
  
</feed>
