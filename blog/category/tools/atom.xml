<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/category/tools/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2017-05-02T00:03:31+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tip of the Week: IF This Then That (IFTTT) - Connect Your Services]]></title>
    <link href="http://rahulpnath.com/blog/if-this-then-that-ifttt-connect-your-services/"/>
    <updated>2017-04-24T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/if-this-then-that-ifttt-connect-your-services</id>
    <content type="html"><![CDATA[<p><em><a href="https://en.wikipedia.org/wiki/IFTTT">IFTTT</a> is a free web-based service that people use to create chains of simple conditional statements, called applets. An applet is triggered by changes that occur within other web services such as Gmail, Facebook, Instagram, or Pinterest. An applet may send an e-mail message if the user tweets using a hashtag or to copy a photo on Facebook to a user&rsquo;s archive if someone tags a user in a photo</em></p>

<p>IFTTT helps you connect the services in your life. Most of the things that you use on the web is a service. There are a <a href="https://ifttt.com/search">broad range of services</a> that are available on IFTTT that you can start using right away. Each service has a set of triggers and actions. We can create applets which wire up triggers (if this) of one service to actions (then that) of another service.</p>

<p><img alt="IFTTT" src="/images/ifttt_recipe.png" class="center" /></p>

<p>There are a lot of <a href="https://ifttt.com/discover">pre-created applets</a> available for immediate use. You can also create custom applets that wire up the triggers and actions of services of your choice. For e.g. Whenever a new item is available on my blog <a href="https://ifttt.com/feed">RSS feed</a> I <a href="https://ifttt.com/gmail">send an email</a> to <a href="http://www.rahulpnath.com/blog/buffer-smarter-social-sharing/">Buffer</a>. The email to Buffer triggers it to share the post to all my connected social media accounts.</p>

<p><img alt="IFTTT Recommended" src="/images/ifttt_popular.png" class="center" /></p>

<p>If you are consuming the services of IFTTT, then it is free to use. <a href="https://platform.ifttt.com/pricing">Paid plans</a> are for publishing your service and making it available for others to consume.
IFTTT also has apps for <a href="https://itunes.apple.com/app/apple-store/id660944635?mt=8">iOS</a> and <a href="https://play.google.com/store/apps/details?id=com.ifttt.ifttt&amp;utm_source=/about&amp;utm_medium=web">Android</a>. With the apps you can also use the mobile capabilities like location, messages, etc. to trigger actions.</p>

<p>Start connecting the dots between your services and get the web to work for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Type in Your Native Indian Language - Setting up Indic Keyboard on Your Android Phone]]></title>
    <link href="http://rahulpnath.com/blog/how-to-setup-google-indic-keyboard-on-your-android-phone/"/>
    <updated>2017-04-06T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/how-to-setup-google-indic-keyboard-on-your-android-phone</id>
    <content type="html"><![CDATA[<p>I came across the <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.inputmethod.hindi&amp;hl=en">Google Indic Keyboard</a> recently and now enjoy writing in my native language. If you want to write in an Indian language on your Android device, then this post is for you</p>

<p>Google Indic Keyboard allows you to type messages, update on social networks or compose emails in your native language on your Android phone. At the time of writing the keyboard supports the following languages:</p>

<ul>
<li>English keyboard</li>
<li>Assamese keyboard (অসমীয়া)</li>
<li>Bengali keyboard (বাংলা)</li>
<li>Gujarati keyboard (ગુજરાતી)</li>
<li>Hindi keyboard (हिंदी)</li>
<li>Kannada keyboard (ಕನ್ನಡ)</li>
<li>Malayalam keyboard (മലയാളം)</li>
<li>Marathi keyboard (मराठी)</li>
<li>Odia keyboard (ଓଡ଼ିଆ)</li>
<li>Punjabi keyboard (ਪੰਜਾਬੀ)</li>
<li>Tamil keyboard (தமிழ்)</li>
<li>Telugu keyboard (తెలుగు)</li>
</ul>


<p>Setting up the keyboard could be a bit confusing as changing keyboards is not something that we often do. I ended up spending some time walking through the setup for some of friends and family.</p>

<h3>Setting Up</h3>

<ol>
<li><p>In Google Play Store search for [Google Indic Keyboard]. If you have not installed/updated before, tap on Install or Update to get the latest application version.</p>

<p> <img alt="Play Store" src="/images/indicKeyboard_playstore.png"/></p></li>
<li><p>Once installed go to any of the apps where you can open the keyboard. On the bottom right corner tap the icon to change the keyboard.</p>

<p> <img src="/images/indicKeyboard_changeKeyboard.png" alt="Change Keyboard Icon" /></p></li>
<li><p>From the window that pops up select &ldquo;Choose Keyboards.&rdquo;</p>

<p> <img src="/images/indicKeyboard_switch.png" alt ="Choose Keyboards" /></p></li>
<li><p>Enable <em>Google Indic Keyboard (English and Indic Languages)</em> listed in the list of available keyboards.</p>

<p> <img src="/images/indicKeyboard_enableIndicKeyboard.png" alt="Enable Google Indic Keyboard" /></p></li>
<li><p>Repeat step 2 and open up the Change Keyboard window. Select Google Indic Keyboard from the list.</p>

<p> <img src="/images/indicKeyboard_selected.png" alt="Select Indic Keyboard" /></p></li>
<li><p>The keyboard is now set as Google Indic Keyboard with its default language. To choose a language of your choice, select the Indian Language icon on top left.</p>

<p> <img src="/images/indicKeyboard_default.png" alt="Google Indic Keyboard Default" /></p></li>
<li><p>From the window that pops up select the language of your choice. For me, it&rsquo;s <a href="https://en.wikipedia.org/wiki/Malayalam">Malayalam</a>.</p>

<p> <img src="/images/indicKeyboard_selectLanguage.png" alt="Indic Keyboard Choose Language" /></p></li>
<li><p>Google Indic Keyboard supports different layout.</p>

<ul>
<li>Native Keyboard: Type directly in your native language.</li>
<li>Transliteration Mode: Get output in your native language by spelling out the pronunciation using English letters(For, e.g., Malayalam -> മലയാളം)</li>
<li>Handwriting mode (currently available for Hindi only) - Write directly on your phone screen.</li>
<li>Hinglish mode - If you choose “Hindi” as an input language, the English keyboard will suggest both English and Hinglish terms.</li>
</ul>


<p> <img src="/images/indicKeyboard_chooseLanguageMode.png" alt="Indic Keyboard Layout" /></p></li>
<li><p>Type away in your native language :)</p>

<p> <img src="/images/indicKeyboard_malayalam.png" alt="Indic Keyboard Native Language" /></p></li>
</ol>


<p>The transliteration mode is impressive and intuitive. Its fits in perfectly with how I was earlier using my messaging apps; native language spelled out using English letters. The better thing now is that it automatically converts into my mother tongue. The Indic keyboard brings back the forgotten love to my language. Thank you, Google!.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automated Deployment of AsmSpy to Chocolatey Using AppVeyor]]></title>
    <link href="http://rahulpnath.com/blog/automated-deployment-of-asmspy-to-chocolatey-using-appveyor/"/>
    <updated>2016-08-01T04:32:19+00:00</updated>
    <id>http://rahulpnath.com/blog/automated-deployment-of-asmspy-to-chocolatey-using-appveyor</id>
    <content type="html"><![CDATA[<p>Recently I have been trying to contribute to open source projects, to build the habit of reading others code. I chose to start with projects that I use regularly. <a href="https://github.com/mikehadlow/AsmSpy">AsmSpy</a> is one such project.</p>

<blockquote><p><em>AsmSpy is a Command line tool to view assembly references. It will output a list of all conflicting assembly references. That is where different assemblies in your bin folder reference different versions of the same assembly.</em></p></blockquote>

<p><img class="center" alt="AsmSpy assembly conflicts" src="/images/asmspy.png" /></p>

<p>I started with an <a href="https://github.com/mikehadlow/AsmSpy/pull/20">easy issue</a> to get familiar with the code and to confirm that the project owner, <a href="https://github.com/mikehadlow">Mike Hadlow</a>, accepts Pull Requests (PR). Mike was fast to approve and merge in the changes. There was a feature request to make AsmSpy available as <a href="https://chocolatey.org/">Chocolatey</a> package. Chocolatey is a package manger for Windows, to automate software management. AsmSpy, being a tool that&rsquo;s not project specific, it makes sense to deliver this via Chocolatey and makes installation easier. Mike added me as a project <a href="https://help.github.com/articles/permission-levels-for-a-user-account-repository/">collaborator</a>, which gave better control over the repository.</p>

<h3>Manually Releasing the Chocolatey Package</h3>

<p>AsmSpy is currently distributed as a <a href="http://static.mikehadlow.com/AsmSpy.zip">zip package</a>. Chocolatey supports packaging from a URL with a PowerShell script <a href="https://github.com/chocolatey/choco/wiki/HelpersInstallChocolateyZipPackage"><em>Install-ChocolateyZipPackage</em></a>. For the first release I <a href="https://github.com/mikehadlow/AsmSpy/pull/22">used this helper script to create the Chocolatey package</a> and uploaded it to my account. After fixing a few review comments the <a href="https://chocolatey.org/packages/asmspy/1.0.0">package got published</a>.</p>

<p><img class="center" alt="choco install asmspy" src="/images/asmspy_choco.png" /></p>

<h3>Automating Chocolatey Releases</h3>

<p>Now that I have to manage the AsmSpy Chocolatey package installations, I decided to automate the process of Chocolatey package creation and upload. Since I had used AppVeyor for <a href="http://www.rahulpnath.com/blog/automated-clickonce-deployment-of-a-wpf-application-using-appveyor/">automating Click-Once deployment</a> of <a href="https://github.com/rahulpnath/clal">CLAL</a>, I decided to use AppVeyor for this.</p>

<h4><strong>The Goal</strong></h4>

<p>I wanted to automatically deploy any new version of the package to Chocolatey. Any time a <a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging">tagged commit</a> is made in the main branch (master) it should trigger a deployment and push the new package to Chocolatey. This will give us the flexibility to control version numbers and decide when we actually want to make a release.</p>

<h4><strong>Setting up the Appveyor Project</strong></h4>

<p>Since now I am a collaborator on the project, AppVeyor shows the AsmSpy GitHub repository in my AppVeyor account too. Setting up a project is really quick in AppVeyor and most of it is automatic. Any commits now to the repository triggers an automated build</p>

<p><img alt="Appveyor add new project" src="/images/asmspy_appveyor_addProject.png" /></p>

<p>After playing around with different Appveyor project settings and build scripts, I noticed that AppVeyor was no longer triggering builds on commit pushes in the repository. I tried deleting and adding the AppVeyor project, but with no luck.</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">The <a href="https://twitter.com/appveyor">@appveyor</a> project suddenly stopped triggering auto builds on pushes.Deleted and added new project <a href="https://t.co/qfV8P2fmWN">https://t.co/qfV8P2fmWN</a> any thoughts?</p>&mdash; Rahul P Nath (@rahulpnath) <a href="https://twitter.com/rahulpnath/status/754764006976466944">July 17, 2016</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>The AppVeyor team was quick to respond and suggested a possible problem with the Webhook URL not configured under the GitHub repository. The Webhook URL for AppVeyor is available under the projects settings. Since I did not have access to the Settings page of the GitHub repository, I reached out to Mike, who promptly updated the Webhook URL for AppVeyor under GitHub project settings. This fixed the issue of builds not triggering automatically when commits are pushed to the GitHub repository.</p>

<p><img alt="Github webhook url for appveyor" src="/images/asmspy_github_webhook.png"/></p>

<h4><strong>Creating Chocolatey Package</strong></h4>

<p>AppVeyor has <a href="https://www.appveyor.com/blog/2014/11/06/appveyor-with-a-hint-of-chocolatey">support for Chocolatey commands</a> out of the box, which makes it easy to create packages on a successful build. I added in the <a href="https://github.com/mikehadlow/AsmSpy/blob/master/AsmSpy/AsmSpy.nuspec">nuspec file</a> that defines the Chocolatey Package and added an after-build script to generate the package. AppVeyor exposes <a href="https://www.appveyor.com/docs/environment-variables">environment variables</a>, that are set for every build. In the &lsquo;after_build&rsquo; scripts I trigger Chocolatey packaging only if the build is triggered by a commit with a tag (APPVEYOR_REPO_TAG_NAME). Every build generates the zip package that can be used to test the current build.</p>

<pre><code class="yaml   ">version: 1.0.{build}
build:
  verbosity: minimal
after_build:
- cmd: &gt;-
    7z a asmspy.zip .\AsmSpy\bin\Debug\AsmSpy.exe
    if defined APPVEYOR_REPO_TAG_NAME choco pack .\AsmSpy\AsmSpy.nuspec --version %APPVEYOR_REPO_TAG_NAME%
    if defined APPVEYOR_REPO_TAG_NAME appveyor PushArtifact asmspy.%APPVEYOR_REPO_TAG_NAME%.nupkg -DeploymentName ReleaseNuget
artifacts:
- path: asmspy.zip
  name: Zip Package
- path: '\AsmSpy\bin\*.nupkg'
  name: Nuget Package
</code></pre>

<h4><strong>Setting up Chocolatey Environment</strong></h4>

<p>Since Chocolatey is built on top of NuGet infrastructure, it supports deployment to it like you would do for a NugGet package. The <a href="https://www.appveyor.com/docs/deployment/nuget">NuGet deployment provider</a> publishes packages to a NuGet feed. All you need to provide is the feed URL and the API key and the package to deploy. I created a NuGet deployment environment with the chocolatey NuGet URL, my account API key and the Artifact to deploy.</p>

<p><img  alt="AppVeyor Chocolatey environment" src="/images/asmspy_appveyor_environment.png"/></p>

<p>The projects build setting is configured to deploy to the Environment created above for a build triggered by a commit with a tag.</p>

<pre><code class="yaml   ">deploy:
- provider: Environment
  name: AsmSpy Chocolatey
  on:
    branch: master
    APPVEYOR_REPO_TAG: true
</code></pre>

<p>From now on any tagged commit is pushed into the master branch on the repository it will trigger a release into Chocolatey. I have not tested this yet as there were no updates to the tool. I might trigger a test release sometime soon to see if it all works well end to end. Since with this automated deployment, we no longer use the zip URL to download the package in Chocolatey. The exe gets bundled along with the package. There might be some extra build scripts required to support the upgrade scenario for Chocolatey. <strikethrough>I will update the post after the first deployment using this new pipeline!</strikethrough>. From version <a href="https://chocolatey.org/packages/asmspy/1.2.0">1.2.0</a> it uses this new pipeline</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Application Occasionally Throwing 'Could not Load File or Assembly or one of its Dependencies' Exception]]></title>
    <link href="http://rahulpnath.com/blog/could-not-load-file-or-assembly-or-one-of-its-dependencies/"/>
    <updated>2016-07-01T00:45:05+00:00</updated>
    <id>http://rahulpnath.com/blog/could-not-load-file-or-assembly-or-one-of-its-dependencies</id>
    <content type="html"><![CDATA[<p>We were facing a strange &lsquo;could not load DLL issue&rsquo;, when building and running multiple host projects in Visual Studio (VS 2015), side by side. We had 2 host projects - an NServiceBus worker role project (a console application) and a Web application and a few other projects, a couple of which are shared between both the host projects. It often happened in our team, when running the IIS-hosted Web application, it threw the error :</p>

<p> <span style='color:red'><em>Could not load file or assembly &lsquo;Newtonsoft.Json&rsquo; or one of its dependencies. The located assembly&rsquo;s manifest definition does not match the assembly reference. </em></span>.</p>

<p>The bin folder of the Web application did have a Newtonsoft.Json DLL, but of a different version of it than what was specified in the packages.config/csproj file. On a rebuild, the correct DLL version gets placed into the bin folder and everything works fine. Though the exception was observed by most of the team members, it did not happen always, which was surprising</p>

<blockquote><p><em>Knowing what exactly caused the issue, I created a sample project to demonstrate it for this blog post. All screenshots and code samples are of the sample application.</em></p></blockquote>

<h3>Using AsmSpy to find conflicting assemblies</h3>

<p><a href="https://github.com/mikehadlow/AsmSpy">AsmSpy</a> is a command-line tool to view conflicting assembly references in a given folder. This is helpful to find the different assemblies that refer to different versions of the same assembly in the given folder. Using AsmSpy, on the bin folder of the web application, it showed the conflicting  Newtonsoft.Json DLL references by different projects in the solution. There were three different versions of Newtonsoft Nuget package referred in the whole solution. The web project referred to an older version than the shared project and the worker project.</p>

<pre><code class="text">asmspy WebApplication1\bin\ nonsystem

Detailing only conflicting assembly references.
Reference: Newtonsoft.Json
   7.0.0.0 by SharedLibrary
   6.0.0.0 by WebApplication1
   4.5.0.0 by WebGrease
</code></pre>

<p>The assembly binding redirects for both the host projects were correct and using the version of the package that it referred to in the packages.config and project (csproj) file.</p>

<h3>Using MsBuild Structured Log to find conflicting writes</h3>

<p>Using the <a href="https://github.com/KirillOsenkov/MSBuildStructuredLog">Msbuild Structured Log Viewer</a> to analyze what was happening with the build, I noticed the below &lsquo;<em>DoubleWrites</em>&rsquo; happening with Newtonsoft DLL. The double writes list shows all the folders from where the DLL was getting written into the bin folder of the project getting building. In the MSBuild Structured log viewer, a DLL pops up only when there are more than one places from where a DLL is getting written, hence the name &lsquo;<em>Double writes</em>. This is a problem as there is a possibility of one write overriding other, depending on the order of writes, causing DLL version conflicts (which is exactly what&rsquo;s happening here).</p>

<p><img src="/images/doubleWrite_msbuildLogViewer.png" alt="Double Write Dll conflict" /></p>

<p>But in this specific case, the log captured above does not show the full problem but hints us of a potential problem. The build capture when building the whole solution (sln) shows that there are 2 writes happening from 2 different Newtonsoft package folders, which shows a potential conflict (<em>as shown above</em>). This does not explain the specific error we are facing with the Web application. Running the tool on just the Web application project (csproj), it does not show any DoubleWrites (<em>as shown below</em>).</p>

<p><img class="left" src="/images/doubleWrite_proj_msbuildLogViewer.png" alt="Double Write Dll conflict" /></p>

<p>This confirms that there is something happening with the Web application bin outputs when we build the worker/shared dependency project.</p>

<h3>Building Web application in Visual Studio</h3>

<p>When building a solution with a Web application project in Visual Studio (VS), I noticed that VS copies all the files from the bin folder of referred projects into the bin of the Web application project. This happens even if you build the shared project alone, as VS notices a change in the files of a dependent project and copies it over. So in this particular case, every time we build the dependent shared project or the worker project (which in turn triggers a build on the shared project), it ended up changing the files in shared projects bin folder, triggering VS to copy it over to the Web application&rsquo;s bin folder. This auto copy happens only for the Web application project and not for the Console/WPF project. (<a href="https://twitter.com/rahulpnath/status/745841691979022336">Yet to find</a> what causes this auto copy on VS build)</p>

<p><figure>
    <img src="/images/doubleWrite_dll_conflict.jpg" alt="Double Write Dll conflict" />
    <figcaption><em>Bin folder of Web application and Console application after building Shared project</em></figcaption>
</figure></p>

<p>Since <strong><em><a href="https://msdn.microsoft.com/en-us/library/aa984582(v=vs.71).aspx">CopyLocal</a></em></strong>, by default was true for the shared project, Newtonsoft DLLs were also getting copied into the shared project bin and in turn into Web applications bin (by VS). Since the Web application did not build during the above rebuild, it now has a conflicting DLL version of Newtonsoft in its bin folder, that does not match the assembly version it depends on, hence throws the exception, the next time I load the Web application from IIS.</p>

<p>I confirmed with other team members on the repro steps for this issue</p>

<ul>
<li>Get the latest code and do a full rebuild from VS</li>
<li>Launch Web app works fine</li>
<li>Rebuild just one of the dependent projects that have Newtonsoft DLL dependency (which has CopyLocal set to true)</li>
<li>Launch Web app throws the error!</li>
</ul>


<p>It was a consistent repro with the above steps.</p>

<p>To fix the issue, I can choose either to update the Newtonsoft Package version across all the projects in the solution, or set CopyLocal to false, to prevent the DLL getting copied into the bin folder of the shared project and end up copied to Web application bin. <strong><em>I chose to set CopyLocal to false in this specific case.</em></strong></p>

<h3>The Sample Application</h3>

<p>Now that we know what exactly causes the issue, it is easy to create a <a href="https://github.com/rahulpnath/Blog/tree/master/DoubleWrites">sample application</a> to reproduce this issue.</p>

<ul>
<li>Create a Web application project and add NuGet package reference to older version of Newtonsoft</li>
<li>Create a console application/WPF application with a newer version of Newtonsoft Package.</li>
<li>Create a shared library project with a newer version of Newtonsoft Nuget package. Add this shared project as  a project reference to both Web application and console/WPF application.</li>
</ul>


<pre><code class="powershell ">Install-Package Newtonsoft.Json -ProjectName WebApplication1 -Version 6.0.1
Install-Package Newtonsoft.Json -ProjectName SharedLibrary -Version 7.0.1
Install-Package Newtonsoft.Json -ProjectName WpfApplication1 -Version 8.0.3
</code></pre>

<p>Follow the build repro steps above to reproduce the error. Change CopyLocal or update NuGet references and see issue gets resolved.</p>

<p>Hope this helps in case you come across a similar issue!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CLAL - Command Line Application Launcher]]></title>
    <link href="http://rahulpnath.com/blog/clal-command-line-application-launcher/"/>
    <updated>2016-04-07T06:11:22+00:00</updated>
    <id>http://rahulpnath.com/blog/clal-command-line-application-launcher</id>
    <content type="html"><![CDATA[<p>CLAL (Command Line Application Launcher) is a desktop application to launch any (currently supports only SQL Server Management Studio - <a href="https://msdn.microsoft.com/en-us/library/ms162825.aspx">ssms</a>) command line application. It helps manage different configurations with which a command line application can be launched - such as different connection strings to various databases.</p>

<p><strong> <a href="http://bit.ly/1REGiFT">Install the latest version here</a> </strong></p>

<p>CLAL allows you to first specify the meta data of the command line application first and then create the various configurations for that by filling in the parameters as specified in the metadata. Currently since this only supports <em>ssms</em>, the metadata edit screen is not present and is hard coded into the application. The image below shows the various database servers that I connect to, and CLAL helps me reach them quickly</p>

<p><img class="center" alt="Command Line Application Launcher" src="/images/clal.png" /></p>

<p>Use the &lsquo;<em>Add Configuration</em>&rsquo; button to add a new configuration. You can specify a <em>Friendly Name</em> for the configuration and then fill in the other details required by the command line. Alternatively for <em>ssms</em> you can also paste in a connection string and have all the fields automatically populated.</p>

<p><img class="center" alt="Command Line Application Launcher" src="/images/clal_new.png" /></p>

<p>Once new configuration is saved you can launch the application with the specified configuration either using the <em>Launch</em> button or double click on the configuration name in the list.</p>

<blockquote><p><em>Work in progress to support other command line applications and to update the look and feel.</em></p></blockquote>

<p><a href="https://github.com/rahulpnath/clal/issues"><strong>Contribute</strong></a> to the development by coding or reporting issues that you find file using the application. <a href="http://www.rahulpnath.com/blog/category/clal/">Check out these articles</a> for my learnings while building this application.</p>

<h4><strong>Credits</strong></h4>

<p><a href="https://github.com/rahulpnath/clal/tree/master/Resources">Icons/Logo</a>: <a href="https://twitter.com/RoshTS">Rosh TS</a></p>
]]></content>
  </entry>
  
</feed>
