<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: wpf | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/category/wpf/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2016-11-08T03:50:38+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automated ClickOnce Deployment of a WPF Application using Appveyor]]></title>
    <link href="http://rahulpnath.com/blog/automated-clickonce-deployment-of-a-wpf-application-using-appveyor/"/>
    <updated>2016-03-04T12:00:03+00:00</updated>
    <id>http://rahulpnath.com/blog/automated-clickonce-deployment-of-a-wpf-application-using-appveyor</id>
    <content type="html"><![CDATA[<p>This post covers the current deployment setup of <a href="https://github.com/rahulpnath/clal">CLAL</a>(Command Line Application Launcher), a desktop application, that I am building. Since it is a WPF application, it supports <a href="https://msdn.microsoft.com/en-us/library/t71a733d.aspx">ClickOnce Deployment</a> that enables to create self-updating applications which can install with minimum interaction from the user. ClickOnce supports different <a href="https://msdn.microsoft.com/en-us/library/71baz9ah.aspx">deployment strategy</a> of which distributing it through the web is quite popular as it makes software distribution easier. It works well when the software size is not large so that application installation is faster. For CLAL, there are two deployments served from Azure: <a href="http://www.rahulpnath.com/clal/Releases/commandlineapplicationlauncherui.application">Latest stable build</a> and the <a href="http://www.rahulpnath.com/clal/Latest/commandlineapplicationlauncherui.application">Current build</a>.</p>

<p>I did not want to do manually, the entire deployment process of building the solution, running all the tests, creating the ClickOnce package and pushing it up to Azure, I decided to automate this. Since <a href="https://www.appveyor.com/">Appveyor</a>, a hosted distributed continuous integration service used to build and test projects, is free for open-source projects and integrates very well with application developed on the Windows platform.</p>

<h3>Setting up Appveyor project</h3>

<p>Setting up Appveyor to read from Github is very easy. Once you authorize access to Github, Appveyor lists all the projects that you have in your Github account. After selecting a project, it creates a <a href="https://ci.appveyor.com/project/rahulpnath/clal">&lsquo;build project&rsquo;</a> for that in Appveyor, where you can control all build related activities. Appveyor automatically pulls in your latest source code from the repository, when a build triggers. Build configurations can be specified using a <a href="https://www.appveyor.com/docs/appveyor-yml">configuration file</a> (appveyor.yml) living at the repository root or using the user interface. For CLAL I exclusively use the configuration from the file and the latest version is available <a href="https://github.com/rahulpnath/clal/blob/master/appveyor.yml">here</a>.
Primarily there are two branches (<em>master</em> and <em>development</em>) on the git repository which builds as the latest stable and current build. Since these two deployments have few attributes different (like the version numbers, deployment URL, update URL), I use <a href="https://www.appveyor.com/docs/branches#conditional-build-configuration">conditional build configuration</a> to have separate configuration properties for the branches.</p>

<p>The primary things that vary for the different deployments are a few ClickOnce publishing properties, the version number, the build configurations - release/debug and the deployment locations. We will see in detail below how we handle this.</p>

<pre><code class="yaml">-
  branches:
    only:
      - master
  version: 0.2.2.0
  test:
    assemblies: '**\*.*Test.dll'
  configuration: Release
  # Rest of the configuration
  -
  version: 0.2.2.{build}
  test:
    assemblies: '**\*.*Test.dll'
  configuration: Debug
  # Rest of the configuration
</code></pre>

<h3>ClickOnce Publish Profile</h3>

<p>To create the publish profile, I used the Visual Studio Publish option on the project, which generates all the <a href="https://msdn.microsoft.com/en-us/library/ms165431.aspx#Anchor_2">Publishing Properties</a>. Most of these values remain the same across all deployment version (release and development). For the ones that are unique to the deployment version like the PublishUrl, UpdateUrl, and ApplicationVersion I removed them from <em>csproj</em> file. The deployment version specific properties is set in the Appveyor configuration file and used by the build script to set the right values.</p>

<p><img class="center" alt="ClickOnce publish settings" src="/images/clickonce_publishsetting.png" /></p>

<p>In the Appveyor configuration, the <a href="https://www.appveyor.com/docs/build-configuration#script-blocks-in-build-configuration">before_build</a> step these values are set as environment variables, which gets <a href="http://help.appveyor.com/discussions/questions/980-custom-msbuild-property">automatically passed into the MSBuild as Properties</a>. The certificate required for signing ClickOnce manifest gets installed during this step.</p>

<pre><code class="yaml"> before_build:
    - nuget restore src\CommandLineApplicationLauncher.sln
    - ps: "$env:ApplicationVersion=$env:APPVEYOR_BUILD_VERSION;$env:UpdateUrl='http://www.rahulpnath.com/clal/Releases/';
    $env:PublishUrl='http://www.rahulpnath.com/clal/Releases/';$mypwd = ConvertTo-SecureString -String \"/(Z&amp;rbrFG){p/6W@8xZvg\" -Force
    –AsPlainText\nImport-PfxCertificate –FilePath
    C:\\projects\\clal\\src\\CommandLineApplicationLauncherUI\\CommandLineApplicationLauncherUI_TemporaryKey.pfx cert:\\currentuser\\my -Password $mypwd"
</code></pre>

<h3>Versioning</h3>

<p>I am using <a href="http://semver.org/">semantic versioning</a> and wanted to control the version numbers for the releases explicitly. Since ClickOnce supports only four digit version numbers, the last one always defaults to zero in the release version. For Current build (development) deployments, the fourth place is used to maintain the build number, so that I can support different build version in development. I use a <a href="https://www.appveyor.com/docs/build-configuration#build-versioning">sequential number generated by appveyor</a> and set in the configuration file.
<code>yaml
version: 0.2.2.{build}
</code>
For a  release I run the below script on the master branch, which updates the version number across the source code files and then push the changes to Github, which triggers a build to the updated version. Then I merge back the master into development so that the next build on development branch would be a build number off the latest released version. The script uses <a href="https://github.com/ploeh/ZeroToNine">ZeroToNine</a> for updating AssemblyInfo files and updates the version numbers in the Appveyor configuration files.</p>

<pre><code class="powershell">param([Parameter(Mandatory=$true)][string]$version) 

# Update All AssemblyInfo file versions
$z29 = "./ExternalTools/ZeroToNine/Zero29.exe"
&amp;$z29 -a $version

# Update Appveyor.yml
((Get-Content ./Appveyor.yml | Out-String) 
-replace "version: .*\.0", ("version: " + $version + ".0") 
-replace "version: .*\.{build}", ("version: " + $version + ".{build}")).Trim("`r`n") 
| Set-Content -NoNewline Appveyor.yml
</code></pre>

<h3>Artifacts and Deployment</h3>

<p>The csproj file of the WPF application has <em>Publish</em> also as a default target, which results in a publish everytime the project is build. By default, the publish directory is in the bin folder under a subdirectory <em>app.publish</em>. Appveyor allows specifying folders as <a href="https://www.appveyor.com/docs/packaging-artifacts">artifacts</a>, which marks all the files under them as artifacts. The below script is for the latest stable build and marks it with a name &lsquo;releaseBuild&rsquo;.</p>

<pre><code class="yaml"> after_build:
    - ps: $root = Resolve-Path .\src\CommandLineApplicationLauncherUI\bin\Release\app.publish;
     [IO.Directory]::GetFiles($root.Path, '*.*', 'AllDirectories') | % { Push-AppveyorArtifact $_ -FileName $_.Substring($root.Path.Length + 1) -DeploymentName releaseBuild }
</code></pre>

<p>Appveyor allows to <a href="https://www.appveyor.com/docs/deployment">deploy using multiple providers</a> and <a href="https://www.appveyor.com/docs/deployment/ftp">FTP</a> is one of them. I use this to deploy the artifcats generated to an Azure FTP from which I serve the installer. This is currently hosted on my blog domain. The password for the FTP location is <a href="https://ci.appveyor.com/tools/encrypt">encrypted using the Appveyor tool</a>. The below configuration pushes all the artifacts with the name &lsquo;releaseBuild&rsquo; to the FTP folder.</p>

<pre><code class="yaml">deploy:
    provider: FTP
    protocol: ftps
    host: waws-prod-sg1-003.ftp.azurewebsites.windows.net
    username: rahulpnath\rahulpnath
    password:
      secure: YOmcTqGUyjYpJOKAnOAfO30hb59cCBTy+Otlj+qrcAo=
    folder: /site/wwwroot/clal/Releases
    artifact: releaseBuild
</code></pre>

<p>With each push into the Github repository now we have Appveyor listening to it, pulling the latest source code, installing the code signing certificate for ClickOnce, building and running all tests in the project, publish the ClickOnce application, packaging and deploying this to the Azure FTP. There is a completely automated deployment pipeline and makes it easy to publish updates to <a href="https://github.com/rahulpnath/clal">CLAL</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MVVM – Does it really matter?]]></title>
    <link href="http://rahulpnath.com/blog/mvvm-does-it-really-matter/"/>
    <updated>2013-04-08T05:12:07+00:00</updated>
    <id>http://rahulpnath.com/blog/mvvm-does-it-really-matter</id>
    <content type="html"><![CDATA[<p>MVVM (Model-View-ViewModel), is a popular architectural pattern since WPF/Silverlight. Separation of concerns(UI/code), testability etc are some of the key things that motivates one to go via the MVVM route. There are innumerous articles out there, just like this <a href="http://msdn.microsoft.com/en-in/library/hh848246.aspx">one</a>, that gets into the details of how and why one should use MVVM.</p>

<p>With Windows phone also embracing xaml and silverlight, any one who knew silverlight turned a phone developer overnight. MVVM did find its way into this space too. But most of the phone app developers, unlike those who developed for enterprise. would have never cared for MVVM , as they rarely would have written test cases for their apps, nor were they actually concerned on the UI/code separation. Since most of the apps were just out of a hobby, the only idea was just to have it up and available in the store as fast as possible. I might not be fully correct here, but I do know at least a dozen people,including me, who did this, so am good enough to put out that statement</p>

<p>With windows 8 too taking the store way and having the same development platform of silverlight/xaml, don’t be surprised MVVM  showed up there too. Now anyone who had an app on the phone, had to do a lot of copy pasting over the code to have the same application available in both the stores. This gives MVVM a totally new dimension for motivation that was not spoken  about earlier – <strong><em>Reusability. </em></strong></p>

<p>Having an application for phone and windows 8 app store with the minimum amount of rework is best possible by using MVVM and also a couple of other techniques. There is a detailed <a href="http://msdn.microsoft.com/en-us/library/windowsphone/develop/jj681693(v=vs.105">article</a>.aspx) on msdn on how how to maximize code reuse between Windows Phone 8 and Windows 8.</p>

<p>MVVM does really matter now, if we do not want to end up copy pasting code from phone app to the windows 8 store app. Also fixing and adding in new features would become more easier with following MVVM</p>

<p><a href="http://nuget.org/packages/Portable.MvvmLightLibs/">MVVM Toolkit</a> is a very popular helper library for implementing MVVM pattern, as is available on nuget as a PCL(Portable class library)</p>

<p><strong>MVVM<em>, It really does matter !!!</em></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WPF Expander trigger on IsExpanded to change the header]]></title>
    <link href="http://rahulpnath.com/blog/wpf-expander-trigger-on-isexpanded-to-change-the-header/"/>
    <updated>2012-01-27T21:32:54+00:00</updated>
    <id>http://rahulpnath.com/blog/wpf-expander-trigger-on-isexpanded-to-change-the-header</id>
    <content type="html"><![CDATA[<p>Just a quick tip on how you could change the Expander header content when Expander is in expanded state.I have also modified the expander HeaderTemplate so that the text gets center aligned.</p>

<pre><code class="xml"> &lt;Expander  Height="100" HorizontalAlignment="Left" Margin="129,192,0,0"
           Name="expander1" VerticalAlignment="Top" Width="167"&gt;
            &lt;Expander.HeaderTemplate&gt;
                &lt;DataTemplate&gt;
                    &lt;Label Name="headerlabel"
                        Content="{Binding RelativeSource={RelativeSource
                        Mode=FindAncestor,
                        AncestorType={x:Type Expander}},
                        Path=Header}"
                        HorizontalContentAlignment="Center"
                        Width="{Binding
                        RelativeSource={RelativeSource
                        Mode=FindAncestor,
                        AncestorType={x:Type Expander}},
                        Path=ActualWidth}" /&gt;
                &lt;/DataTemplate&gt;
            &lt;/Expander.HeaderTemplate&gt;
            &lt;Expander.Style&gt;
                &lt;Style  TargetType="Expander"&gt;
                    &lt;Setter Property="Header" Value="Show"/&gt;
                    &lt;Style.Triggers&gt;
                        &lt;Trigger Property="IsExpanded" Value="True"&gt;
                            &lt;Setter Property="Header" Value="Hide"/&gt;
                        &lt;/Trigger&gt;
                    &lt;/Style.Triggers&gt;
                &lt;/Style&gt;
            &lt;/Expander.Style&gt;
            &lt;Grid &gt;
                &lt;Label&gt;Expander Content&lt;/Label&gt;
            &lt;/Grid&gt;
        &lt;/Expander&gt;
</code></pre>

<p>We could also end up doing this using a converter or explicitly handling for the Expanded/Collapsed events.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DataTemplate Vs Code Behind]]></title>
    <link href="http://rahulpnath.com/blog/datatemplate-vs-code-behind/"/>
    <updated>2011-01-29T11:56:43+00:00</updated>
    <id>http://rahulpnath.com/blog/datatemplate-vs-code-behind</id>
    <content type="html"><![CDATA[<p>Most of the people switching to WPF,got to understand the fact the WPF tries to target one major problem of the technologies that existed before, which was tight coupling of the design and the behaviour.WPF has a ‘<em>lookless control model</em>’,and that simply means that the look and feel of the control is completely separated from the behaviour of the  control.And that is where the whole concept of XAML comes in,which does its part of defining the visual representation.</p>

<p>But still many people move on to WPF from older technologies fail to absorb this core approach.Mostly this happens when the look of something is to be dynamically generated.Say in the case of a Listbox bound to a itemssource.As far as the item is to be displayed in pure text everything goes fine.People figure out that the <em>DisplayMemberPath</em> has to be set to the property that they want to be displayed in the listbox.
 &#8220;` csharp
 private void Window_Loaded(object sender, RoutedEventArgs e)
        {
          listBox1.ItemsSource = PopulateEmployees();
        }</p>

<pre><code>    private static List&lt;Employee&gt; PopulateEmployees()
    {
        List&lt;Employee&gt; employees = new List&lt;Employee&gt;();
        Employee emp;
        for int i = 0; i &lt; 10; i++)
        {
            emp = new Employee()
            {
                FirstName = "Name",
                LastName = i.ToString(),
                Id = i
            };
            employees.Add(emp);
        }
        return employees;
    }
}

class Employee
{
    public string FirstName { get; set; }

   public string LastName { get; set; }

    public int&lt;/span&gt; Id { get; set; }
}
```
</code></pre>

<p><img src="/binding_displaymemberpath.jpg" alt="binding displaymemberpath" /></p>

<p>But the scenario changes when the item to be displayed has to be more informative.Say you need a image to come up with some text,or maybe a button/checkbox etc.Now people tend to shift to the older approaches of creating the listbox items display from code.As that’s how it had been done before and also that seems easier.</p>

<p>The code changes to something similar to shown below.</p>

<p><img src="/binding_code_behind.jpg" alt="binding code behind" /></p>

<p>Or another approach might be slightly better than this one,by creating a user control to hold this data and then create the User control in the code behind and then add that to the listbox items.</p>

<p>This is where people tend to loose focus of the real power of WPF ..<strong>Templating</strong>.</p>

<p>All this code can be easily replaced and also clearly separate that UI details from the behaviour.The property that&rsquo;s the key here is <em>ItemTemplate,</em>and this would how the new code look like.</p>

<p><img src="/binding_data_template.jpg" alt="binding data template" /></p>

<p>And the code in the behind all vanishes,and is as simple in our first case,by just setting up the listbox1’s ItemsSource.</p>

<p>That is the power of templating and clearly separates the UI aspect from code. Any ItemsControl will have the property ItemTemplate that is to be set to the way you want the data to be displayed.If the display is complex in itself then you can move those into a separate user control and create  that user control  as the ItemTemplate.Anytime you want to change the way your control looks you just need to change in the xaml,clearly bringing in the decoupling.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kick Start WPF]]></title>
    <link href="http://rahulpnath.com/blog/kick-start-wpf/"/>
    <updated>2011-01-26T07:50:00+00:00</updated>
    <id>http://rahulpnath.com/blog/kick-start-wpf</id>
    <content type="html"><![CDATA[<p>Every time one of my friends asks,&lsquo;<em>Hey how to start off with WPF</em>&rsquo;,I think of putting up a post,so that I could easily direct them and say,&lsquo;<em>Hey check out my post in my blog</em>&rsquo;.Maybe from the next time I would :)</p>

<p>There are a lot of blogs that describes on how to Kick start WPF,and this is my version of it.</p>

<p>WPF is just like any other technology that you would love to learn,except for the fact that not all technologies are cool..but WPF really is and you would enjoy every bit learning it.</p>

<p>Books would be the best source to kick start the learning,as the topics would be covered in a organized manner,so that you wouldn&rsquo;t need to hunt down the meaning of something new that you would come across.Some suggested books on WPF are</p>

<ol>
<li><p><a href="http://www.amazon.com/gp/product/1430243651/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1430243651&amp;linkCode=as2&amp;tag=rahulpnath-20">Pro WPF 4.5 in C#: Windows Presentation Foundation in .NET 4.5</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=rahulpnath-20&amp;l=as2&amp;o=1&amp;a=1430243651" alt="" /> by Mathew MacDonald</p></li>
<li><p><a href="http://www.amazon.com/gp/product/0672336979/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0672336979&amp;linkCode=as2&amp;tag=rahulpnath-20">WPF 4.5 Unleashed</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=rahulpnath-20&amp;l=as2&amp;o=1&amp;a=0672336979" alt="" /> by Adam Nathan</p></li>
<li><p><a href="http://www.amazon.com/gp/product/B00BR9XMH6/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B00BR9XMH6&amp;linkCode=as2&amp;tag=rahulpnath-20">Applications = Code + Markup: A Guide to the Microsoft  Windows  Presentation Foundation (Pro - Developer)</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=rahulpnath-20&amp;l=as2&amp;o=1&amp;a=B00BR9XMH6" alt="" /> by Charles Petzold</p></li>
</ol>


<p>There are a lot of other books too that are good,but personally I found this as good for beginners.</p>

<p>Some of the must know things as far as WPF is concerned would be its Layout mechanism(Mathew&rsquo;s book gives a good explanation of that),Binding mechanism(Adams book should be good for that ).Also do understand the concept of Resources,Styles and Templates  if you would be playing the role of UX developer :).Otherwise also those are good to know concepts.</p>

<p>As with any technology developing a &lsquo;Hello World&rsquo; kind of application is easy.Its in about understanding the best practices,patterns that are best supported and implementing things the way they were actually meant to be.Same holds true for WPF too :)MVVM is one such pattern thats most talked about in WPF.There is a very good <a href="http://msdn.microsoft.com/en-us/magazine/dd419663.aspx/">article</a> by Josh Smith.There is also a book by him,Advanced MVVM,if you are interested in detail.Also do check out <a href="http://compositewpf.codeplex.com/">Prism </a>that is by the Microsoft P&amp;P team.It provides a very good guidance on how to go about developing applications.</p>

<p>You would also find lots of videos in <a href="http://channel9.msdn.com/Tags/wpf">channel9</a>,which should also be a good source of information.</p>

<p>Blogs are another source of information,and lots of people seems to be in love with WPF,including me :)Almost all the major contributors to WPF are part of <a href="http://wpfdisciples.wordpress.com/">WPF disciples</a>,from which you can easily navigate to their respective blogs.</p>

<p>For anything else there is always the <a href="http://social.msdn.microsoft.com/forums/en/wpf/threads/">MSDN forum</a>,with people all round the world ready to answer your questions.Feel free to post any specific doubts that you come across.</p>

<p>Finally all reading and no implementing makes little use.So get a Visual Studio up and running and try things side by side..and soon you would find yourself good in WPF :)</p>

<p>Welcome to WPF :)</p>
]]></content>
  </entry>
  
</feed>
