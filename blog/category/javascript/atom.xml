<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/category/javascript/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2017-09-25T00:01:52+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Azure Key Vault From Node.js]]></title>
    <link href="http://rahulpnath.com/blog/azure-key-vault-from-node-dot-js/"/>
    <updated>2017-06-12T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/azure-key-vault-from-node-dot-js</id>
    <content type="html"><![CDATA[<p><img src="/images/nodejs_keyvault.png" alt="Azure Key Vault from Node js" class="center" /></p>

<p>If you develop on Node.js, you can use the <a href="https://github.com/Azure/azure-sdk-for-node">Azure SDK for Node</a> that makes it easy to consume and manage Microsoft Azure Services. In this post let&rsquo;s explore how to use the node SDK to connect to Azure Key Vault and interact with the vault objects. If you are new to key vault check out my <a href="http://www.rahulpnath.com/blog/category/azure-key-vault/">other posts here to get started</a>.</p>

<p>The <a href="https://www.npmjs.com/package/azure-keyvault">azure-keyvault</a> npm (node package manager) package allows accessing keys, secrets, and certificates on Azure Key Vault. It required Node.js version 6.x.x or higher. You can get the <a href="https://nodejs.org/en/">latest Node.js version here</a>.</p>

<blockquote><p><strong>Package Features</strong></p>

<ul>
<li><p><em>Manage keys: create, import, update, delete, backup, restore, list and get.</em></p></li>
<li><p><em>Key operations: sign, verify, encrypt, decrypt, wrap, unwrap.</em></p></li>
<li><p><em>Secret operations: set, get, update and list.</em></p></li>
<li><p><em>Certificate operations: create, get, update, import, list, and manage contacts and issuers.</em></p></li>
</ul>
</blockquote>

<p>It is easy to setup a new project and execute code using Node. The ease of setup is one of the things that I liked about node. To try out the Key Vault package, you can start fresh in a new folder and create a javascript file - <em>main.js</em> (you can name it anything you want).</p>

<p>The following packages are <em>required</em> to connect to the vault and authenticate. The <em><a href="https://www.npmjs.com/package/azure-keyvault">azure-keyvault</a></em> package as we saw above provides capabilities to interact with the vault. The <a href="https://www.npmjs.com/package/adal-node"><em>adal-node</em></a> is the Windows Active Directory Authentication Library for Node. The package makes it easy to authenticate to AAD to access AAD protected web resources. Applications using key vault need to <a href="http://www.rahulpnath.com/blog/authenticating-a-client-application-with-azure-key-vault/">authenticate using a token from an Azure AD Application</a>.</p>

<pre><code class="js">const KeyVault = require('azure-keyvault');
const { AuthenticationContext } = require('adal-node')
</code></pre>

<h4><strong>Authenticate Using ClientId and Secret</strong></h4>

<p>Create the Azure AD application and the Secret key as shown in <a href="http://www.rahulpnath.com/blog/authenticating-a-client-application-with-azure-key-vault/">this post</a>. Grab the ClientId and Secret for authentication from the node application.</p>

<pre><code class="js">const clientId = "CLIENT ID";
const secret = "SECRET";

var secretAuthenticator = function (challenge, callback) {

    var context = new AuthenticationContext(challenge.authorization);
    return context.acquireTokenWithClientCredentials(
        challenge.resource,
        clientId,
        secret,
        function (err, tokenResponse) {
            if (err) throw err;

            var authorizationValue = tokenResponse.tokenType + ' ' + tokenResponse.accessToken;
            return callback(null, authorizationValue);
        });
};
</code></pre>

<p>To access the vault, we need to create an instance of the KeyVaultClient object which taken in a Credentials as shown below. The KeyVaultClient has different methods exposes to interact with keys, secrets, and certificates in the vault. For e.g. To retrieve a secret from the vault the <em>getSecret</em> method is used passing in the secret identifier.</p>

<pre><code class="js">const secretUrl = "https://rahulkeyvault.vault.azure.net/secrets/ApiKey/b56396d7a46f4f848481de2e149ef069";
var credentials = new KeyVault.KeyVaultCredentials(secretAuthenticator);
var client = new KeyVault.KeyVaultClient(credentials);

client.getSecret(secretUrl, function (err, result) {
    if (err) throw err;

    console.log(result);
});
</code></pre>

<h4><strong>Authenticate Using ClientId and Certificate</strong></h4>

<p>To authenticate using ClientId and Certificate the AuthenticationContext exposes a function <em>acquireTokenWithClientCertificate</em> which takes in the certificate (pem format) and the certificate thumbprint. If you already have a certificate go ahead and use that. If not create a new test certificate as shown below</p>

<pre><code class="bash">makecert -sv mykey.pvk -n "cn=AD Test Vault Application" ADTestVaultApplication.cer -b 03/03/2017 -e 06/05/2018 -r
pvk2pfx -pvk mykey.pvk -spc ADTestVaultApplication.cer -pfx ADTestVaultApplication.pfx -po test
</code></pre>

<p>Create a new AD application and set it to use certificate authentication. Assign the application permissions to access the key vault.</p>

<pre><code class="powershell">$certificateFilePath = "C:\certificates\ADTestVaultApplication.cer"
$certificate = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
$certificate.Import($certificateFilePath)
$rawCertificateData = $certificate.GetRawCertData()
$credential = [System.Convert]::ToBase64String($rawCertificateData)
$startDate= [System.DateTime]::Now
$endDate = $startDate.AddYears(1)
$adApplication = New-AzureRmADApplication -DisplayName "CertAdApplication" -HomePage  "http://www.test.com" -IdentifierUris "http://www.test.com" -CertValue $credential  -StartDate $startDate -EndDate $endDate

$servicePrincipal = New-AzureRmADServicePrincipal -ApplicationId $adApplication.ApplicationId

Set-AzureRmKeyVaultAccessPolicy -VaultName 'RahulKeyVault' -ServicePrincipalName $servicePrincipal.ServicePrincipalNames[0] -PermissionsToSecrets all -PermissionToKeys all 
</code></pre>

<p>To convert the pvk file into the pem format that is required by adal-node to authenticate with the AD application use the below command.</p>

<pre><code class="bash">openssl rsa -inform pvk -in mykey.pvk -outform pem -out mykey.pem
</code></pre>

<p>Using the pem encoded certificate private key, we can authenticate with the vault as shown below.</p>

<pre><code class="js">function getPrivateKey(filename) {
    var privatePem = fs.readFileSync(filename, { encoding: 'utf8' });
    return privatePem;
}

var certificateAuthenticator = function (challenge, callback) {
    var context = new AuthenticationContext(challenge.authorization);

    return context.acquireTokenWithClientCertificate(
        challenge.resource,
        clientId,
        getPrivateKey("mykey.pem"),
        "CERTIFICATE THUMBPRINT",
        function (err, tokenResponse) {
            if (err) throw err;

            var authorizationValue = tokenResponse.tokenType + ' ' + tokenResponse.accessToken;
            return callback(null, authorizationValue);
        }
    )
};
</code></pre>

<p>Using the <em>certificateAuthenticator</em> is the same as using the <em>secretAuthenticator</em>, by passing it to <em>KeyVaultCredentials</em></p>

<pre><code class="js">var credentials = new KeyVault.KeyVaultCredentials(certificateAuthenticator);
var client = new KeyVault.KeyVaultClient(credentials);

client.getSecret(secretUrl, function (err, result) {
    if (err) throw err;

    console.log(result);
});
</code></pre>

<p>To run the application first run <em>npm install</em> to install all the required packages and then execute the js file using <em>node main.js</em>. It fetches the secret value from the key vault using the certificate or secret authenticator. Hope this helps you to get started with Azure Key Vault from Node.js.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactJS: Setting up the Environment]]></title>
    <link href="http://rahulpnath.com/blog/reactjs-setting-up-the-environment/"/>
    <updated>2016-05-12T04:27:36+00:00</updated>
    <id>http://rahulpnath.com/blog/reactjs-setting-up-the-environment</id>
    <content type="html"><![CDATA[<p><em>This post helps setting up the development environment for React on VS Code using Browserify and Gulp</em></p>

<p>I have been playing around with <a href="https://facebook.github.io/react/">React</a> for the past few days and liking the one way binding and immutability concept that it puts forward. The component-based approach and having all related code in a single place is really interesting. Need to explore more and see how it really turns out building UI&rsquo;s with React.</p>

<p>The openness of the Web makes it really difficult to get started with any development platform on it and is the same with React. There are a lot of options for getting things done and can get <a href="https://en.wikipedia.org/wiki/Decision_fatigue">overwhelming when newly starting out</a>. This post explains &lsquo;one way&rsquo; to set up the development environment when developing an application using the React JavaScript framework. I am using VS Code for some time now and wanted to use the same for React development. Except for setting up VS Code, everything else would still make sense to you if you are using a different editor.</p>

<h3>Package Manager for External Dependencies</h3>

<p>One of the first things we need when starting with a fresh project on React, is the React library itself. I use Node Package Manager(npm) for managing all my code and development dependencies. Use the below commands to set up the <a href="https://docs.npmjs.com/cli/init">npm configuration (<em>package.json</em>) </a> and install the latest version of React library.</p>

<pre><code class="text">npm init
npm i --save react
npm i --save react-dom
</code></pre>

<blockquote><p><em>When installing npm packages use <a href="https://docs.npmjs.com/files/package.json#dependencies">&ndash;save</a> if it needs to be deployed with the application and use <a href="https://docs.npmjs.com/files/package.json#devdependencies">&ndash;save-dev</a> for a package added to support development.</em></p></blockquote>

<h3>Setting up VS Code</h3>

<p>JavaScript development experience is better when you have <em><a href="https://code.visualstudio.com/Docs/languages/javascript">jsconfig.json</a></em> file in your project root. VSCode recommends adding this file through a small light bulb notification on the right side of the status bar (as shown below). With this configuration file, VSCode treats all the <em>js</em> files under the same project context.</p>

<p><img class="center" src= "/images/vscode_jsconfig_balloon.png" alt="Visual Studio code jsconfig balloon notification" /></p>

<p>Intellisense for libraries is available through type definition files, usually available in the <a href="http://definitelytyped.org/">DefinitelyTyped</a> <a href="https://github.com/DefinitelyTyped/DefinitelyTyped">repository</a>. With npm, you can manage these definition files using the <a href="https://github.com/typings/typings">TypeScript Definition Manager (typings)</a> package. To get started install the typings package and support for node packages. Now you can use <a href="https://github.com/typings/typings/blob/master/docs/commands.md">typings</a> to manage all the typescript definitions and use it for getting IntelliSense support. Once you have the correct type definitions installed for the packages you use, VSCode will show IntelliSense as shown below.</p>

<pre><code class="text">npm i --save-dev typings
typings install --ambient node
typings install --save-dev gulp
</code></pre>

<p><img class="center" src= "/images/react_vscode_intellisense.png" alt="Visual Studio code Intellisense" /></p>

<h3>Hello World from React</h3>

<p>Now that we have enough to get us started let&rsquo;s write our first react component, which displays a message passed into it.
&#8220;` js
&lsquo;use strict&rsquo;;</p>

<p>import React from &lsquo;react&rsquo;;</p>

<p>var HelloWorld = React.createClass({
   render: function(){
       return (
           <div>{this.props.message}</div>
       );
   }
});</p>

<p>export default HelloWorld
&#8220;`
Let&rsquo;s save the above into <em><a href="https://github.com/rahulpnath/Blog/blob/master/React_Template/src/components/helloworld.js">components/helloworld.js</a></em>. To use this component in the application, it needs to be rendered into the HTML page. So let&rsquo;s add a main entry point for the application as below and save it into <em><a href="https://github.com/rahulpnath/Blog/blob/master/React_Template/src/main.js">main.js</a></em>. Notice how the component is referred in here and rendered into the HTML div element <em>app</em>.</p>

<pre><code class="js">"use strict";

import React from 'react';
import ReactDOM from 'react-dom';
import HelloWorld from './components/helloworld';

ReactDOM.render(
    &lt;HelloWorld message ="Hello World From React" /&gt;,
    document.getElementById('app')
);
</code></pre>

<p>For completeness below is how the <em><a href="https://github.com/rahulpnath/Blog/blob/master/React_Template/src/Index.html">Index.html</a></em> looks
<code>html
&lt;html&gt;    
&lt;head&gt;
&lt;/head&gt;
&lt;body&gt;
     &lt;div id="app"&gt;&lt;/div&gt;
    &lt;script type="text/javascript" src="main.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></p>

<h3>Using Browserify for Bundling</h3>

<p>Now that we have all the code needed for rendering the component, let&rsquo;s bundle up all the different JavaScript files together so that we can deploy it as a single file. Since we are using <em>JSX</em> and ES6 features, which not all browsers support, we need to transform it. <a href="https://babeljs.io/">Babel</a> is a JavaScript compiler to get this done and it also has preset specific to <a href="https://babeljs.io/docs/plugins/preset-react/">react</a> and <a href="https://babeljs.io/docs/plugins/preset-es2015/">es2015</a>. <a href="http://browserify.org">Browserify</a> bundles all the JavaScript modules and also enables specifying transforms using the <a href="https://github.com/substack/node-browserify#usage">&ndash;transform (-t)</a> switch, to pass in <a href="https://github.com/babel/babelify">babel</a> along with the presets required.</p>

<pre><code class="text">browserify -t [babelify --presets [react es2015] ] src\main.js -o dest\main.js -d
</code></pre>

<p>If you now manually copy over the HTML file into the <em>dest</em> folder and open it from there you should be seeing the &lsquo;<em>Hello World from React</em>&rsquo; message.</p>

<h3>Automating Build and More</h3>

<p>I definitely did not want to keep running the above command and copy the HTML(/CSS) files, every time I make a change, to see the output - so automating it was very much required. What I would essentially like to have is every time I make a change on any of the files in the project, the build to trigger and output the updated application into the <em>dest</em> folder and automatically refreshing the browser so that I can see the changes (near) real-time. I chose to use <a href="http://gulpjs.com/">Gulp</a> as this is popular and I have had some <a href="http://www.rahulpnath.com/blog/organizing-tests-into-test-suites-for-visual-studio/">experience using it before</a>.</p>

<h4><strong><a href="https://github.com/rahulpnath/Blog/blob/master/React_Template/gulpfile.js">gulpfile.js</a></strong></h4>

<p>To organize all the different path&rsquo;s used in the gulp build file, I have an object, <em>path</em> holding all the properties together, that&rsquo;s used in the <a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulptaskname--deps-fn">gulp tasks</a>. The different tasks that I have defined are to <em>build</em> ( which <em>copyHtmlFiles</em> and builds and transforms <em>js</em> files), <em><a href="https://github.com/adametry/gulp-eslint">lint</a></em>, <em><a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpwatchglob--opts-tasks-or-gulpwatchglob--opts-cb">watch</a></em>&lsquo;es the source folder for changes and triggers the required build, <em><a href="https://www.npmjs.com/package/gulp-connect">connect</a></em>&rsquo;s a server to host the application and automatically <em>reload</em>&rsquo;s the browser whenever code is changed.</p>

<pre><code class="js">var appConfig = {
    localBaseUrl: 'http://localhost',
    port: 8090,
    paths : path
}

gulp.task('copyHtmlFiles', function () {
    gulp.src(path.HTML)
        .pipe(gulp.dest(path.DEST))
        .pipe(connect.reload());

});

gulp.task('js', function () {
    browserify(path.MAINJS, { debug: true })
        .transform(babelify, { presets: ['react', 'es2015'] })
        .bundle()
        .on('error', console.error.bind(console))
        .pipe(source('main.js'))
        .pipe(gulp.dest(path.DEST))
        .pipe(connect.reload());;

});

gulp.task('build', ['copyHtmlFiles', 'js']);

gulp.task('lint', function () {
    gulp.src(path.JS)
        .pipe(lint({ config: 'eslint.config.json' }))
        .pipe(lint.format())
});

gulp.task('watch', function () {
    gulp.watch(path.HTML, ['copyHtmlFiles']);
    gulp.watch(path.JS, ['js']);
});

gulp.task('connect', function () {
    connect.server({
        root: 'dist',
        livereload: true,
        port: appConfig.port
    });
});

gulp.task('reload', function () {
    gulp.src('dist/**/*').pipe(connect.reload());
});

gulp.task('open', function(){
        gulp.src(path.DEST + 'Index.html')
        .pipe(open({uri : appConfig.localBaseUrl + ':'+appConfig.port + '/'}));
});

gulp.task('default', ['build', 'connect', 'lint', 'open', 'watch']);
</code></pre>

<p>With the default gulp task running, either using <a href="https://code.visualstudio.com/Docs/editor/tasks">VSCode Task Runner</a> or the <a href="https://github.com/gulpjs/gulp/blob/master/docs/getting-started.md#4-run-gulp">command line</a>, any edits that I make to the code gets build and pushed to the output directory and the browser refreshes to show the latest changes.</p>

<p><img class="center" src= "/images/react_realtime_edits.gif" alt="React real-time browser refresh" /></p>

<p><em>If you find any package details missing see the <a href="https://github.com/rahulpnath/Blog/blob/master/React_Template/package.json">package.json</a> file.</em></p>

<p>You can find the hello world project template <a href="https://github.com/rahulpnath/Blog/tree/master/React_Template">here</a>. The repository size is a bit high as I have <a href="http://www.rahulpnath.com/blog/checking-in-package-dependencies-into-source-control/">included the npm packages</a> (<em>node_modules</em>) in the repository, which you would have anyways downloaded when doing a &lsquo;<a href="https://docs.npmjs.com/cli/install">npm install</a>&rsquo;.</p>

<p>Hope this helps you to get started with React!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning TypeScript: Setting up the Environment]]></title>
    <link href="http://rahulpnath.com/blog/learning-typescript-setting-up-the-environment/"/>
    <updated>2015-12-25T23:30:07+00:00</updated>
    <id>http://rahulpnath.com/blog/learning-typescript-setting-up-the-environment</id>
    <content type="html"><![CDATA[<blockquote><p>TypeScript is  superset of JavaScript and compiles to clean JavaScript output.</p></blockquote>

<p><a href="http://www.typescriptlang.org/">TypeScript</a> has been around for some time and is gaining more traction these days with more and more projects embracing it. The latest addition to the list <a href="https://angular.io/">Angular 2</a>, which is a very popular JavaScript framework. TypeScript brings in more structure to the way JavaScript is written and maintained. Being a compiled language, errors will be found as the code is written and not waiting till run time. Ease of refactoring and rich tooling support makes TypeScript a perfect choice for large-scale projects. TypeScript also provides improved code readability and organizing capabilities. The official documentation is a good starting point to get started with TypeScript and get some hands-on experience using <a href="http://www.typescriptlang.org/Playground">Playground</a>, which shows the compiled JavaScript real-time in browser. If you are like me, who would prefer a similar experience, but in you favourite editor then this post explains how to set up the environment for playing around with TypeScript and seeing the real-time compiled JavaScript.</p>

<ul>
<li><p><strong>Create folder</strong> To start with lets first create a folder to work in. In this example I would be using npm(Node Package Manager) to get all the required packages. If you are new to Node, then head off to <a href="https://nodejs.org/en/">here</a> to get started and install the runtime before continuing on.</p></li>
<li><p><strong>npm init</strong> Once done with the node setup, run the <a href="https://docs.npmjs.com/cli/init">init</a> command, within the project folder (created above), to initialize the node project. This prompts a series of questions and creates a <em>package.json</em> file with the entered options.</p></li>
<li><strong>npm install -g typescript</strong> If you already have TypeScript installed (which comes in default with Visual Studio 2013 Update 2 onwards) then you can skip this step. If not, run &lsquo;npm install -g typescript&rsquo;, which will install it into the global scope.</li>
<li><strong>Hello World from TypeScript</strong> With the compiler setup, we are good to write out first hello world, for which we create a file with .ts extension.
&#8220;` javascript
function HelloWorld(name: string){
  alert(&lsquo;Hello World &rsquo; + name);
}</li>
</ul>


<p>HelloWorld(&ldquo;TypeScript&rdquo;);
<code>
To compile this manually we need to run the TypeScript compiler (which we installed in the previous step). The below command will compile the TypeScript file into JavaScript and output into the same folder.
</code> text
tsc HelloWorld.ts
<code>
</code> javascript
function HelloWorld(name) {
    alert(&lsquo;Hello &rsquo; + name);
}</p>

<p>HelloWorld(&ldquo;TypeScript&rdquo;);
<code>
- **Automating the compilation** To prevent running the above step every time we make a change to the typescript file, we can automate the build step. The tsc has a compiler switch to watch the file for changes and automatically compile every time a change happens. For this run the above command with a '*--watch*' command.
</code> text
tsc HelloWorld.ts &ndash;watch
&#8220;`
<img class="center" alt="Visual Studio Code Coverage" src="/images/tsc_options.png" /></p>

<p>The watch switch is only available in the later versions of the compiler. To check whether your version supports it, run tsc alone which will show all the supported commands. If you do not see the watch switch as shown above, you will need to update the TypeScript compiler version. For this check the environment variables to see the path to your current compiler. If this has a path to an older version (possibly to one that Visual Studio installed at <em>Program Files (x86)\Microsoft SDKs\TypeScript</em>), then remove it. Now do a fresh install using npm, to install the latest version.</p>

<p>Open up both the TypeScript file and the generated JavaScript file in your favorite editor and you will see real-time updates to the JavaScript code, when you update the TypeScript code.<br/>
<img class="center" alt="Visual Studio Code Coverage" src="/images/TypeScript.gif" /></p>

<p>Hope this helps you with setting up the development environment to learn TypeScript!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yo ko - A Yeoman Generator For KnockoutJS]]></title>
    <link href="http://rahulpnath.com/blog/yo-ko-a-yeoman-generator-for-knockoutjs/"/>
    <updated>2014-08-20T10:20:06+00:00</updated>
    <id>http://rahulpnath.com/blog/yo-ko-a-yeoman-generator-for-knockoutjs</id>
    <content type="html"><![CDATA[<p>Templates/Scaffolding is something that we are all used to nowadays, given that we use an IDE for development. Visual Studio is one popular IDE, that is very popular among people developing on the Microsoft platform. Visual studio comes with a lot of pre-installed templates and scaffolding templates and also has a rich extension support from the <a href="http://visualstudiogallery.msdn.microsoft.com/site/search?f%5B0%5D.Type=RootCategory&amp;f%5B0%5D.Value=templates&amp;f%5B0%5D.Text=Templates">community</a>. While developing on text editors(say like <a href="http://www.sublimetext.com/">Sublime Text</a> which is what I have been using), which are not for any specific technology you might not have all the templating and scaffolding supported right out of the box. You might find plugins for specific editors but not for all the frameworks that are available today.</p>

<p><a href="http://yeoman.io/">Yeoman</a> is the Web&rsquo;s scaffolding tool for Modern Web Apps. Yeoman is a command line tool that runs over <a href="http://nodejs.org/">Node.js</a>. Setting it up is pretty easy with the instructions <a href="http://yeoman.io/learning/index.html">here</a>. To scaffold web applications, which is the same as creating a new project in Visual Studio from a template, we need to install framework specific generators for Yeoman. There are some `<a href="http://yeoman.io/generators/official.html">officially maintained generators</a> and also ones that are <a href="http://yeoman.io/generators/community.html">maintained by the community</a>.</p>

<p>KnockoutJs helps you simplify dynamic JavaScript UIs using the Model-View-ViewModel (MVVM) pattern. If you are new to knockout and come from a XAML backgorund, <a href="http://www.rahulpnath.com/blog/knockoutjs-for-xaml-developers/">KnockoutJS For XAML Developers</a>, would help you.   For KnockoutJs, there is an awesome generator that is written by <a href="https://twitter.com/stevensanderson">Steve Sanderson</a>, the creator of knockout itself and is available <a href="https://www.npmjs.org/package/generator-ko">here</a>. You can install this as below</p>

<blockquote><p>$ npm install generator-ko</p></blockquote>

<p>Once installed you can generate your web app from the command prompt and running the command &lsquo;<strong>yo ko</strong>&rsquo;. This is will ask for the name of the project, whether to use JavaScript or TypeScript and also if you need to include automated tests using Jasmine and Karma. On giving your options your web app would be  scaffolded out.</p>

<p><img class="center" alt="hp_dv4" src="/images/yo_ko.png" /></p>

<p><strong>Project Structure</strong></p>

<p>The generated web app is a simple Single Page Application(SPA), using the components feature released with <a href="http://blog.stevensanderson.com/2014/08/18/knockout-3-2-0-released/">Knockout 3.2.0</a>, <a href="http://bower.io/">Bower</a> to manage packages and <a href="http://gulpjs.com/">Gulp</a> for the build</p>

<p><img class="left" alt="hp_dv4" src="/images/yo_ko_structure.png" /> The generator creates the folder structure as shown here and by default has setup the required packages. It uses the following packages:</p>

<ul>
<li><a href="http://getbootstrap.com/">Bootstrap</a>: Responsive UI framework</li>
<li><a href="http://millermedeiros.github.io/crossroads.js/">Crossroads</a>: Routing Library</li>
<li><a href="https://github.com/millermedeiros/hasher/">Hahser</a>: Browsing History Manager</li>
<li><a href="http://jquery.com/">Jquery</a>: Feature rich library</li>
<li><a href="http://millermedeiros.github.io/js-signals/">Js-Signals</a>: Custom/Event Messaging System</li>
<li><a href="http://www.rahulpnath.com/blog/knockoutjs-for-xaml-developers/">Knockout</a>: Simplifies dynamic Javascript UIs with <a href="http://www.rahulpnath.com/blog/tag/mvvm/">MVVM pattern</a></li>
<li><a href="http://requirejs.org/">Requirejs</a>: File and Module Loader</li>
<li><a href="https://github.com/requirejs/text">Requirejs-text</a>: AMD loader plugin for text resources</li>
</ul>


<p>There are three components: <em>about-page</em>, <em>home-page</em> and <em>nav-bar</em>. The main, <em>index.html</em> composes these components into the full blown view. The nav-bar component is referred as is and the home and about page are dynamically loaded based on the nav-bar menu interaction. As shown below the <em>div</em> binds to the component based on the selected route.We look further deep on how the view models bind and these components are tied together.<br style="clear:both;" />
<code>html
&lt;body&gt;
    &lt;nav-bar params="route: route"&gt;&lt;/nav-bar&gt;
    &lt;div id="page" class="container" data-bind="component: { name: route().page, params: route }"&gt;&lt;/div&gt;
&lt;/body&gt;
</code></p>

<p>The javascript modules are loaded using Requirejs and the startup class for this is <em>app/starup.js</em> as defined in the data-main attribute in index.html. The knockout components are registered here and view-bindings are setup.Registering a component can be in multiple ways and is well explained in the article <a href="http://www.knockmeout.net/2014/06/knockout-3-2-preview-components.html">here</a>. The <em>currentRoute</em> object is what gets binded to the page and is defined in the app/router.js where the crossroads is setup. To use any other routing library of your choice this is where you would need to update. Whenever a user clicks a menu item and navigates to a new route, the currentRoute is updated, which in turn triggers the corresponding component to get loaded. <a href="https://github.com/millermedeiros/hasher/">Hasher</a> library is used to listen to browser navigation events and update them to crossroads, where the input is parsed and dispatch matched signal for the first Route that matches the input.</p>

<p>The knockout components are defined in the <em>components</em> folder and has both the html and js parts in the same component folder. Whenever the component is loaded the viewmodel defined in the corresponding js file gets bounded to it. This way of developments helps to keep different components of the app well separated as modules and compose them into the view as required.</p>

<p>The build is managed is using <a href="http://gulpjs.com/">Gulp</a>, which can be installed using <a href="https://www.npmjs.org/package/gulp">npm</a>. To build the project, you need to run <em>gulp</em> at the root folder. The build packages all the javascript modules/files into a single file, replaces the required updates in the html file, minifies the html, js and css etc. If not for the build systems, the application would  have to make lots of file/scripts/css requests or would have to have it all in the same file while development which makes working as a team difficult. These build system are highly configurable and can be used to setup output as required. The build tasks are defined in the <em>gulpfile.js</em> and the &lsquo;<em>default</em>&rsquo; task runs when running the gulp command. This is will generate the optimized files in the <em>dist</em> folder, which can be hosted in the server of your choice. I use the <a href="https://www.npmjs.org/package/http-server">zero-configuration command-line http-server</a> available on nodejs.</p>

<p><img src="/yo_ko_app.png" alt="yo ko application " /></p>

<p><strong>Adding New Components</strong></p>

<p>To add new components the knockout generator provides a command which generated the html/css components in the appropriate folder. You would still need to add the registration of the component in the startup file.</p>

<blockquote><p>yo ko:component &lt;component name&gt;</p></blockquote>

<p>This is just a starting point on building Single Page Applications using knockoutjs. Start on from here to build great web applications.</p>

<p><strong>Additional Resources</strong></p>

<ul>
<li><a href="http://blog.stevensanderson.com/2014/06/11/architecting-large-single-page-applications-with-knockout-js/">Architecting large Single Page Applications with Knockout.js</a></li>
<li><a href="http://www.knockmeout.net/2014/06/knockout-3-2-preview-components.html">Knockout.js 3.2 Preview : Components</a></li>
<li><a href="http://www.scottlogic.com/blog/2014/02/28/developing-large-scale-knockoutjs-applications.html">Developing Large Scale Knockoutjs Applications</a></li>
<li><a href="http://www.scottlogic.com/blog/2014/07/30/spa-angular-knockout.html">Single Page Applications - Angular Vs Knockout</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KnockoutJS For XAML Developers]]></title>
    <link href="http://rahulpnath.com/blog/knockoutjs-for-xaml-developers/"/>
    <updated>2014-07-07T23:35:39+00:00</updated>
    <id>http://rahulpnath.com/blog/knockoutjs-for-xaml-developers</id>
    <content type="html"><![CDATA[<p>After a very long time since I have actually wanted to move out to web development, recently I have started developing a website as part of my personal project, along with a friend of mine. I have been into desktop/mobile development on Microsoft technologies, using XAML for a very long time. <a href="http://www.rahulpnath.com/blog/tag/mvvm/">Model-View-View Model (MVVM)</a> is a pattern that got popular because of the powerful binding engine in XAML. It is always comforting to see familiar patterns while moving into unexplored technology areas. Same is the reason I chose to explore <a href="http://knockoutjs.com/index.html">KnockoutJS</a>(KO), which simplifies dynamic JavaScript UIs with the MVVM pattern.</p>

<p><img src="/MVVM_Knockoutjs.jpg" alt="MVVM Knockout" /></p>

<p>KnockoutJS acts as the binding engine in XAML and binds your ViewModel(VM) with your View as shown in the figure. As you expect, like in XAML it provides a way to specify declarative-bindings on html using the <a href="http://knockoutjs.com/documentation/binding-syntax.html">data-bind</a> attribute and is also widely <a href="http://knockoutjs.com/documentation/browser-support.html">supported across different browsers</a>. The Model is the data that is populated from the server after your business logics applied,  mostly populated out of Ajax JSON calls from a web service/api. This Model data might mostly need some transformation to map to your View needs which is what exactly the ViewModel does. It transforms the Model data and wraps over it to provide features like 2-way-binding, client side validation, transformation of properties, UI specific state and a lot more</p>

<p>We will see below how some of the major constructs in XAML map over to KnockoutJS.</p>

<blockquote><p><em>I assume that you are a XAML developer and am not including detailed code samples for the XAML part and would be just mentioning them.</em></p></blockquote>

<p><strong>1. INotifyPropertyChanged</strong></p>

<p>Notifying data bounded clients on updates to the underlying bound data is a typical scenario in XAML, where we use <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged(v=vs.110).aspx">INotifyPropertyChanged</a> interface. This is also required on web pages and is handled by KO using <em><a href="http://knockoutjs.com/documentation/observables.html">observables</a></em></p>

<pre><code class="javascript">var personVM = {
    Name: ko.observable('Rahul'),
    Age: ko.observable(50)
};
</code></pre>

<p>Declaring the property as an observable, makes any changes to the property immediately reflect on the bound UI elements, just like it happens on a property of a class that implements INotifyPropertyChanged.</p>

<p><pre class="codepen" data-height="300" data-type="js" data-href="CuIfK" data-user="rahulpnath"><code> </code></pre>
<script async src="http://codepen.io:/assets/embed/ei.js"></script></p>

<p><strong>2. DataContext</strong></p>

<p>In XAML we set the DataContext as the ViewModel to start binding the data from the ViewModel on the UI. Similarly in KO we have to call on to <em>applyBindings </em>method, passing on the ViewModel object to bind. You can see this in the above sample. You can also pass in an additional parameter indicating the part of the document that you want to explicitly bind to.</p>

<p><strong>3. DataBinding</strong></p>

<p>Binding the data to the UI in XAML is done declaratively using the <a href="http://msdn.microsoft.com/en-us/library/system.windows.data.binding(v=vs.110).aspx">Binding</a> syntax. Similarly in KO we use the <a href="http://knockoutjs.com/documentation/binding-syntax.html">data-bind</a> attribute to bind to a registered, built-in or custom, binding handler. As opposed to XAML where we bind to different properties, in KO all bindings are mentioned in the same data-bind attribute, separated by comma. A binding in KO consists of a name value pair separated by a colon, where the name corresponds to the binding handler/the property that we are binding to and the value from the VM that we need it to be bound to. A simple example of binding to the text property of a label would be <em>data-bind=&ldquo;text: Name&rdquo; . </em>You can also use the <a href="http://knockoutjs.com/documentation/with-binding.html">with binding</a> to create binding contexts for descendant elements as in XAML</p>

<p><strong>4. INotifyCollectionChanged</strong></p>

<p>In XAML updates to a collection is usually handled using an <a href="http://msdn.microsoft.com/en-us/library/ms668604(v=vs.110).aspx">ObservableCollection</a>, which notifies the UI whenever an item is added/removed to the collection. Similarly in KO you can use <em>observableArray</em>, which behaves the same as ObservableCollection. It notifies the bound UI elements whenever an element is added/removed from the array. Updates or changes to individual properties on the actual objects in the array is notified to the UI only if the property is an <em>observable, </em>as in XAML. In the below sample, you can try adding an observable item or a non-observable item to the list. As soon as you add an item it reflects in the list. But selecting and editing an item will reflect in the list only if you are editing an observable item. </p>

<p><pre class="codepen" data-height="300" data-type="js" data-href="FreIv" data-user="rahulpnath"><code> </code></pre>
<script async src="http://codepen.io:/assets/embed/ei.js"></script></p>

<p><strong>5. Dependent Properties</strong></p>

<p>In XAML when there are properties dependent on others , to notify changes we have to explicitly call RaisePropertyChanged on all the dependent properties. A very common example is below</p>

<pre><code class="csharp">private string firstName;
public string FirstName
{
   get { return firstName; }
   set
   {
        if (firstName!= value)
        {
            firstName= value;
            OnPropertyChanged("FirstName");
            OnPropertyChanged("FullName");
        }
   }
}
public string FullName
{
    get { return FirstName +" " + LastName; }
}
</code></pre>

<p>Here whenever FirstName is updated to notify UI elements bound to FullName would be updated only if we explicitly call PropertyChanged on FullName property too. In KO this is handled using <a href="http://knockoutjs.com/documentation/computedObservables.html">computed observables</a> and is much more elegant.</p>

<pre><code class="javascript">this.fullName = ko.computed(function() {
    return this.firstName() + " " + this.lastName();
}, this);
</code></pre>

<p><strong>6. Commanding</strong></p>

<p>Commanding is how user interactions are bound to actions/functions on ViewModel, which will in turn perform something useful for the user. Like e.g. clicking a button. In KO this is handled using the same <a href="http://knockoutjs.com/documentation/click-binding.html">data-bind</a> attribute using key’s corresponding to event handlers. &#8220;</p>

<pre><code class="html">&lt;button data-bind="click: performSomeAction"&gt;Click me&lt;/button&gt;
</code></pre>

<p><strong>7. Value Converters </strong></p>

<p>The <a href="http://msdn.microsoft.com/en-us/library/system.windows.data.ivalueconverter(v=vs.110).aspx">IValueConverter</a> interface is to create a converter that can be applied on a Binding to provide custom logic on the data that gets bounded to the UI element. For a similar functionality in KO, there is <a href="http://knockoutjs.com/documentation/computedObservables.html">writable computed observable</a> to convert to and from a specific format of data. The read and write function on the computed observable, corresponds to the Convert and ConvertBack functions on IValueConverter on XAML.</p>

<p><pre class="codepen" data-height="300" data-type="js" data-href="dJhLm" data-user="rahulpnath"><code> </code></pre>
<script async src="http://codepen.io:/assets/embed/ei.js"></script></p>

<p>There are a lot of useful resources on the web that are freely available to get started with KnockoutJS. Some of them are listed below</p>

<ul>
<li><p><a href="http://knockoutjs.com/documentation/introduction.html">Official Documentation</a></p></li>
<li><p><a href="http://learn.knockoutjs.com/">Learn By Doing</a></p></li>
<li><p><a href="https://www.youtube.com/results?search_query=knockout+javascript">Videos</a></p></li>
<li><p><a href="http://channel9.msdn.com/Search?term=knockout#ch9Search">More Videos</a></p></li>
</ul>


<p>Hope you find this useful to easily understand KnockoutJS, re-applying your XAML knowledge . Do drop in a comment in case you find any other similarities with XAML that I have missed mentioning here and I would be happy to add it in. I am sure I have not covered it completely!
<a href="http://www.codeproject.com" style="display:none" rel="tag">CodeProject</a></p>
]]></content>
  </entry>
  
</feed>
