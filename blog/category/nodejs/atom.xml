<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nodejs | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/category/nodejs/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2018-01-16T00:01:52+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Azure Key Vault From Node.js]]></title>
    <link href="http://rahulpnath.com/blog/azure-key-vault-from-node-dot-js/"/>
    <updated>2017-06-12T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/azure-key-vault-from-node-dot-js</id>
    <content type="html"><![CDATA[<p><img src="/images/nodejs_keyvault.png" alt="Azure Key Vault from Node js" class="center" /></p>

<p>If you develop on Node.js, you can use the <a href="https://github.com/Azure/azure-sdk-for-node">Azure SDK for Node</a> that makes it easy to consume and manage Microsoft Azure Services. In this post let&rsquo;s explore how to use the node SDK to connect to Azure Key Vault and interact with the vault objects. If you are new to key vault check out my <a href="http://www.rahulpnath.com/blog/category/azure-key-vault/">other posts here to get started</a>.</p>

<p>The <a href="https://www.npmjs.com/package/azure-keyvault">azure-keyvault</a> npm (node package manager) package allows accessing keys, secrets, and certificates on Azure Key Vault. It required Node.js version 6.x.x or higher. You can get the <a href="https://nodejs.org/en/">latest Node.js version here</a>.</p>

<blockquote><p><strong>Package Features</strong></p>

<ul>
<li><p><em>Manage keys: create, import, update, delete, backup, restore, list and get.</em></p></li>
<li><p><em>Key operations: sign, verify, encrypt, decrypt, wrap, unwrap.</em></p></li>
<li><p><em>Secret operations: set, get, update and list.</em></p></li>
<li><p><em>Certificate operations: create, get, update, import, list, and manage contacts and issuers.</em></p></li>
</ul>
</blockquote>

<p>It is easy to setup a new project and execute code using Node. The ease of setup is one of the things that I liked about node. To try out the Key Vault package, you can start fresh in a new folder and create a javascript file - <em>main.js</em> (you can name it anything you want).</p>

<p>The following packages are <em>required</em> to connect to the vault and authenticate. The <em><a href="https://www.npmjs.com/package/azure-keyvault">azure-keyvault</a></em> package as we saw above provides capabilities to interact with the vault. The <a href="https://www.npmjs.com/package/adal-node"><em>adal-node</em></a> is the Windows Active Directory Authentication Library for Node. The package makes it easy to authenticate to AAD to access AAD protected web resources. Applications using key vault need to <a href="http://www.rahulpnath.com/blog/authenticating-a-client-application-with-azure-key-vault/">authenticate using a token from an Azure AD Application</a>.</p>

<pre><code class="js">const KeyVault = require('azure-keyvault');
const { AuthenticationContext } = require('adal-node')
</code></pre>

<h4><strong>Authenticate Using ClientId and Secret</strong></h4>

<p>Create the Azure AD application and the Secret key as shown in <a href="http://www.rahulpnath.com/blog/authenticating-a-client-application-with-azure-key-vault/">this post</a>. Grab the ClientId and Secret for authentication from the node application.</p>

<pre><code class="js">const clientId = "CLIENT ID";
const secret = "SECRET";

var secretAuthenticator = function (challenge, callback) {

    var context = new AuthenticationContext(challenge.authorization);
    return context.acquireTokenWithClientCredentials(
        challenge.resource,
        clientId,
        secret,
        function (err, tokenResponse) {
            if (err) throw err;

            var authorizationValue = tokenResponse.tokenType + ' ' + tokenResponse.accessToken;
            return callback(null, authorizationValue);
        });
};
</code></pre>

<p>To access the vault, we need to create an instance of the KeyVaultClient object which taken in a Credentials as shown below. The KeyVaultClient has different methods exposes to interact with keys, secrets, and certificates in the vault. For e.g. To retrieve a secret from the vault the <em>getSecret</em> method is used passing in the secret identifier.</p>

<pre><code class="js">const secretUrl = "https://rahulkeyvault.vault.azure.net/secrets/ApiKey/b56396d7a46f4f848481de2e149ef069";
var credentials = new KeyVault.KeyVaultCredentials(secretAuthenticator);
var client = new KeyVault.KeyVaultClient(credentials);

client.getSecret(secretUrl, function (err, result) {
    if (err) throw err;

    console.log(result);
});
</code></pre>

<h4><strong>Authenticate Using ClientId and Certificate</strong></h4>

<p>To authenticate using ClientId and Certificate the AuthenticationContext exposes a function <em>acquireTokenWithClientCertificate</em> which takes in the certificate (pem format) and the certificate thumbprint. If you already have a certificate go ahead and use that. If not create a new test certificate as shown below</p>

<pre><code class="bash">makecert -sv mykey.pvk -n "cn=AD Test Vault Application" ADTestVaultApplication.cer -b 03/03/2017 -e 06/05/2018 -r
pvk2pfx -pvk mykey.pvk -spc ADTestVaultApplication.cer -pfx ADTestVaultApplication.pfx -po test
</code></pre>

<p>Create a new AD application and set it to use certificate authentication. Assign the application permissions to access the key vault.</p>

<pre><code class="powershell">$certificateFilePath = "C:\certificates\ADTestVaultApplication.cer"
$certificate = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
$certificate.Import($certificateFilePath)
$rawCertificateData = $certificate.GetRawCertData()
$credential = [System.Convert]::ToBase64String($rawCertificateData)
$startDate= [System.DateTime]::Now
$endDate = $startDate.AddYears(1)
$adApplication = New-AzureRmADApplication -DisplayName "CertAdApplication" -HomePage  "http://www.test.com" -IdentifierUris "http://www.test.com" -CertValue $credential  -StartDate $startDate -EndDate $endDate

$servicePrincipal = New-AzureRmADServicePrincipal -ApplicationId $adApplication.ApplicationId

Set-AzureRmKeyVaultAccessPolicy -VaultName 'RahulKeyVault' -ServicePrincipalName $servicePrincipal.ServicePrincipalNames[0] -PermissionsToSecrets all -PermissionToKeys all 
</code></pre>

<p>To convert the pvk file into the pem format that is required by adal-node to authenticate with the AD application use the below command.</p>

<pre><code class="bash">openssl rsa -inform pvk -in mykey.pvk -outform pem -out mykey.pem
</code></pre>

<p>Using the pem encoded certificate private key, we can authenticate with the vault as shown below.</p>

<pre><code class="js">function getPrivateKey(filename) {
    var privatePem = fs.readFileSync(filename, { encoding: 'utf8' });
    return privatePem;
}

var certificateAuthenticator = function (challenge, callback) {
    var context = new AuthenticationContext(challenge.authorization);

    return context.acquireTokenWithClientCertificate(
        challenge.resource,
        clientId,
        getPrivateKey("mykey.pem"),
        "CERTIFICATE THUMBPRINT",
        function (err, tokenResponse) {
            if (err) throw err;

            var authorizationValue = tokenResponse.tokenType + ' ' + tokenResponse.accessToken;
            return callback(null, authorizationValue);
        }
    )
};
</code></pre>

<p>Using the <em>certificateAuthenticator</em> is the same as using the <em>secretAuthenticator</em>, by passing it to <em>KeyVaultCredentials</em></p>

<pre><code class="js">var credentials = new KeyVault.KeyVaultCredentials(certificateAuthenticator);
var client = new KeyVault.KeyVaultClient(credentials);

client.getSecret(secretUrl, function (err, result) {
    if (err) throw err;

    console.log(result);
});
</code></pre>

<p>To run the application first run <em>npm install</em> to install all the required packages and then execute the js file using <em>node main.js</em>. It fetches the secret value from the key vault using the certificate or secret authenticator. Hope this helps you to get started with Azure Key Vault from Node.js.</p>
]]></content>
  </entry>
  
</feed>
