<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blogging | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/category/blogging/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2017-06-09T00:01:36+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Maintaining a Blogging Schedule]]></title>
    <link href="http://rahulpnath.com/blog/maintaining-a-blogging-schedule/"/>
    <updated>2016-10-24T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/maintaining-a-blogging-schedule</id>
    <content type="html"><![CDATA[<p>Consistency is important in blogging. It does not matter if you are bad at writing, have nothing to write or nobody reads your blog. What matters is whether you write on a predictable schedule - once a month, once a week, once a year, one per day etc. If you do not have a schedule you are more likely to fall off from sticking to blogging. I had <a href="http://www.rahulpnath.com/blog/own-your-urls/">written before</a>, I always struggled to write regularly. But since the start of this year, I have been blogging to a schedule (once a week) and have been successful with that. This post looks into some of the challenges that I faced and things that I have incorporated to stick to a schedule.</p>

<p><a href="https://www.flickr.com/photos/12389767@N04/3097124543/">
<img  alt="Make writing a habit - write daily" src="/images/bloggingSchedule_writedaily.jpg"/>
</a></p>

<h3>Make Writing a Habit</h3>

<p>Writing posts was hard and I always procrastinated on it. It often took me more than a week to complete a post. There&rsquo;s a saying, <strong><em>If it hurts, do it more often</em></strong> - So to make writing easy I had to write more often.</p>

<blockquote><p><em>I write only when inspiration strikes. Fortunately it strikes every morning at nine o&#8217;clock sharp.</em></p>

<p><em>- <a href="http://www.goodreads.com/quotes/302963-i-write-only-when-inspiration-strikes-fortunately-it-strikes-every">Somerset Maugham</a></em></p></blockquote>

<h4><strong>Generating Topics</strong></h4>

<p>Till a year back I struggled to find topics to blog. I did not find any &lsquo;cool thing&rsquo; that was worth blogging. Not much has changed even now on doing &lsquo;cool things&rsquo;. The only thing that changed was that I decided to write every day - no matter what I do or don&rsquo;t do.</p>

<blockquote><p><em>I have always struggled to find topics to blog, but then I realized all I need is to pay attention to things that I do daily</em></p></blockquote>

<p>A year back I asked <a href="https://simpleprogrammer.com/about-simple-programmer/">John Somnez from SimpleProgrammer</a> the same question.</p>

<p><img  alt="email to John Somnez (SimpleProgrammer) on finding a blogging schedule" src="/images/bloggingSchedule_john_email.png"/></p>

<p>Though I did not get a reply from John, it kept me thinking. Late last year I started a Daily challenge of &lsquo;<em>Generating at least one blog topic a day</em>&rsquo; for a month. I did not have to write anything, just find a topic to blog and add it to a OneNote list. I did this for a month and found that I had enough topics to write on. Since the challenge did not have anything to do with writing, I did not restrict my thoughts. This is when I realized that it is not the lack of topics that I don&rsquo;t blog, but the fear of writing. That&rsquo;s when I started the &lsquo;Write Everyday&rsquo; daily challenge.</p>

<h4><strong>Write Everyday</strong></h4>

<p>This is one of the most important things that I found to be able to write posts regularly - <strong>Write Everyday</strong>. Yes every day, no matter what happens, I write at least one line towards a post. Since the goal is to <em>Write just one line for a blog post</em>, I hardly miss this goal. <a href="http://www.rahulpnath.com/blog/morning_routine/">Keeping the goal small and simple</a> is a trick that I picked from the book Mini Habits and find it useful. You can follow this for anything that you want to make a habit.</p>

<h4><strong>Make it Visible</strong></h4>

<p>Seeing something progressing to completion helps me to get it done faster. I used to write elsewhere and then copy it to my blog and publish it. This did not give me a sense of progression. I now have a <a href="/blog/optimizing-octopress-workflow-for-new-posts/">draft post workflow</a>, integrated with my blogging platform. I can preview this blog along with the draft posts on my laptop. This helps give a sense of progression and also makes the end goal visible.</p>

<blockquote><p><em>Making your goal clear and visible helps you achieve it faster</em></p></blockquote>

<p>I also use this to keep track of new post ideas. Whenever I find a topic to blog, I add it as a draft. I add bullet points to the post whenever I get more thoughts on that topic. Once there are enough points to write about, I work on that post.</p>

<h3>Make Blogging All About Writing</h3>

<p>The last thing that I want is to get stuck with mundane repetitive tasks of publishing a post to get in the way of writing. The more regular I became in writing, I started noticing a lot of repetitive tasks in my blogging workflow. When you do any activity repetitively you notice tasks that you do over and over again. I started modifying my blog engine for my needs and to reduce manual effort.</p>

<h4><strong>Write in Advance</strong></h4>

<p>Having posts ready to be published is helpful as it gives the flexibility to slack a bit when in need. It&rsquo;s a great feeling to have blog posts ready to be published (right now I have posts ready for a month). I modified my blogging engine to support <a href="/blog/automatic_deployment_of_future_posts_with_octopress">publishing posts on future dates</a>. This helps me set publishing dates in the future for posts and it gets automatically deployed on the day. Automating the publishing helped make blogging more about writing. I can forget about it as soon as I complete a post by specifying the date I want it to be published and be rest assured that it will get published.</p>

<h4><strong>Make Writing Accessible</strong></h4>

<p>You never know when you have that free time and want to blog. Maybe it&rsquo;s while traveling, or waiting in a queue or at your work desk. You might be <a href="/blog/staying-productive-offline">offline or connected</a> Making it possible to write from irrespective of the kind of device (laptop, mobile, tablet) and connectivity was key for me. I have my draft posts synchronized through Dropbox and available on all my devices. This helps use all the pockets of time that I get for myself.</p>

<p>These are the things that have helped me pick a schedule and follow it. I have been successful in publishing one post per week for the past 10 months and want to keep at it going forward. Now that I am able to publish regularly, I want to improve the speed at which I write posts. Though I reduced the time from over a week to days, I still find this too long and want to reduce it to a day. Modifying the way images are added, optimized and served is also something that I am trying to optimize currently. Do you <a href="http://www.rahulpnath.com/blog/own-your-urls/">have a blog</a>? If not start one and stick to a schedule that works for you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automatic Deployment of Future Posts With Octopress]]></title>
    <link href="http://rahulpnath.com/blog/automatic_deployment_of_future_posts_with_octopress/"/>
    <updated>2016-09-12T00:00:00+00:00</updated>
    <id>http://rahulpnath.com/blog/automatic_deployment_of_future_posts_with_octopress</id>
    <content type="html"><![CDATA[<p>Since the start of this year, I have been trying to blog to a schedule and publish posts more often. The goal that I have set myself with is to post four posts a month, preferably one each week. I have been sticking to it till now, and I hope it continues. Initially, I did not have this upper limit on the number of posts in a month. In the month of March 2016, I went a bit aggressive and published nine articles. It made me think more about setting an upper limit on the number of posts so that I don&rsquo;t end up having higher expectations out of myself.</p>

<h3>Staying Ahead</h3>

<p>Having published nine posts, also made me realize that I could write faster if required and have posts ready for future. It will help me to stay ahead of the posting schedule and give me some off-time when I need it. But this also presented me with a new problem on how to manage and schedule posts for the future.</p>

<blockquote><p><em>The more I automate the mundane tasks of blogging, the more I can concentrate on the writing part</em></p></blockquote>

<h3>Jekyll Future flag</h3>

<p><a href="http://octopress.org/docs/">Octopress</a> is over <a href="https://jekyllrb.com/">Jekyll</a> and it provides all the capabilities that Jekyll provides. The <a href="https://jekyllrb.com/docs/configuration/"><em>future</em> flag</a> in Jekyll indicates <strong><em>whether or not to publish posts or collection documents with a future date.</em></strong> With the flag set to false, Jekyll will not generate posts that have a date in the future. It works perfectly for me as all I need to do is to publish posts into the <em>_posts</em> directory once it&rsquo;s ready, with a date in the future. I have a <a href="http://www.rahulpnath.com/blog/optimizing-octopress-workflow-for-new-posts/">draft workflow</a>, which puts posts into a <em>_drafts</em> folder and move them into the <em>_posts</em> folder once ready. I updated the rake script that publishes drafts as posts, to take in a publish date and use that to update the post date.</p>

<pre><code class="Ruby">task :publish_draft do
...
puts "Publish Date?"
publishDateString = STDIN.gets.chomp
publishDate = DateTime.parse(publishDateString)
...
dest = "#{source_dir}/#{posts_dir}/#{publishDate.strftime('%Y-%m-%d')}-#{filename}"
puts "Publishing post to: #{dest}"
File.open(source) { |source_file|
contents = source_file.read
contents.gsub!(/^thisIsStillADraft:$/, "date: #{publishDate.strftime('%Y-%m-%d')}\ncompletedDate: #{DateTime.now.strftime('%Y-%m-%d %H:%M:%S %z')}")
...      
</code></pre>

<p>The rake script appends the publish date to the post file name and also the yaml date information and moves it from the <em>_drafts</em> to <em>_posts</em> folder. It also adds a completedDate set to the current time with the timezone information, just for reference.</p>

<h3>Integrating with Travis CI</h3>

<p>I have the <a href="/blog/continuos_delivery_of_octopress_blog_using_travisci_and_docker">deployment of my blog automated via Travis CI</a>, which builds and deploys the site when committing to the <a href="https://github.com/rahulpnath/rahulpnath.com">GitHub repository</a>. For future posts since there might not be a commit on the publish date, I need to trigger the build on those days, to publish the posts scheduled. The <a href="https://azure.microsoft.com/en-us/services/scheduler/">Azure Scheduler</a> enables scheduling requests and also provides out of the box support to invoke web service endpoints over HTTP/HTTPS. <a href="https://docs.travis-ci.com/api">Travis CI exposes an API</a> to interact with the build system and is the same API that the official Web interface uses. The API supports <a href="https://docs.travis-ci.com/user/triggering-builds">triggering builds</a> by making a POST request with an API token and the build details. The API has <a href="https://github.com/travis-ci/travis-ci/issues/5101">an existing bug</a> that requires the slash separating username and repository name in the trigger URL be encoded(%2F). Azure, however, does not like this and treats it as an invalid URL with the bellow error.</p>

<p><img class="center" alt="Azure Scheduler Encoded URL error" src="/images/blogtrigger_scheduler_url_error.png" /></p>

<p>The only way now is to have to custom write this code and have it scheduled. I chose the one with the least work involved - Azure Automation. <a href="https://azure.microsoft.com/en-us/services/automation/">Azure Automation</a> allows to create Run books and automatically trigger it on a schedule. The Azure Automation has a <a href="https://azure.microsoft.com/en-us/pricing/details/automation/">pricing plan with 500 minutes free</a> Job run time in a month, which meets my requirements. I created a <a href="https://azure.microsoft.com/en-us/documentation/articles/automation-runbook-types/#powershell-runbooks">PowerShell script</a> and added in the token (<em>TravisToken</em>) and the build URL (<em>TravisBuildUrl</em>) as <a href="https://azure.microsoft.com/en-us/documentation/articles/automation-runbook-input-parameters/">parameters to the script</a>.</p>

<pre><code class="powershell">$travisBlogTriggerApiUrl = Get-AutomationVariable -Name 'TravisBuildUrl'
$token = Get-AutomationVariable -Name 'TravisToken'

$body = "{""request"": {""message"":""Scheduled Automated build"",""branch"":""master""}}"
$headers = @{
    'Content-Type' = 'application/json'
    'Accept' = 'application/json'
    'Travis-API-Version' = '3'
    'Authorization' = 'token ' + $token
}

Invoke-WebRequest -Method Post $travisBlogTriggerApiUrl -Body $body -Headers $headers -UseBasicParsing
</code></pre>

<p>The script runs on a schedule every day and triggers the Travis CI build. It deploys the latest generated site to Azure WebApp that hosts the site. Any posts scheduled for the current date gets picked up by Jekyll and included in the site generation.</p>

<p><figure>
    <img alt="Automatic Deployment of Future Posts With Octopress" src="/images/blog_scheduled.png" />
    <figcaption><em>Scheduler triggers TravisCI build. For details on how TravisCI is set up check <a href="http://rahulpnath.com/blog/continuos-delivery-of-octopress-blog-using-travisci-and-docker/">Continuos Delivery of Octopress Blog Using TravisCI and Docker</a></em></figcaption>
</figure></p>

<h3>Post to Social Media</h3>

<p>With the posts getting deployed automatically, I want to update all my social networks. I already use <a href="https://buffer.com/">Buffer</a> to post updates to all social networks. Buffer is like &lsquo;<strong><em>Write Once, Post Everywhere</em></strong>&rsquo; kind of service. It clubs all your social media profiles into one place and allows you to post to all of them by just writing it once.</p>

<p><a href="https://ifttt.com/recipes">IFTTT</a>(&lsquo;<em>If This Then That</em>&rsquo;) is a service that helps connect different apps and devices together based on a trigger. As the name says, you can trigger an action based on a trigger. IFTTT has many <a href="https://ifttt.com/channels">Channels</a> that can act as a source of the trigger. In my case, the trigger is a post getting published and I can hook into that event using the <a href="https://ifttt.com/feed">Feed Channel</a>. The feed channel has an option to trigger when a <a href="https://ifttt.com/channels/feed/triggers/5-new-feed-item">new item is available</a> on the feed. I use this to trigger an update to Buffer. <a href="https://ifttt.com/buffer">Buffer</a> is available as a channel on IFTTT but allows only update to one of the connected accounts in Buffer, which requires me to setup a recipe per social media account. I chose to use <a href="https://buffer.com/guides/email">update via email feature</a> in Buffer. It allows me to have just one recipe in IFTTT to update to all of my connected profiles in Buffer.</p>

<p><img class="center" alt="Trigger Buffer Email When New Post is Published" src="/images/blog_ifttt.png" /></p>

<p>With the Automated publishing of posts and ability to schedule them, I can concentrate more on just the writing part. I no longer have to push out posts manually. I had never thought that I would be scheduling posts in the future. But now that it is happening it&rsquo;s a great feeling when there are posts for a few weeks ahead all ready to go.</p>

<p><em><a href="http://www.rahulpnath.com/blog/morning_routine/">My Morning Routine</a> was the first posts to be deployed using the schedule.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuos Delivery of Octopress Blog Using TravisCI and Docker]]></title>
    <link href="http://rahulpnath.com/blog/continuos-delivery-of-octopress-blog-using-travisci-and-docker/"/>
    <updated>2016-09-01T04:11:12+00:00</updated>
    <id>http://rahulpnath.com/blog/continuos-delivery-of-octopress-blog-using-travisci-and-docker</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since I have wanted to deploy my blog automatically whenever there is a new commit pushed into the associated <a href="https://github.com/rahulpnath/rahulpnath.com">git repository</a>. I use Octopress as my blog engine and have been <a href="http://www.rahulpnath.com/blog/optimizing-octopress-workflow-for-new-posts/">tweaking it to my blogging workflow</a>. Octopress is a static blog generator built over Jekyll. So anytime I make any updates to the blog, I need to build the blog with the accompanying rake tasks and push the generated output (HTML, JavaScript, and CSS) to an Azure Web App that hosts my blog. For this I use the <a href="https://azure.microsoft.com/en-us/documentation/articles/web-sites-deploy/#continuousdeployment">git deployment feature</a> of web apps, so just pushing the built output to a git repo (branch) deploys it to my website. As you see every time, I make a change I have to build the site and push it to the git repository and this can be automated. Since Octopress is in Ruby, I decided to use <a href="https://travis-ci.org/">Travis CI</a> for the build and deploy.</p>

<h3>Local Build Environment with Docker</h3>

<p>I am on an older repository fork of Octopress and have not updated to latest version. So it has hard dependencies with specific versions of gem packages that it needs and also on the Ruby and Jekyll version. So every time I change laptop it&rsquo;s difficult to set up the blog environment. In the past, I manually installed the dependencies whenever I got a new laptop. As changing laptop does not happen frequently, I had been delaying creating any script for this. But now since I had to setup the Travis build environment, I thought of also having a local build environment to test before pushing it up to Travis. Travis provides a Docker image that matches exactly their build environment.</p>

<p>Setting up Docker is just a few steps:</p>

<ol>
<li><a href="https://docs.docker.com/docker-for-windows/">Install</a> the Docker components</li>
<li>Load the <a href="https://quay.io/organization/travisci">Docker image</a></li>
</ol>


<pre><code class="text">docker run -it -p 4000:4000 quay.io/travisci/travis-ruby /bin/bash
</code></pre>

<p>Once in the container, you can run the same build scripts that you manually run yo deploy and check. I had a few issues with the gem packages and <a href="https://github.com/rahulpnath/rahulpnath.com/commit/abefbf58e3696384c7931d5a4918239a41700106#diff-8b7db4d5cc4b8f6dc8feb7030baa2478">fixed it by specifying hard package dependency</a>. To launch the site hosted in Docker from host system <a href="https://github.com/wsargent/docker-cheat-sheet#exposing-ports">I expose incoming ports through the host container</a>. Once I have the local server running in the docker container (in port 4000) I can access it via <em>localhost:4000</em> from my host computer.</p>

<h3>Post Dates and TimeZones</h3>

<p>When building from the container, I noticed that the dates of posts were off by 1. For posts that were on month start (like Aug 1), it started coming up in July, on the archive page. After a bit of investigation, I realized that Jekyll parses the date time from the post and converts them into local system time. The container was running in UTC and when generating the site it converted post DateTime to UTC. All the posts that I had written after coming to Sydney had an offset of +1000 (or +1100) and most were published early in the morning. So it converted those posts to the previous date.
Since I am not that worried about the time zone of the post, I decided to remove it. I removed timezone information getting set for new posts in my Rake scripts. For the existing posts, <a href="https://github.com/rahulpnath/rahulpnath.com/commit/1d8902fa69a1aad9ad6615ee3c47e3474b6cd263">I removed all the timezone information from the <em>datetime</em> YAML header in the posts</a>. I set the config.yml to built in UTC irrespective of the system timezone that it is getting build.</p>

<h3>Setting up TravisCI</h3>

<p>Setting up automated build on Travis CI is smooth and easy process TDK. I just added a travis.yml with the &lsquo;<em>rake generate</em>. TDK The post build script does the following</p>

<ul>
<li>Clones the current statically generated code from my <em>blog</em> branch.</li>
<li>Perform a rake deploy that updates the cloned code above with the latest site.I updated the existing rake deploy to use GitHub token in push URL. As I did not want the token to be logged on to the Travis console I redirect the output using <em><a href="http://askubuntu.com/questions/12098/what-does-outputting-to-dev-null-accomplish-in-bash-scripts">&amp;> /dev/null</a></em>.</li>
</ul>


<pre><code class="yml">language: ruby
rvm:
  - 1.9.3
branches:
  only:
  - master
script: 
  bundle exec rake generate;
after_success: |
  if [ -n "$GITHUB_PUSH_URL" ]; then
    cd "$TRAVIS_BUILD_DIR"
    git clone -b blog --single-branch https://github.com/rahulpnath/rahulpnath.com.git _azure &amp;&gt; /dev/null
    bundle exec rake gitdeploy["$GITHUB_PUSH_URL"] &amp;&gt; /dev/null
    echo "Deployed!"
  fi
</code></pre>

<p>Every time I make a commit to the GitHub master branch, the automated build triggers and deploys the latest generated site.</p>

<h3>Current Blogging Workflow <a href="https://travis-ci.org/rahulpnath/rahulpnath.com"><img src="https://travis-ci.org/rahulpnath/rahulpnath.com.svg?branch=master" alt="Build Status" /></a></h3>

<p><img class="center" alt="Continuos Delivery of Octopress Blog" src="/images/blog_ci.PNG" /></p>

<ul>
<li>Write posts on my phone or laptop. (<a href="http://www.rahulpnath.com/blog/optimizing-octopress-workflow-for-new-posts/">Using Dropbox to sync posts across devices</a>)</li>
<li>Publish and Push to Github from laptop</li>
<li>Travis builds triggered by Github webhook</li>
<li>Travis pushes back generated site into Github (<em><a href="https://github.com/rahulpnath/rahulpnath.com/tree/blog">blog branch</a></em>).</li>
<li>Azure Web App triggers automated deployment from Github.</li>
</ul>


<p>With the automated deployment, I have one less thing to take care of when writing posts. The whole process might feel a bit complicated, but it is not. It is just that I have been tweaking few things to ease blogging. And since I am a programmer, I like hacking things. If you are new to blogging you do not need them and don&rsquo;t get overwhelmed (if at all you are). All you need to make sure is to <a href="http://www.rahulpnath.com/blog/get-started-with-your-blog/">have a blog</a> and you <a href="http://www.rahulpnath.com/blog/own-your-urls/">own the URL</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Own Your URLs; Nothing Else Really Matters]]></title>
    <link href="http://rahulpnath.com/blog/own-your-urls/"/>
    <updated>2016-06-27T05:07:00+00:00</updated>
    <id>http://rahulpnath.com/blog/own-your-urls</id>
    <content type="html"><![CDATA[<p>Over the past couple of years, I have been successful in motivating a couple of my friends to start a blog and I am happy about that. Every time I discuss starting a blog the most common things that come up are what platform to choose, where to host, where to buy the domain, blogging frequency,will anyone even read my posts, what to blog etc.  These were the same questions that I had when I wanted to start a blog and good reasons to procrastinate on for a long time. Over the years having changed the blog platform a couple of times, changing domain name providers, hosting platform, blogging tools here is what I have learned.</p>

<h3>The Golden Rule of Blogging!</h3>

<p>You should have already guessed that from the   post title - The URL where you blog under - Make sure you own it. Buy one of your choices, from any of the <a href="https://www.google.com.au/search?q=buy+domain">domain providers</a> (more on this later) and blog under that. While it&rsquo;s easy to start blogging under popular services like WordPress.com/Blogspot.com, you actually don&rsquo;t own your domain.</p>

<p><a href="https://i.kinja-img.com/gawker-media/image/upload/pgtqyluoyhr1swo4wrmn.jpg">
<img class="center" alt="Own your URL" src="/images/url.jpg" /></a></p>

<p>I have committed this mistake, of blogging under a URL not owned by me, not <a href="rahulpnath.blogspot.com">once</a> but <a href="https://rahulpnath.wordpress.com">twice</a>,and ended up having to edit the posts to redirect here. (I did not want to pay the providers a monthly fee just for the redirect and didn&rsquo;t have many readers). It&rsquo;s not that these external platforms are bad, but you are just throwing away the flexibility to change platforms (without any extra  charge) when you want to. Owning your URLs allows you to change platforms, hosts, URL formats, redirects anything that you want to and I like to have that flexibility.</p>

<h3>The lesser important things</h3>

<p>Other than the URL that you blog on, other things are not that important and here&rsquo;s why I feel that. If you are completely new to terms like domain, website, hosting etc. check out this article on <a href="http://support.hostgator.com/articles/hosting-guide/what-is-the-difference-between-domains-vs-hosting-vs-website"> the difference between all these</a>.</p>

<h4><strong>Where to buy the domain?</strong></h4>

<p>Choose one and move on with it, even if you do not like it you can change your domain provider anytime. You can <a href="http://www.macworld.com/article/1164499/web-apps/how-to-transfer-your-domain-name-between-hosts.html">transfer from one host to another</a> very easily and I have done that. I started off with GoDaddy for the first year as they seemed the cheapest when I started. But at the time of renewal, I learned that it was just for the first year that it was cheap but for renewals, it was costlier. So I moved on to <a href="https://www.namecheap.com/?aff=101935">Namecheap</a>(<em>affiliate</em>) and am with them ever since. Nothing against GoDaddy though, if it works for you get it from there or somewhere - <strong>Get one right now if you don&rsquo;t own a domain!</strong></p>

<h4><strong>Where to host?</strong></h4>

<p>For a website to be accessible to all, it needs to be running somewhere on the internet and accessible to all, and this is what typically a <a href="https://en.wikipedia.org/wiki/Web_hosting_service">hosting service</a> provides. The hosting and domain provider need not be the same entity, so you can get your hosting space anywhere and link it with your domain. Your domain provider will give you some console/website where you can configure this. There are also free hosts like <a href="https://pages.github.com/">Github</a>, <a href="https://www.tumblr.com/">tumblr</a>, <a href="https://support.google.com/blogger/answer/55374?hl=en">Blogger</a> etc., which allows custom domain mapping for free, unlike <a href="https://en.support.wordpress.com/domains/">wordpress.com</a>. Godaddy, Namecheap, Azure, AWS etc are few popular options for hosting, if not Google to find what matches your need. <a href="http://www.webhostingsecretrevealed.net/blog/web-hosting-guides/switching-web-host/">Switching from one web host to another</a> is even easier than transferring domains, so do not spend much time deciding where to host.</p>

<h4><strong>Which blogging platform to choose?</strong></h4>

<p>There are a large number of blogging platforms available today and it is a very difficult choice to decide on one. If all you are planning to put is a blog with static text, then <a href="https://www.staticgen.com/">static site generators</a> are a good choice and it ends up you hosting just plain <a href="https://github.com/rahulpnath/rahulpnath.com/tree/blog">HTML, Javascript, CSS and images</a>, <a href="http://www.rahulpnath.com/blog/static-generator-is-all-a-blog-needs-moving-to-octopress/">like this one</a> (at time of writing). But this does involve some knowledge of development environments and tools, so ignore it if you are not that person. <a href="https://wordpress.org/">WordPress</a> is easy to start with and is famous for its 5-minute installations. Note that this is not the wordpress.com site which is like a hosting service, but this is the WordPress  platform itself which you can host yourself anywhere you choose to, like <a href="http://www.rahulpnath.com/blog/azure-web-sites-moving-wordpress-to-cloud/">I did for some time in Azure</a>. WordPress is just one that is popular, but there are a lot of <a href="https://www.microsoft.com/web/gallery/categories.aspx?category=Blogs">similar platforms that you can choose from</a>.</p>

<blockquote><p><em>When starting to blog, choose a platform that makes writing easy and not have the overhead of using the platform stop you from writing</em></p></blockquote>

<h4><strong>Who will read my blog?</strong></h4>

<p>This one was the biggest stopper for me - Who cares about what I write? Maybe no one does, but now I write for myself, it makes me happy as I like to share information with others. Blogging helps me understand and explore topics more deeply. Finally, it&rsquo;s a reference that I can always go back to when I face something similar. If you have faced a particular scenario (which might be totally weird) then it is very likely that it is going to be experienced by somebody else too. And Google makes finding things easy, and it will be found!</p>

<h4><strong>Frequency and commitment</strong></h4>

<p>I have been irregular with my blogging schedules (<a href="http://www.rahulpnath.com/blog/archives/">until lately</a>) and used to blog just when motivation strikes. But since the start of this year, I am trying to blog on a schedule. Just experimenting with it and seeing how it goes, so far I am really liking it.It has given a different outlook to work and life in general, as it makes me look more closely for opportunities to generate a blog post. But it&rsquo;s fine even without a commitment and blog irregularly unless you have some expectations of your reader base or generate revenue from the blog. But have a place to go and scribble down whenever you feel to and own that place!</p>

<p><figure><br/>
    <img alt="Blog frequency as on 26-06-2-16 http://www.rahulpnath.com" src="/images/blog_frequency.png" />
    <figcaption><em>Blog frequency as on June,2016 <a href="http://www.rahulpnath.com">http://www.rahulpnath.com</a></em></figcaption>
</figure></p>

<p>It&rsquo;s a good idea to have a schedule to blog , so that you don&rsquo;t just end up writing one post and forget about your blog forever. <a href="https://blog.codinghorror.com/how-to-achieve-ultimate-blog-success-in-one-easy-step/">Pick a schedule that works for you</a> and try to stick with it.</p>

<h4><strong>No Original Content</strong></h4>

<p>It&rsquo;s fine to blog about things that you have not created yourself, the way you learned things or anything you feel to write about, necessarily not even current at the time of writing. For eg., You might be working on Mainframes system and MainFrame is not current and cutting edge now. But that does not mean you should not be blogging about it. Just like you, there are a lot of mainframe developers and it might just help one of them. So don&rsquo;t bother much about the originality of content, it&rsquo;s your experiences and the way you see it- that&rsquo;s always going to be unique.</p>

<blockquote><p><em>&ldquo;A blog is neither a diary nor a journal. Many people think of blogging in relation to those two things, confessional or practical. It is neither but includes elements of both.&rdquo; - Lemn Sissay</em></p></blockquote>

<p><a href="http://www.rahulpnath.com/blog/get-started-with-your-blog/">Every &lsquo;professional&rsquo; should have a blog</a>, and if you don&rsquo;t yet, now is a good time to start one. Sound off in the comments on what you feel about blogging in general, especially if you bought a domain and set up your blog after reading this. It will prove a point for this post!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optimizing Octopress Workflow for New Posts]]></title>
    <link href="http://rahulpnath.com/blog/optimizing-octopress-workflow-for-new-posts/"/>
    <updated>2016-01-20T22:51:03+00:00</updated>
    <id>http://rahulpnath.com/blog/optimizing-octopress-workflow-for-new-posts</id>
    <content type="html"><![CDATA[<p>Over the past month I had thought of migrating this blog to Hugo, a static site generator that is faster than the current one, Octopress. Lack of workflow for creating new posts and slower build times were the main reasons. I am the kind of person when writing post want to see often, how it looks like on the real site. With the current number of posts it takes around 40-50 seconds to build the entire site and it makes me to wander off to something else while the build is happening - at times it takes a long time to get back to writing!. But migrating to a new platform has a lot of challenges and time-consuming and I did not want to invest my time in that, so though of looking out for ways to optimize the current process. A bit of googling and playing around with Ruby, solved both of the major issues and I have an improved workflow!</p>

<h4><strong>Draft workflow</strong></h4>

<p>I was lucky to find this <a href="http://neverstopbuilding.com/how-to-enhance-your-octopress-draft-and-heroku-deploy-process">post</a> which handled most of the draft workflow process. Most of the code below is used from there with a very few minor additions. Newer versions of Jekyll support <a href="http://jekyllrb.com/docs/drafts/">working with drafts</a> and uses the &lsquo;<em>&ndash;drafts</em>&rsquo; switch to build the drafts (instead of using published flag as in thr above linked post), that are in &lsquo;<em>_drafts</em>&rsquo; folder. Drafts are posts which does not have date&rsquo;s, so I added in a placeholder text, &lsquo;<em>thisIsStillADraft</em>&rsquo;, in the yaml front matter of the post which will later be replaced with the post publish date. Also added in the code to open the default writer with the newly created post</p>

<pre><code class="ruby Rake new_draft"># usage rake new_draft[my-new-draft] or rake new_draft['my new draft']
desc "Begin a new draft in #{source_dir}/#{drafts_dir}"
task :new_draft, :title do |t, args|
  if args.title
    title = args.title
  else
    title = get_stdin("Enter a title for your post: ")
  end
  raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
  mkdir_p "#{source_dir}/#{drafts_dir}"
  filename = "#{source_dir}/#{drafts_dir}/#{title.to_url}.#{new_post_ext}"
  if File.exist?(filename)
    abort("rake aborted!") if ask("#{filename} already exists. Do you want to overwrite?", ['y', 'n']) == 'n'
  end
  puts "Creating new draft: #{filename}"
  open(filename, 'w') do |post|
    post.puts "---"
    post.puts "layout: post"
    post.puts "title: \"#{title.gsub(/&amp;/,'&amp;amp;')}\""
    post.puts "comments: true"
    post.puts "categories: "
    post.puts "tags: "
    post.puts "thisIsStillADraft:"
    post.puts "keywords: "
    post.puts "description: "
    post.puts "---"
  end
  system %{cmd /c "start #{filename}"}
end
</code></pre>

<p>The publish draft task just asks for the post to publish and replaces the placeholder text with the current date time. Also it moves the post from the &lsquo;<em>_drafts</em>&rsquo; folder to the &lsquo;<em>_posts</em>&rsquo; folder with the file name appended with the date time. Since I run this just before deploying a post, the date on the post will be the actual publish date, and not the date I started writing the post (usually writing a  post spans over multiple days).</p>

<pre><code class="ruby Rake publish_draft"># usage rake publish_draft
desc "Select a draft to publish from #{source_dir}/#{drafts_dir} on the current date."
task :publish_draft do
  drafts_path = "#{source_dir}/#{drafts_dir}"
  drafts = Dir.glob("#{drafts_path}/*.#{new_post_ext}")
  drafts.each_with_index do |draft, index|
    begin
      content = File.read(draft)
      if content =~ /\A(---\s*\n.*?\n?)^(---\s*$\n?)/m
        data = YAML.load($1)
      end
    rescue =&gt; e
      puts "Error reading file #{draft}: #{e.message}"
    rescue SyntaxError =&gt; e
      puts "YAML Exception reading #{draft}: #{e.message}"
    end
    puts "  [#{index}]  #{data['title']}"
  end
  puts "Publish which draft? "
  answer = STDIN.gets.chomp
  if /\d+/.match(answer) and not drafts[answer.to_i].nil?
    mkdir_p "#{source_dir}/#{posts_dir}"
    source = drafts[answer.to_i]
    filename = source.gsub(/#{drafts_path}\//, '')
    dest = "#{source_dir}/#{posts_dir}/#{Time.now.strftime('%Y-%m-%d')}-#{filename}"
    puts "Publishing post to: #{dest}"
    File.open(source) { |source_file|
      contents = source_file.read
      contents.gsub!(/^thisIsStillADraft:$/, "date: #{Time.now.strftime('%Y-%m-%d %H:%M')}")
      File.open(dest, "w+") { |f| f.write(contents) }
    }
    FileUtils.rm(source)
  else
    puts "Index not found!"
  end
end
</code></pre>

<p>With these two new rake tasks, I can now create as many draft posts at a time and publish them once ready.</p>

<h4><strong>Improving the build time</strong></h4>

<p>Jekyll build command options provides a switch, &lsquo;<em>configuration</em>&rsquo;, that allows to pass a configuration file instead of using &lsquo;<em>_config.yml</em>&rsquo;. In the configuration file we can specify a &lsquo;exclude&rsquo; option to exclude the directories and/or files from the build. I created a new task for building only the current drafts, by specifying the &lsquo;<em>&ndash;drafts</em>&rsquo; switch and a dynamically generated configuration file, <em>_previewconfig.yml</em>, which excludes the &lsquo;<em>_posts</em>&rsquo; folder. This dramatically increases the build time, and completes almost immediately after a making a change to a post. This fits perfectly into my workflow, as while writing new posts I do not want to see any already published posts. You can  add the dynamically generated configuration file name to the <em>.gitignore</em> as I do not delete it in the tasks. I did not want to use the &lsquo;<em>rake isolate</em>&rsquo; task that is already present in the  rakefile, as that does not integrate with the draft workflow and unnecessarily moves all the posts to a temporary place.</p>

<pre><code class="ruby">desc "preview the site in a web browser with all the draft posts"
task :previewdrafts do
  raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
  puts "Starting to watch source with Jekyll and Compass. Starting Rack on port #{server_port}"
  system "compass compile --css-dir #{source_dir}/stylesheets" unless File.exist?("#{source_dir}/stylesheets/screen.css")
  File.open("_config.yml") { |source_file|
      contents = source_file.read
      File.open("_previewconfig.yml", "w+") { |f|
      f.write(contents)
      f.puts("exclude: [\"#{posts_dir}\"]") 
      }
    }

  jekyllPid = Process.spawn({"OCTOPRESS_ENV"=&gt;"preview"}, "jekyll build --watch --drafts --config _previewconfig.yml")
  compassPid = Process.spawn("compass watch")
  rackupPid = Process.spawn("rackup --port #{server_port}")

  trap("INT") {
    [jekyllPid, compassPid, rackupPid].each { |pid| Process.kill(9, pid) rescue Errno::ESRCH }
    exit 0
  }

  [jekyllPid, compassPid, rackupPid].each { |pid| Process.wait(pid) }
end
</code></pre>

<h4><strong>Dropbox integration</strong></h4>

<p>At times, I have started to draft blog posts while commuting to work from my mobile device, so I wanted to sync my draft posts to <a href="https://db.tt/bvYw3pL6">Dropbox</a>, so that I can edit it from my <a href="http://www.rahulpnath.com/blog/review-two-months-and-counting-android-and-nexus-5/">mobile phone</a>. Apps like <a href="https://play.google.com/store/apps/details?id=net.keepzero.markdrop&amp;hl=en">MarkDrop</a>/<a href="https://play.google.com/store/apps/details?id=net.keepzero.markdrop&amp;hl=en">JotterPad</a> integrates with Dropbox and supports Markdown editing. I set up a drafts folder on my Dropbox folder on laptop, which is automatically synced using the <a href="https://www.dropbox.com/install">Dropbox application</a>. I then used <a href="https://technet.microsoft.com/en-us/library/cc753194.aspx">Mklink</a> to create a symbolic link from the folder on Dropbox to my drafts folder in my blog repository. Whenever a new draft post is added, it gets automatically inserted into the Dropbox folder, which will then be synced to cloud and available for edit on my mobile phone too. (Part of this post is written from my mobile!)</p>

<pre><code class="text">mklink /D "C:\blog\_drafts" "C:\dropbox\_drafts"
</code></pre>

<h4><strong>Cmder integration</strong></h4>

<p><a href="http://cmder.net/">Cmder</a> is a portable console emulator for Windows and provides a good nice looking feature rich console experience on Windows and is one of my <a href="http://www.rahulpnath.com/blog/tools-that-I-use/">favourite tools</a>. Creating alias for commands is one of the features, that allows to create a short key combination for an otherwise long command. You can use this to create commands for the task in Octopress like below</p>

<pre><code class="text">alias rp=rake previewdrafts

// Below are the list of alias that I have for the rake tasks
rp=rake previewdrafts
rps=rake preview // Preview the whole site
rd=rake deploy
rnd=rake new_draft["$"] // Takes in the post name as parameter
rpd=rake publish_draft
rd=rake deploy
</code></pre>

<p><strong>So my new workflow is</strong></p>

<p>rnd Optimizing Octopress Workflow for New Posts <br/>
rp <br/>
rpd <br/>
rps <br/>
rd</p>

<p>It&rsquo;s much faster, cleaner and easier publishing new posts. To see the latest code for the rake tasks head over to the original file on <a href="https://github.com/rahulpnath/rahulpnath.com/blob/master/Rakefile">github</a>.</p>
]]></content>
  </entry>
  
</feed>
