<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: wp7 | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/category/wp7/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2017-02-10T17:22:42+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Windows Phone Series – Jump Lists]]></title>
    <link href="http://rahulpnath.com/blog/windows-phone-series-jump-lists/"/>
    <updated>2013-08-25T04:23:00+00:00</updated>
    <id>http://rahulpnath.com/blog/windows-phone-series-jump-lists</id>
    <content type="html"><![CDATA[<p>One of the best things about the windows phone is that way you can navigate large lists of data.  Jumplist provides an easy and fast way to navigate large data, just like we do in the contacts hub or the apps collection. It would be great to have this behaviour even in the apps that we develop so that we can give a consistent experience to our application users.
Jumplist can be implemented using LongListSelector, which is part of the <a href="http://phone.codeplex.com/">Windows Phone toolkit</a> for Windows phone 7. With Windows Phone 8 this is included along with the sdk. Implementing jump list with the longlistselector is easy enough, that you can get this into your application in a few minutes. Lets see how.
If you are already using a listbox then you should be changing it to a longlistselector or if you are already using that, then you might be using it in the “ungrouped mode”, by setting IsFlatList=”True”. Change this to False.</p>

<pre><code class="xml">&lt;toolkit:LongListSelector Name="allPersons" IsFlatList="False" &gt;
&lt;/toolkit:LongListSelector&gt;
</code></pre>

<p>We need to specify a few templates for the date to be rendered to our needs as shown below. In this example we would be looking at a contacts sample.</p>

<p><img src="/wp_jumplist_items.png" alt="windows_phone_jumplist_items" /><img src="/wp_jumplist_groups.png" alt="windows_phone_jumplist_groups" /></p>

<p><strong>ItemTemplate</strong></p>

<p>The itemtemplate specifies how the bound list of items should be displayed. This would be the same as that you have been using earlier for your listbox.</p>

<pre><code class="xml">&lt;toolkit:LongListSelector.ItemTemplate&gt;
    &lt;DataTemplate&gt;
        &lt;TextBlock Text="{Binding Name}" FontSize="30" /&gt;
    &lt;/DataTemplate&gt;
&lt;/toolkit:LongListSelector.ItemTemplate&gt;
</code></pre>

<p><strong>GroupHeaderTemplate</strong></p>

<p>The groupheadertemplate specifies the template for each header of the group.</p>

<pre><code class="xml"> &lt;toolkit:LongListSelector.GroupHeaderTemplate&gt;
    &lt;DataTemplate&gt;
       &lt;Border Background="Red" HorizontalAlignment="Left" Width="50" Height="50"&gt;
         &lt;TextBlock Text="{Binding Title}" FontSize="30" HorizontalAlignment="Center"/&gt;
       &lt;/Border&gt;
    &lt;/DataTemplate&gt;
&lt;/toolkit:LongListSelector.GroupHeaderTemplate&gt;
</code></pre>

<p><strong>GroupItemTemplate</strong></p>

<p>The groupitemtemplate specifies the template for the headers, when in group view mode. This is the display that would be presented when we are to choose a group to navigate to.</p>

<pre><code class="xml"> &lt;toolkit:LongListSelector.GroupItemTemplate&gt;
    &lt;DataTemplate&gt;
        &lt;Button IsEnabled="{Binding HasData}" BorderThickness="0" Background="Transparent"&gt;
            &lt;Border Background="Red" BorderThickness="0" Width="60" Height="60"&gt;
                &lt;TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="38" Margin="4" Text="{Binding Title}" /&gt;
            &lt;/Border&gt;
        &lt;/Button&gt;
    &lt;/DataTemplate&gt;
&lt;/toolkit:LongListSelector.GroupItemTemplate&gt;
</code></pre>

<p><strong>GroupItemsPanel</strong></p>

<p>The groupitemspanel specifies the panel to be used to display the groupitems. If we are using only alphabets as the group headers, then we would want to wrap each of these items. If our group items are long enough then it would be better to leave it as default which would be a stackpanel.</p>

<pre><code class="xml"> &lt;toolkit:LongListSelector.GroupItemsPanel&gt;
    &lt;ItemsPanelTemplate&gt;
        &lt;toolkit:WrapPanel Margin="5" Background="Black" /&gt;
    &lt;/ItemsPanelTemplate&gt;
&lt;/toolkit:LongListSelector.GroupItemsPanel&gt;
</code></pre>

<p>We need to group the data that gets bound to the list. For a normal listbox you would either bind a List or an ObservableCollection. In this we would need to group the data that gets bound to the control as groups that we want to display. In this example our data is a list of Persons, and we would want to group the data with their starting character. If the starting character is an alphabet, then we would display that person under that character. For any non-alphabet we would group it under ‘#’. The GroupedPersons in our DataRepository would return the data for us.</p>

<pre><code class="csharp"> public static IEnumerable&lt;Group&lt;Person&gt;&gt; GroupedPersons
{
    get
    {
        List&lt;Group&lt;Person&gt;&gt; groupedArticles = new List&lt;Group&lt;Person&gt;&gt;();
        char[] az = Enumerable.Range('a', 26).Select(a =&gt; (char)a).ToArray();

        foreach (char letter in az)
        {
            Group&lt;Person&gt; groupedLetter = new Group&lt;Person&gt;()
            {
                Title = letter.ToString(),
                Items = Persons.Where(a =&gt; a.Name.StartsWith(letter.ToString(), StringComparison.CurrentCultureIgnoreCase)).Where(a =&gt; a != null).ToList()
            };
            groupedLetter.HasData = groupedLetter.Items.Any();
            groupedArticles.Add(groupedLetter);
        }

        // Articles that start with a number should be added to # tag
        var list = groupedArticles.SelectMany(a =&gt; a.Items).ToList();
        var nonAlphabetIssues = Persons.Except(list);
        groupedArticles.Insert(
            0,
            new Group&lt;Person&gt;()
            {
                Items = nonAlphabetIssues.ToList(),
                Title = "#",
                HasData = nonAlphabetIssues.Any()
            });

        return groupedArticles;
    }
}
</code></pre>

<p>To get all the characters from A-Z we use the below code, after which it is some simple logics, that would is self explanatory</p>

<pre><code class="csharp"> char[] az = Enumerable.Range('a', 26).Select(a =&gt; (char)a).ToArray();
</code></pre>

<p>This should now have made your flat list into a easily navigable jump list, that your users would love to use and make it easier for them to use you application.</p>

<p>You can find the code for this sample <a href="https://github.com/rahulpnath/JumpList">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Phone Series – MVVM and ApplicationBar]]></title>
    <link href="http://rahulpnath.com/blog/windows-phone-series-mvvm-and-applicationbar/"/>
    <updated>2013-04-17T11:04:01+00:00</updated>
    <id>http://rahulpnath.com/blog/windows-phone-series-mvvm-and-applicationbar</id>
    <content type="html"><![CDATA[<p>ApplicationBar on a windows phone, is to provide users of your app with quick access to the most commonly used tasks. For a mail app this would be refresh/new mail, for a photo app it might be like/unlike button, settings etc are common buttons that appear in an ApplicationBar . But then not always do we have them as static, and we would want to add/remove icons/menu items to that based on the applications current state.For example, you would want to add the like/unlike button only if the user is logged in, or even the settings icon would be only for logged in users. Whatever might be your scenario, if you are looking for to add/remove icons from the application bar from your code then this article is for you.</p>

<p>In a normal app which uses code-behind, this can be easily done by accessing the ‘ApplicationBar’ in the code-behind class like below</p>

<pre><code class="csharp     ">ApplicationBar.Buttons.Add(&lt;your button&gt;);
</code></pre>

<p>When you are using MVVM you would want to do this from your ViewModel(VM). Below are the approaches that you could use to achieve the same</p>

<p><strong>1. Mesenger Service</strong></p>

<p>Whenever we need to communicate between VM’s or between your view model and View then we would want to do that in the most decoupled manner. When using <a href="http://www.galasoft.ch/mvvm/">MVVMLight</a>, we could use the Messenger class to achieve this. We would send a message indicating that we want to add a new appbar button from the ViewModel, and the View code behind, which already has registered for such an event would get notified and add the icon for us .</p>

<p>Below is how the Code-behind would look like . We register for a NotificationMessage(you could also use your own notification class for this), and see what kind of button needs to be added and adds that to the ApplicationBar. On click of the appbar button, we wire up the click event to a command of the ViewModel. Though there is some code behind in here, we are not going away from MVVM here, as we still have clear separation of concerns and also testability is not affected.</p>

<pre><code class="csharp    ">    public partial class MainPage : PhoneApplicationPage
    {
        public MainViewModel viewModel
        {
            get
            {
                return this.DataContext as MainViewModel;
            }
        }

        private ApplicationBarIconButton settingsButton;
        // Constructor
        public MainPage()
        {
            InitializeComponent();
            settingsButton = new ApplicationBarIconButton()
            {
                Text = "Settings",
                IconUri = new Uri("Images/appbar.feature.settings.rest.png", UriKind.Relative)
            };
            settingsButton.Click += settingsButton_Click;
            // Register for the messenger 
            Messenger.Default.Register&lt;NotificationMessage&gt;(this, OnNotificationMessage);
        }

        void settingsButton_Click(object sender, EventArgs e)
        {
            viewModel.SettingsCommand.Execute(null);
        }

        private void OnNotificationMessage(NotificationMessage message)
        {
            // Check here for the notification
            // You can also build cutoms notification message here for this by inheriting from MessageBase
            if (message.Notification == "AddSettings")
            {
                if (ApplicationBar == null)
                {
                    ApplicationBar = new ApplicationBar();
                }
                ApplicationBar.Buttons.Add(settingsButton);
            }
        }
    }
</code></pre>

<hr />

<p><strong>2. ApplicationBar Service</strong></p>

<p>Like we use <a href="http://www.geekchamp.com/articles/mvvm-in-real-life-windows-phone-applications-part2">NavigationService</a>, for navigating from VM’s we could also create a ApplicationBarService, that can be used to add application bar icons from ViewModels. For this I have created a base class, MyModelBase, for all my VM’s which inturn inherits from ViewModelBase of MVVMLight. This base class holds an interface for the ApplicationBarService.</p>

<pre><code class="csharp    ">    public class MyModelBase: ViewModelBase
    {
        public IApplicationBarService ApplicationBar { get; set; }

        public MyModelBase()
        {

        }
        public MyModelBase(IApplicationBarService appBar)
        {
            ApplicationBar = appBar;
        }
    }
</code></pre>

<p>The interface IApplicationBarService, would have the functions that we would want to Add/Remove icons from the application bar. For now I have just put in the AddButton. You could also add RemoveButton and any other things that you would want in there.</p>

<pre><code class="csharp    ">    public interface IApplicationBarService
    {
        IApplicationBar ApplicationBar { get;} 

        void AddButton(string title, Uri imageUrl, Action OnClick);
    }
</code></pre>

<p>Implementation for this interface is as below</p>

<pre><code class="csharp    ">    public class ApplicationBarService: IApplicationBarService
    {
        public void AddButton(string title, Uri imageUrl, Action OnClick)
        {
            ApplicationBarIconButton newButton = new ApplicationBarIconButton()
                {
                    Text = title, 
                    IconUri = imageUrl, 
                };
            newButton.Click += ((sender,e) =&gt; {OnClick.Invoke();}) ;

            ApplicationBar.Buttons.Add(newButton);

        }

        public IApplicationBar ApplicationBar
        {
            get
            {
                var currentPage = ((App)Application.Current).RootFrame.Content as PhoneApplicationPage;
                if (currentPage.ApplicationBar == null)
                {
                    currentPage.ApplicationBar = new ApplicationBar();
                }
                return currentPage.ApplicationBar;
            }
        }
    }
</code></pre>

<p>The ApplicationBar property reads gets the current ApplicationBar from the current page. If it is not defined then it would simply create a new one. The Add function just adds a new button and wires up the click event of the button, to the function that is passed in by the VM. We could also use Commands here, for now I just wanted to keep it simple</p>

<p>In cases where you don’t want to add buttons dynamically, but just have static buttons you could also use BindableApplicationBar implementations that are there. One such implementation is there along with the <a href="http://phone7.codeplex.com/">Phone7.Fx</a> library. There are also many other implementations for the same.</p>

<p>Hope this helps you to decouple your application bar icons from the ViewModel.You can find a <a href="https://github.com/rahulpnath/Blog/tree/master/PhoneAppBarMvvm">sample</a> implementation for this. In the sample both these approaches are shown for adding icons. You could figure out the Remove pretty easily.</p>

<p><img src="/wp_applicationbar_icon_mvvm.png" alt="windows phone applicationbar mvvm" /></p>

<p>Hope it helps!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Phone Series – Preloading Content]]></title>
    <link href="http://rahulpnath.com/blog/windows-phone-series-preloading-content/"/>
    <updated>2013-04-12T07:40:46+00:00</updated>
    <id>http://rahulpnath.com/blog/windows-phone-series-preloading-content</id>
    <content type="html"><![CDATA[<p>Mostly phone apps, connect to a service for the data and wrap them up to a cool UI for user consumption. But at times we would have apps that comes with a lot of preloaded content, with offline capability using <a href="http://visualstudiogallery.msdn.microsoft.com/cd120b42-30f4-446e-8287-45387a4f40b7">sqlite</a>.  Offline scenarios might either start of with preloaded content or get content on the apps first launch. This article is more for the scenario where we have preloaded content bundled with the app, and then on launch of the app, it would also get new content and updates to existing content. Complete knowledge of the pre-loaded content at the time of development would be rare. All you would know would be the metadata schema and how/where to look for the preloaded content.</p>

<p>We would not be creating a fully functional sample here, but would be touching on important aspects and the approaches that can be used to tackle similar scenarios and some code snippets</p>

<p>This <a href="http://blogs.windows.com/windows_phone/b/wpdev/archive/2013/03/12/using-the-sqlite-database-engine-with-windows-phone-8-apps.aspx">article</a> here would help you out on setting up sqlite for windows phone apps. Mostly we would be storing metadata of files/media that gets preloaded in the sqlite and keep the original files/media(preloaded content) packaged along with the xap, ideally by setting the <a href="http://msdn.microsoft.com/en-in/library/windowsphone/develop/ff967560(v=vs.105).aspx#BKMK_Media">Build Action to Content</a>.  Now in cases where we are expecting to update the existing content and also get new content we would have to copy out the entire media/files into the IsolatedStorage, so that we can do any further updates or additions.</p>

<p>Assuming that we have a folder “MyPreloadedContent” as indicated in the image below, which would be where all our preloaded content is going to be . Most of the time with preloaded content, we would not know what exact data would be in there. It might contain files, images, folders etc. We would want an easy way to set Build Action to Content for all the files/folders that gets placed under the folder( even if it is done outside of Visual Studio).</p>

<p><img src="/preloaded_content_Visual_studio.png" alt="preloaded content Visual studio" /></p>

<p>For this we would need to tweek the project file, to tell it that whatever is under MyPreloadedContent should be treated as ‘Content’. Edit the csproj file from notepad or any other text editor that you use(<a href="http://notepad-plus-plus.org/">Notepad++</a> is my personal favorite). Scroll down to wherever the other Content files are specified, like “<Content Include="ApplicationIcon.png">” for example. Add in the below line to make all the content put into that folder to be treated as Content, and save the csproj file.</p>

<pre><code>&lt;strong&gt;&lt;span style="font-size:large;"&gt;&lt;Content Include="MyPreloadedContent**" /&gt;&lt;/span&gt;&lt;/strong&gt;
</code></pre>

<p>Now you could open that folder and put in some content into that. For now I put in some image files and also a sub folder  as below</p>

<p><img src="/preloaded_content_explorer.png" alt="preloaded content explorer" /></p>

<p>You would need to reload the projects/solution in visual studio to see that those files are automatically included into the solution. If not in a Visual studio,  msbuild would automatically include all the files as Content.</p>

<p><img src="/preloaded_content_vs_refresh.png" alt="preloaded content visual studio refresh" /></p>

<p>Now that we have all the files copied into that folder to be automatically included into the solution you need to now need to copy out all these files onto the IsolatedStorage when the app starts for the first time. You would want to do this, so that if there are any updates onto the files that you copied(which would be delivered to you via a web service in a real scenario), you can overwrite the files in the IsolatedStorage so that the new content would be taken then on.</p>

<p>Now comes the next challenge of getting all the files that are under MyPreloadedContent folder, so that you can copy them over to IsolatedStorage. Since this files would be copied at a later point of time, say at the time of packaging, we would not be able to know all the file names and directory structure prior.</p>

<p>We can use <a href="http://msdn.microsoft.com/en-us/library/vstudio/bb126445.aspx">T4 ( Text Templating Transformation Toolkit) templates</a> to help us out here. Using T4 templates we can generate a class file that will have a property returning us all the file names in the MyPreloadedContent directory.</p>

<p>To create a T4 template, add a new item to the project <strong>MyFiles.tt. </strong>Select Ok if you get any warning message</p>

<p><img src="/preloaded_content_t4_template.jpg" alt="preloaded content t4 template" /></p>

<p>In a T4 template it would be a mix of text and code, that would be used to generate a new file that would be a class in our case which would expose a function to get all the file names under the folder . Below is the entire text/code that would go into the new file that we just created(<strong>MyFiles.tt</strong>)</p>

<pre><code class="csharp    ">    &lt;#@ template debug="false" hostspecific="true" language="C#" #&gt;
    &lt;#@ output extension=".gen.cs" #&gt;
    &lt;#@ import namespace="System.IO"#&gt;
    // &lt;auto-generated /&gt;

    namespace PreloadedContent
    {
        public class MyFiles
        {
            private static string[] MyPreloadedContentFiles()
            {
                return new[] {
    &lt;#
                DirectoryInfo directoryInfo = new DirectoryInfo(
                   Path.Combine(Path.GetDirectoryName(Host.TemplateFile),"MyPreloadedContent"));
            foreach(FileInfo file in directoryInfo.GetFiles("*.*", SearchOption.AllDirectories))
                {
                    if (!file.FullName.Contains(@"."))
                    {#&gt;
                          "&lt;#= file.FullName.Substring(
                          file.FullName.IndexOf("MyPreloadedContent")).Replace(@"", "/") #&gt;",
    &lt;#              }
                }
    #&gt;
                            };
            }
        }
    }
</code></pre>

<p>It just says to read the directory MyPreloadedContent and iterate to get all the files in that and writes it out by trimming of the absolute path and putting in only the relative path. Save the MyFiles.tt, and in Visual Studio right click on it and say “Run Custom Tool”. This would generate the cs file with an extension “.gen.cs” as we have mentioned in “<strong>&lt;#@ output extension=&ldquo;.gen.cs&rdquo; #>”.  </strong>The generated class would look like below</p>

<pre><code class="csharp">    namespace PreloadedContent
    {
        public class MyFiles
        {
            private static string[] MyPreloadedContentFiles()
            {
                return new[] {
                               "MyPreloadedContent/picfinity login.png",
                               "MyPreloadedContent/Search.png",
                               "MyPreloadedContent/Share.png",
                               "MyPreloadedContent/upload.png",
                               "MyPreloadedContent/Profile/profile info.png",
                               "MyPreloadedContent/Profile/Profile.png",
                            };
            }
        }
    }
</code></pre>

<p>The above class has all the file paths to the content and you could iterate that to copy out the files into the IsolatedStorage.</p>

<p>There are a couple of ways, by which you can ensure that the template file is run before the actual code gets compiled. This is to make sure that this generated class is going to be updated with the latest files that would be copied into the folder at build time i.e your templates are transformed at build time. This <a href="http://msdn.microsoft.com/en-us/library/ee847423.aspx">article</a> details out the methods to get that integrated into the build. On a build server where you dont have Visual Studio installed you would need to copy out these files mentioned <a href="http://msdn.microsoft.com/en-us/library/ee847423.aspx#buildserver">here</a> explicitly</p>

<p>With that integrated you are all set to go to build your app with preloaded content. You would not need to know anything about the file names/ structure of the content and it would just work as long as the metadata that drives it correct.</p>

<p>Hope it helps!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MVVM – Does it really matter?]]></title>
    <link href="http://rahulpnath.com/blog/mvvm-does-it-really-matter/"/>
    <updated>2013-04-08T05:12:07+00:00</updated>
    <id>http://rahulpnath.com/blog/mvvm-does-it-really-matter</id>
    <content type="html"><![CDATA[<p>MVVM (Model-View-ViewModel), is a popular architectural pattern since WPF/Silverlight. Separation of concerns(UI/code), testability etc are some of the key things that motivates one to go via the MVVM route. There are innumerous articles out there, just like this <a href="http://msdn.microsoft.com/en-in/library/hh848246.aspx">one</a>, that gets into the details of how and why one should use MVVM.</p>

<p>With Windows phone also embracing xaml and silverlight, any one who knew silverlight turned a phone developer overnight. MVVM did find its way into this space too. But most of the phone app developers, unlike those who developed for enterprise. would have never cared for MVVM , as they rarely would have written test cases for their apps, nor were they actually concerned on the UI/code separation. Since most of the apps were just out of a hobby, the only idea was just to have it up and available in the store as fast as possible. I might not be fully correct here, but I do know at least a dozen people,including me, who did this, so am good enough to put out that statement</p>

<p>With windows 8 too taking the store way and having the same development platform of silverlight/xaml, don’t be surprised MVVM  showed up there too. Now anyone who had an app on the phone, had to do a lot of copy pasting over the code to have the same application available in both the stores. This gives MVVM a totally new dimension for motivation that was not spoken  about earlier – <strong><em>Reusability. </em></strong></p>

<p>Having an application for phone and windows 8 app store with the minimum amount of rework is best possible by using MVVM and also a couple of other techniques. There is a detailed <a href="http://msdn.microsoft.com/en-us/library/windowsphone/develop/jj681693(v=vs.105">article</a>.aspx) on msdn on how how to maximize code reuse between Windows Phone 8 and Windows 8.</p>

<p>MVVM does really matter now, if we do not want to end up copy pasting code from phone app to the windows 8 store app. Also fixing and adding in new features would become more easier with following MVVM</p>

<p><a href="http://nuget.org/packages/Portable.MvvmLightLibs/">MVVM Toolkit</a> is a very popular helper library for implementing MVVM pattern, as is available on nuget as a PCL(Portable class library)</p>

<p><strong>MVVM<em>, It really does matter !!!</em></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Phone Series – Incremental Loading]]></title>
    <link href="http://rahulpnath.com/blog/windows-phone-series-incremental-loading/"/>
    <updated>2013-03-03T08:53:45+00:00</updated>
    <id>http://rahulpnath.com/blog/windows-phone-series-incremental-loading</id>
    <content type="html"><![CDATA[<p>Some time back we had a look on doing <a href="http://rahulpnath.wordpress.com/2012/10/28/windows-8-series-incremental-loading/">Incremental Loading with a Windows 8 store app</a>. This same scenario is something that one would come across quite frequently while developing a Windows Phone application too. We have a couple of options in dealing with this while on a Windows phone application. In an ideal case while binding to a large data on a windows phone application, we might be using a <a href="http://msdn.microsoft.com/en-US/library/windowsphone/develop/microsoft.phone.controls.longlistselector(v=vs.105">LongListSelector</a>.aspx) or a Listbox control.</p>

<p>While using a LongListSelector, we can use the Link event(if you are using <a href="http://phone.codeplex.com/">Windows Phone 7.1 toolkit</a>) Or the <a href="http://msdn.microsoft.com/en-US/library/windowsphone/develop/microsoft.phone.controls.longlistselector.itemrealized(v=vs.105">ItemRealized</a>.aspx) event(if you are on Windows phone 8.0). Basically we would be doing the same thing in either of these cases, checking the current item that is getting realized and see what is the index of the item in the whole list of data that you have currently and check if its time for you to fetch the next set of data from your data source(possibly a web service). As usual for the sample we will be using the <a href="http://500px.com/popular">500px</a> api.</p>

<p>Below is the piece of code that will fetch us the photo from the <a href="http://developers.500px.com/">500px api</a> to populate the listbox data.</p>

<pre><code class="csharp">private static int requestPerPage = 20;
private int currentPage = 1;
private bool isCurrentlyLoading = false;

private ObservableCollection&lt;Photo&gt; Photos = new ObservableCollection&lt;Photo&gt;();

private string datasourceUrl="https://api.500px.com/v1/photos?feature=popular&amp;consumer_key=" 
          + consumerKey + "&amp;rpp=" + requestPerPage.ToString() + "&amp;page={0}";

private void LoadDataFromSource()
{
    isCurrentlyLoading = true;
    var query = string.Format(datasourceUrl, currentPage);
    WebClient client = new WebClient();
    client.DownloadStringCompleted += client_DownloadStringCompleted;
    client.DownloadStringAsync(new Uri(query));

}

void client_DownloadStringCompleted(object sender, DownloadStringCompletedEventArgs e)
{
    using (var reader = new MemoryStream(Encoding.Unicode.GetBytes(e.Result)))
    {
        var ser = new DataContractJsonSerializer(typeof(RootObject));
        RootObject obj = (RootObject)ser.ReadObject(reader);
        currentPage = obj.current_page + 1;
        if (obj != null)
        {
            this.Dispatcher.BeginInvoke(() =&gt;
                {
                    foreach (var photo in obj.photos)
                    {
                        Photos.Add(photo);
                    }
                    isCurrentlyLoading = false;
                });
        }
    }
}
</code></pre>

<p>In the ItemRealized/Link event based on whether you are developing for Windows Phone 7 or 8, below would be the code that goes into that. We need to check the current item that is realized i.e rendered on the UI and see if it is</p>

<pre><code class="csharp">private void photosList_ItemRealized_1(object sender, ItemRealizationEventArgs e)
{
    Photo photo = e.Container.Content as Photo;
    if (photo != null)
    {
        int offset = 2;
        // Only if there is no data that is currently getting loaded
        // would be initiate the loading again
        if (!isCurrentlyLoading &amp;&amp; Photos.Count - Photos.IndexOf(photo) &lt;= offset)
        {
            LoadDataFromSource();
        }
    }
}
</code></pre>

<p>In case you want to use a normal listbox, you can do that also. We would need to hook up with VisualStateGroups. This <a href="http://blogs.msdn.com/b/slmperf/archive/2011/06/30/windows-phone-mango-change-listbox-how-to-detect-compression-end-of-scroll-states.aspx">link</a> explains this in details, and I have just reused parts of it as is. We need to override the scrollviewer style to hook into this new StateGroups. We need to look for CompressionBottom state, for the currentstatechanged event of the scrollviewer.</p>

<pre><code class="csharp">private void myScrollViewer_Loaded_1(object sender, RoutedEventArgs e)
{
    SetScrollViewer();
}

private void SetScrollViewer()
{
    // Visual States are always on the first child of the control template 
    FrameworkElement element = VisualTreeHelper.GetChild(myScrollViewer, 0) 
                            as FrameworkElement;
    if (element != null)
    {
        VisualStateGroup vgroup = FindVisualState(element, "VerticalCompression");

        if (vgroup != null)
        {
            vgroup.CurrentStateChanging += 
                 new EventHandler&lt;VisualStateChangedEventArgs&gt;(vgroup_CurrentStateChanging);
        }
    }
}

private void vgroup_CurrentStateChanging(object sender, VisualStateChangedEventArgs e)
{
    if (e.NewState.Name == "CompressionTop")
    {

    }

    if (e.NewState.Name == "CompressionBottom")
    {
        if (!isCurrentlyLoading )
        {
            LoadDataFromSource();
        }
    }
    if (e.NewState.Name == "NoVerticalCompression")
    {

    }
}
</code></pre>

<p>You can use either of these two ways to incrementally load data on a windows phone app. The entire code that is used in this blog is avaialble <a href="https://github.com/rahulpnath/IncrementalLoadingPhone">here</a>. The sample app shows both these methods. The pivot header specifies the method that is used, LongListSelector and Scrollstates</p>

<p><img src="/wp_incremental_loading_longlistselector.jpg" alt="windows phone incremental loading using longlistselector" /><img src="/wp_incremental_loading_scrollstates.jpg" alt="windows phone incremental loading using scrollstates" /></p>

<p>Hope this helps you to incrementally load data on your windows phone application</p>

<p><a href="https://github.com/rahulpnath/IncrementalLoadingPhone">Download Code</a></p>
]]></content>
  </entry>
  
</feed>
