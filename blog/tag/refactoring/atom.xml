<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Refactoring | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/tag/refactoring/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2018-12-06T00:02:45+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Replace ‘Introduce Local Extension’ With ‘Extension Methods’]]></title>
    <link href="http://rahulpnath.com/blog/replace-introduce-local-extension-with-extension-methods/"/>
    <updated>2010-08-25T13:04:00+00:00</updated>
    <id>http://rahulpnath.com/blog/replace-introduce-local-extension-with-extension-methods</id>
    <content type="html"><![CDATA[<p>Introduce Foreign Method(<a href="http://www.refactoring.com/catalog/introduceForeignMethod.html">IFM</a>) and Introduce Local Extension(<a href="http://www.refactoring.com/catalog/introduceLocalExtension.html">ILE</a>) are two refactoring techniques that comes handy when you need to add functionality to an exisiting class,source code of which is beyond your control.
IFM is used when its just one or two functions that you need to add to the class.When the number of functions,that are to be added are more,then ILE is used.Not a rule though :)
But now with <a href="http://msdn.microsoft.com/en-us/library/bb383977.aspx">Extension Methods</a> the whole process is much more simpler.
You need not do the subclassing or wrapper technique of ILE.
This can be a third way of implementing ILE :).Thanks to the framework team for keeping it simple.
The same date example using the &lsquo;Extension Methods&rsquo; way of refactoring</p>

<pre><code class="csharp">public static class MyExtensionMethods
   {
     public static DateTime NextDay(this DateTime date)
     {
      return new DateTime(date.Year, date.Month, date.Day+1);
     }
   }
</code></pre>

<p>The function NextDay is now available on any DateTime object,just as if you have written if you had access to the source code. It&rsquo;s the usage of ILE and IFM that has paved way for the inclusion of Extension Methods in the framework I guess.Thanks to <a href="http://martinfowler.com/">Fowler </a>for that.
<a href="http://anyurl.com">CodeProject</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD and Refactoring]]></title>
    <link href="http://rahulpnath.com/blog/tdd-and-refactoring/"/>
    <updated>2010-08-23T10:42:00+00:00</updated>
    <id>http://rahulpnath.com/blog/tdd-and-refactoring</id>
    <content type="html"><![CDATA[<p>Over the days I have been reading on Test Driven Development(TDD) and it seems really interesting methodology to go with as per development is concerned.<br/>
Basic of TDD is that the development process relies on &lsquo;tests&rsquo;, that are written prior to code.<br/>
Sounds astonishing!!!!<br/>
It might to someone into the normal development mode,where tests are usually written after code, so as to match the code that is written.<br/>
But TDD says just the opposite.<br/>
Code to make the tests pass&hellip;Just pass..<em>Nothing more and Nothing less</em>.<br/>
Thats where the catch is where most of we developers might find it difficult and needs getting used to.Not getting more into it as I would not be the best to comment on it :)<br/>
So whats refactoring got to do here.<br/>
Refactoring plays an integral part of TDD,so that the code is elegant and conveys just what it needs to,avoiding duplication.<br/>
The TDD approach also assists in refactoring as you have tests readily available to assure that the functional behaviour is not affected while changing the code design.You are just click of a button away if you are having a automated test scripts (like nUnit) in veryfying refactoring. <br/>
So both TDD and Refactoring goes hand in hand and helps in greatly improving the overall code quality.<br/>
There are quite a lot resources out there on these.<br/>
The best for refactoring would be of <a href="http://www.amazon.com/gp/product/0201485672/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0201485672&amp;linkCode=as2&amp;tag=rahulpnath-20">Refactoring: Improving the Design of Existing Code</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=rahulpnath-20&amp;l=as2&amp;o=1&amp;a=0201485672" alt="" />.<br/>
For TDD <a href="http://www.amazon.com/gp/product/0735619484/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0735619484&amp;linkCode=as2&amp;tag=rahulpnath-20">Test-Driven Development in Microsoft  .NET (Microsoft Professional)</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=rahulpnath-20&amp;l=as2&amp;o=1&amp;a=0735619484" alt="" /> would be a good start and also the one by Kent Beck <a href="http://www.amazon.com/gp/product/0321146530/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321146530&amp;linkCode=as2&amp;tag=rahulpnath-20">Test Driven Development: By Example</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=rahulpnath-20&amp;l=as2&amp;o=1&amp;a=0321146530" alt="" /></p>
]]></content>
  </entry>
  
</feed>
