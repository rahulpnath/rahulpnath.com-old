<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: windows phone 7 | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/tag/windows-phone-7/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2017-07-26T00:02:24+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MVVM – A Windows phone scenario]]></title>
    <link href="http://rahulpnath.com/blog/mvvm-a-windows-phone-scenario/"/>
    <updated>2013-07-26T05:21:51+00:00</updated>
    <id>http://rahulpnath.com/blog/mvvm-a-windows-phone-scenario</id>
    <content type="html"><![CDATA[<p>With multiple platforms/devices, embracing the same technology, common architectural patterns become more popular as they provide us with what we want the most – <strong>Reusability. </strong>MVVM has turned out to be a must use architectural pattern while developing for Windows phone/Windows 8 store apps. I had blogged on this, <a href="http://rahulpnath.com/blog/mvvm-does-it-really-matter/">Why MVVM matters</a>.</p>

<p>In this post will take a quick look into the scenarios that would come across while we develop a windows phone app and how that could possibly(as there could be many other ways/approaches too) be implemented using MVVM. I would be covering shorter scenarios in this same post, and those that would be better off in a different one would be linked here . <a href="http://mvvmlight.codeplex.com/">MVVM Light</a> is a very popular toolkit that assists in getting started with MVVM quickly and we would also be using the same. This can be easily added in as a <a href="http://nuget.org/packages/mvvmLight">nuget package</a>
MVVM Light does come with a ViewModelBase class, that all your View Models are to inherit so that you do not have to worry about implementing the <a href="http://msdn.microsoft.com/en-in/library/system.componentmodel.inotifypropertychanged.aspx">INotifyPropertyChanged</a> interface. I would still think of having a intermediate view model base class specific to our app and have all the reusable piece of code that you want across your ViewModels.</p>

<p>Common MVVM scenarios that we come across while developing and probable approaches are discussed below. There might be different ways of achieving the same, and at times we might go off the ‘purist’  MVVM implementation,  i.e.  of not having a code behind at all. As for me I am ok to have code behind at a minimum if it is really required and does not affect the original intent of MVVM(separations of concerns, testability and reusability)</p>

<p><strong>Scenarios</strong></p>

<ol>
<li><p>Binding the View – ViewModel</p></li>
<li><p>ViewModel and Model</p></li>
<li><p>Basic Commanding</p></li>
<li><p>Advanced Commanding</p></li>
<li><p>Page Navigations and Parameters</p></li>
<li><p>Page Events</p></li>
<li><p>Application Bar<strong> </strong></p></li>
</ol>


<p>We will discuss each on in details and the sample that we would be using is that of a photo browser, for <a href="http://500px.com/">500px</a>. You can get the api access <a href="http://developers.500px.com/">here</a></p>

<p><strong>1. Binding the View-ViewModel</strong></p>

<p>MVVM Light comes default with a ViewModelLocator(<strong>VML</strong>) class that will help you with the binding of the ViewModels(<strong>VM’s</strong>) with the corresponding View. The VML will have public properties for the different view models that you have. You can either have different public properties for each of your view model here, or have a property for MainViewModel and then that would in turn have other ViewModel properties. The VML uses a SimpleIOC container to resolve type instances. In simple terms, with an IoC container all we are trying to solve is to minimize the dependency between different types/classes, so that we would never have to instantiate one class(complex type) in another. So whenever a instance of a class is required, the IoC container would generate it for us , and all we would be concerned would be of the interface that we require. For IoC to resolve types for us we need to register the interface and the original class that implements the interface.
Below you see how we are registering for the interface IDataService and setting its implementation class to DataService. Similarly we can also register classes, which would be how we would be registering our VM’s.</p>

<pre><code class="csharp">SimpleIoc.Default.Register&lt;IDataService, DataService&gt;();
SimpleIoc.Default.Register&lt;MainViewModel&gt;();
</code></pre>

<p>When installing the nuget package itself an instance of the VML is added into the app.xaml class, which can be used in all the View classes to data-bind to the VM.</p>

<pre><code class="xml">&lt;Application.Resources&gt;
       &lt;ResourceDictionary&gt;
           &lt;!--Global View Model Locator--&gt;
           &lt;vm:ViewModelLocator x:Key="Locator"
               d:IsDataSource="True" /&gt;
 .....
&lt;Application.Resources&gt;
</code></pre>

<p>This instance is used in all the view classes as below  in the xaml.</p>

<pre><code class="xml">DataContext="{Binding Main, Source={StaticResource Locator}}"
</code></pre>

<p>The Main property returns the View model that should be bound with the view. The ‘ServiceLocator.Current’, returns the default instance of the SimpleIoc. The GetInstance always returns the same instance of the ViewModel as if it would have for a Singleton. If you need a new instance then you would need to pass a specific key(any identifier value) to get a different instance.</p>

<pre><code class="csharp">public MainViewModel Main
{
    get
    {
        return ServiceLocator.Current.GetInstance&lt;MainViewModel&gt;();
    }
}
</code></pre>

<p><strong>What about the other Views and View Models?</strong></p>

<p>Mostly the main VM would be the one that would be like a hub page, from which the user be able to navigate onto other pages and detailed views., say from a list of friends to a friend, a list of photos to a specific photo. One common thing that we do wrong is to think of View – ViewModel as a one-to-one relationship, meaning one view will have only one ViewModel bound to it.  In our sample app we have a list of photos that needs to be displayed on the main page and on selecting one of the photo, we should be taken to the photo’s detail page. So the mistake to do here would be to have an observable list of Photos in the MainViewModel. We should rather have a list of PhotoViewModel , that would be bound to the list control in the main page. So the MainViewModel would have a property SelectedPhoto, which would be of PhotoViewModel type, that would become the data context of the PhotoDetail page.</p>

<pre><code class="xml">DataContext="{Binding Main.SelectedPhoto, Source={StaticResource Locator}}"
</code></pre>

<p>For views that are not at all related to each other, we can have separate properties in the VML, like say for Settings, About page.</p>

<pre><code class="xml">DataContext="{Binding About, Source={StaticResource Locator}}"
</code></pre>

<pre><code class="csharp">public AboutViewModel About
 {
    get
    {
        return ServiceLocator.Current.GetInstance&lt;AboutViewModel&gt;();
    }
  }
</code></pre>

<p>So whenever you have hierarchical pages, it would mostly be that your parent/callee will have the ViewModel property that you would bind to like SelectedPhoto in MainViewModel and for cases you have separate navigations you can have a property exposed in VML like About, Main.</p>

<p><strong>2. ViewModel and Model</strong></p>

<p>Like I mentioned above, one common mistake that we make is to think of View-ViewModel as a one-to-one relationship and normally end up binding the UI to models and not VM’s. We soon tend to hit into problems, such as adding custom properties into models, not finding ways to trigger property changed etc. So it is always best to wrap your models in the VMs. In cases where you are sure you would never want to change/format the data format then you can directly bind to a model. In  cases where you would want to format the data (like say you have a First Name &amp; Last Name property on the model and you want to display Full Name)  you would rather wrap the data into a VM and bind that. You could always use <a href="http://msdn.microsoft.com/en-us/library/system.windows.data.ivalueconverter.aspx">ValueConverters</a>, to format the data specific to the UI, but that always comes with a price, especially on a phone device. Phone’s come with lesser hardware resource and you would want to make the maximum use of it. So it is better to have properties exposed on VM itself rather than having converters all over the UI to format the data. But still you would be in positions where you would absolutely want to use a converter where you should. That is a wise decision that one should make for yourself. (a <a href="https://groups.google.com/forum/?fromgroups#!topic/wpf-disciples/P-JwzRB_GE8">thread</a> that discusses on this )</p>

<p><strong>3. Basic Commanding</strong></p>

<p>It’s not just the data that gets displayed needs to be separated out cleanly. User actions and actions taken should also be cleanly separated from the UI. Commands is what would help us here. Commanding support is currently only for elements that inherit from <a href="http://msdn.microsoft.com/en-us/library/system.windows.controls.primitives.buttonbase.aspx">ButtonBase</a>. As in any mvvm implementation, mvvmlight also has a wrapper that implements <a href="http://msdn.microsoft.com/en-us/library/system.windows.input.icommand.aspx">ICommand</a> interface for us, which is RelayCommand. An instance of this can be directly bound to the Command property, for those elements that inherits from ButtonBase. Below is how you would wire up the command to a button on a page</p>

<pre><code class="xml">&lt;Button Content="My Command" Command="{Binding MyCommand}"
    VerticalAlignment="Center" HorizontalAlignment="Center" /&gt;
</code></pre>

<pre><code class="csharp">public MainViewModel()
{
    MyCommand = new RelayCommand(OnMyCommand);
}
public RelayCommand MyCommand { get; set; }

private void OnMyCommand()
{
MessageBox.Show("You clicked me :)");
}
</code></pre>

<p><strong>4. Advanced Commanding</strong></p>

<p>It’s not just UI elements that inherit from Buttonbase that we would be using, and hence we definitely need alternatives to bind events of such elements. ListBox SelectionChanged, Page loaded etc are very common events that one would be interested in while developing phone apps. There are a couple of approaches that one could follow here</p>

<ul>
<li><strong>Wire-up the command from code behind</strong></li>
</ul>


<p>We could  easily wire up all such events from the code-behind class, and have it invoked on the view model. Some might argue here that we are going off the MVVM pattern, which says ‘no code behind’. I don’t this it ever said that in the first place. It is just about decoupling the UI from the code and this is still done. Even binding/commanding is still going to generate code and do the wiring of commands. As long as there is a clear separation of logics and concerns we are good. So I think this this is very well acceptable and the easiest in fact of all the approaches.</p>

<p>Code Behind:</p>

<pre><code class="csharp">    private MainViewModel viewModel
    {
     get { return this.DataContext as MainViewModel; }   
    }

    protected override void OnNavigatedTo(System.Windows.Navigation.NavigationEventArgs e)
    {
    base.OnNavigatedTo(e);
    viewModel.OnnavigatedToCommand.Execute(NavigationContext.QueryString);
    }
</code></pre>

<p>View Model</p>

<pre><code class="csharp">    public MainViewModel()
    {
        OnnavigatedToCommand = new RelayCommand&lt;IDictionary&lt;string, string&gt;&gt;(OnNavigatedTo);
    }
    public RelayCommand&lt;IDictionary&lt;string, string&gt;&gt; OnnavigatedToCommand { get; set; }

    private void OnNavigatedTo(IDictionary&lt;string,string&gt; parameters)
    {
    // do whatever you want to here
    }
</code></pre>

<ul>
<li> <strong>EventToCommand Behavior</strong></li>
</ul>


<p>With the EventToCommand behavior introduced for Blend, can be used to bind an ICommand from the UI elements. Though it was introduced for Blend, it can be used independently. You would need to add a reference to System.Windows.Interactivity.dll, which is were all these behaviors are implemented. There is a detailed <a href="http://geekswithblogs.net/lbugnion/archive/2009/11/05/mvvm-light-toolkit-v3-alpha-2-eventtocommand-behavior.aspx">post</a> out here on to how to use EventToCommand to trigger commands directly from the UI.</p>

<p>Just to keep a sample here, below would be how it would look like</p>

<pre><code class="xml">xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
xmlns:command="clr-namespace:GalaSoft.MvvmLight.Command;assembly=GalaSoft.MvvmLight.Extras.WP71"
...
&lt;ListBox&gt;
&lt;i:Interaction.Triggers&gt;
&lt;i:EventTrigger EventName="SelectionChanged"&gt;
&lt;command:EventToCommand Command="{Binding SelectionChangedCommand}" /&gt;
&lt;/i:EventTrigger&gt;
&lt;/i:Interaction.Triggers&gt;
&lt;ListBox.Items&gt;
&lt;ListBoxItem&gt;Item1&lt;/ListBoxItem&gt;
&lt;ListBoxItem&gt;Item2&lt;/ListBoxItem&gt;
&lt;ListBoxItem&gt;Item3&lt;/ListBoxItem&gt;
&lt;/ListBox.Items&gt;
&lt;/ListBox&gt;
</code></pre>

<pre><code class="csharp ">public MainViewModel()
{
    SelectionChangedCommand = new RelayCommand(OnSelectionChangedCommand);
}
public RelayCommand SelectionChangedCommand { get; set; }
private void OnSelectionChangedCommand()
{
// do whatever you want to here
}
</code></pre>

<ul>
<li><strong>Messenger</strong></li>
</ul>


<p>We could also use a messenger service, to propogate UI events to VM’s. MVVMLight  has a built in messenger service that can be used for this. In simple terms a messenger is nothing but a decoupled eventing system, something of a publisher-subscriber model. In the messenger one entity  would send a message and there would be another entity that listens for this message and acts upon it.</p>

<pre><code class="csharp">private void Selector_OnSelectionChanged(object sender, SelectionChangedEventArgs e)
{
    Messenger.Default.Send&lt;NotificationMessage&gt;(
        new NotificationMessage("You could have your own items here by using a generic NotificationMessage&lt;&gt;"));
}
…

public MainViewModel()
{
    MessengerInstance.Register&lt;NotificationMessage&gt;(this, OnSelectionChanged);
}
private void OnSelectionChanged(NotificationMessage message)
{
// do whatever you want to here
}
</code></pre>

<p>As you see above, in the code behind we send a Notification message indicating a click has happened. In the VM we register for the notification message and act upon it. We could send generic objects via the notification message and also create our own messages by inheriting from MessageBase of mvvmlight. This <a href="http://msdn.microsoft.com/en-us/magazine/jj694937.aspx">article</a> gives more information and scenarios around this</p>

<p>We are still left with a lot more scenarios to cover here and I would be covering them in a separate post to keep this one &lsquo;short&rsquo; :)</p>

<p><strong>Edit</strong>: Check out <a href="http://rahulpnath.com/blog/mvvm-a-windows-phone-scenario-part-2/">MVVM – A Windows Phone Scenario – Part 2</a> for the rest of the scenarios</p>

<p> </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Phone Series – MVVM and ApplicationBar]]></title>
    <link href="http://rahulpnath.com/blog/windows-phone-series-mvvm-and-applicationbar/"/>
    <updated>2013-04-17T11:04:01+00:00</updated>
    <id>http://rahulpnath.com/blog/windows-phone-series-mvvm-and-applicationbar</id>
    <content type="html"><![CDATA[<p>ApplicationBar on a windows phone, is to provide users of your app with quick access to the most commonly used tasks. For a mail app this would be refresh/new mail, for a photo app it might be like/unlike button, settings etc are common buttons that appear in an ApplicationBar . But then not always do we have them as static, and we would want to add/remove icons/menu items to that based on the applications current state.For example, you would want to add the like/unlike button only if the user is logged in, or even the settings icon would be only for logged in users. Whatever might be your scenario, if you are looking for to add/remove icons from the application bar from your code then this article is for you.</p>

<p>In a normal app which uses code-behind, this can be easily done by accessing the ‘ApplicationBar’ in the code-behind class like below</p>

<pre><code class="csharp     ">ApplicationBar.Buttons.Add(&lt;your button&gt;);
</code></pre>

<p>When you are using MVVM you would want to do this from your ViewModel(VM). Below are the approaches that you could use to achieve the same</p>

<p><strong>1. Mesenger Service</strong></p>

<p>Whenever we need to communicate between VM’s or between your view model and View then we would want to do that in the most decoupled manner. When using <a href="http://www.galasoft.ch/mvvm/">MVVMLight</a>, we could use the Messenger class to achieve this. We would send a message indicating that we want to add a new appbar button from the ViewModel, and the View code behind, which already has registered for such an event would get notified and add the icon for us .</p>

<p>Below is how the Code-behind would look like . We register for a NotificationMessage(you could also use your own notification class for this), and see what kind of button needs to be added and adds that to the ApplicationBar. On click of the appbar button, we wire up the click event to a command of the ViewModel. Though there is some code behind in here, we are not going away from MVVM here, as we still have clear separation of concerns and also testability is not affected.</p>

<pre><code class="csharp    ">    public partial class MainPage : PhoneApplicationPage
    {
        public MainViewModel viewModel
        {
            get
            {
                return this.DataContext as MainViewModel;
            }
        }

        private ApplicationBarIconButton settingsButton;
        // Constructor
        public MainPage()
        {
            InitializeComponent();
            settingsButton = new ApplicationBarIconButton()
            {
                Text = "Settings",
                IconUri = new Uri("Images/appbar.feature.settings.rest.png", UriKind.Relative)
            };
            settingsButton.Click += settingsButton_Click;
            // Register for the messenger 
            Messenger.Default.Register&lt;NotificationMessage&gt;(this, OnNotificationMessage);
        }

        void settingsButton_Click(object sender, EventArgs e)
        {
            viewModel.SettingsCommand.Execute(null);
        }

        private void OnNotificationMessage(NotificationMessage message)
        {
            // Check here for the notification
            // You can also build cutoms notification message here for this by inheriting from MessageBase
            if (message.Notification == "AddSettings")
            {
                if (ApplicationBar == null)
                {
                    ApplicationBar = new ApplicationBar();
                }
                ApplicationBar.Buttons.Add(settingsButton);
            }
        }
    }
</code></pre>

<hr />

<p><strong>2. ApplicationBar Service</strong></p>

<p>Like we use <a href="http://www.geekchamp.com/articles/mvvm-in-real-life-windows-phone-applications-part2">NavigationService</a>, for navigating from VM’s we could also create a ApplicationBarService, that can be used to add application bar icons from ViewModels. For this I have created a base class, MyModelBase, for all my VM’s which inturn inherits from ViewModelBase of MVVMLight. This base class holds an interface for the ApplicationBarService.</p>

<pre><code class="csharp    ">    public class MyModelBase: ViewModelBase
    {
        public IApplicationBarService ApplicationBar { get; set; }

        public MyModelBase()
        {

        }
        public MyModelBase(IApplicationBarService appBar)
        {
            ApplicationBar = appBar;
        }
    }
</code></pre>

<p>The interface IApplicationBarService, would have the functions that we would want to Add/Remove icons from the application bar. For now I have just put in the AddButton. You could also add RemoveButton and any other things that you would want in there.</p>

<pre><code class="csharp    ">    public interface IApplicationBarService
    {
        IApplicationBar ApplicationBar { get;} 

        void AddButton(string title, Uri imageUrl, Action OnClick);
    }
</code></pre>

<p>Implementation for this interface is as below</p>

<pre><code class="csharp    ">    public class ApplicationBarService: IApplicationBarService
    {
        public void AddButton(string title, Uri imageUrl, Action OnClick)
        {
            ApplicationBarIconButton newButton = new ApplicationBarIconButton()
                {
                    Text = title, 
                    IconUri = imageUrl, 
                };
            newButton.Click += ((sender,e) =&gt; {OnClick.Invoke();}) ;

            ApplicationBar.Buttons.Add(newButton);

        }

        public IApplicationBar ApplicationBar
        {
            get
            {
                var currentPage = ((App)Application.Current).RootFrame.Content as PhoneApplicationPage;
                if (currentPage.ApplicationBar == null)
                {
                    currentPage.ApplicationBar = new ApplicationBar();
                }
                return currentPage.ApplicationBar;
            }
        }
    }
</code></pre>

<p>The ApplicationBar property reads gets the current ApplicationBar from the current page. If it is not defined then it would simply create a new one. The Add function just adds a new button and wires up the click event of the button, to the function that is passed in by the VM. We could also use Commands here, for now I just wanted to keep it simple</p>

<p>In cases where you don’t want to add buttons dynamically, but just have static buttons you could also use BindableApplicationBar implementations that are there. One such implementation is there along with the <a href="http://phone7.codeplex.com/">Phone7.Fx</a> library. There are also many other implementations for the same.</p>

<p>Hope this helps you to decouple your application bar icons from the ViewModel.You can find a <a href="https://github.com/rahulpnath/Blog/tree/master/PhoneAppBarMvvm">sample</a> implementation for this. In the sample both these approaches are shown for adding icons. You could figure out the Remove pretty easily.</p>

<p><img src="/wp_applicationbar_icon_mvvm.png" alt="windows phone applicationbar mvvm" /></p>

<p>Hope it helps!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Phone Series – Preloading Content]]></title>
    <link href="http://rahulpnath.com/blog/windows-phone-series-preloading-content/"/>
    <updated>2013-04-12T07:40:46+00:00</updated>
    <id>http://rahulpnath.com/blog/windows-phone-series-preloading-content</id>
    <content type="html"><![CDATA[<p>Mostly phone apps, connect to a service for the data and wrap them up to a cool UI for user consumption. But at times we would have apps that comes with a lot of preloaded content, with offline capability using <a href="http://visualstudiogallery.msdn.microsoft.com/cd120b42-30f4-446e-8287-45387a4f40b7">sqlite</a>.  Offline scenarios might either start of with preloaded content or get content on the apps first launch. This article is more for the scenario where we have preloaded content bundled with the app, and then on launch of the app, it would also get new content and updates to existing content. Complete knowledge of the pre-loaded content at the time of development would be rare. All you would know would be the metadata schema and how/where to look for the preloaded content.</p>

<p>We would not be creating a fully functional sample here, but would be touching on important aspects and the approaches that can be used to tackle similar scenarios and some code snippets</p>

<p>This <a href="http://blogs.windows.com/windows_phone/b/wpdev/archive/2013/03/12/using-the-sqlite-database-engine-with-windows-phone-8-apps.aspx">article</a> here would help you out on setting up sqlite for windows phone apps. Mostly we would be storing metadata of files/media that gets preloaded in the sqlite and keep the original files/media(preloaded content) packaged along with the xap, ideally by setting the <a href="http://msdn.microsoft.com/en-in/library/windowsphone/develop/ff967560(v=vs.105).aspx#BKMK_Media">Build Action to Content</a>.  Now in cases where we are expecting to update the existing content and also get new content we would have to copy out the entire media/files into the IsolatedStorage, so that we can do any further updates or additions.</p>

<p>Assuming that we have a folder “MyPreloadedContent” as indicated in the image below, which would be where all our preloaded content is going to be . Most of the time with preloaded content, we would not know what exact data would be in there. It might contain files, images, folders etc. We would want an easy way to set Build Action to Content for all the files/folders that gets placed under the folder( even if it is done outside of Visual Studio).</p>

<p><img src="/preloaded_content_Visual_studio.png" alt="preloaded content Visual studio" /></p>

<p>For this we would need to tweek the project file, to tell it that whatever is under MyPreloadedContent should be treated as ‘Content’. Edit the csproj file from notepad or any other text editor that you use(<a href="http://notepad-plus-plus.org/">Notepad++</a> is my personal favorite). Scroll down to wherever the other Content files are specified, like “<Content Include="ApplicationIcon.png">” for example. Add in the below line to make all the content put into that folder to be treated as Content, and save the csproj file.</p>

<pre><code>&lt;strong&gt;&lt;span style="font-size:large;"&gt;&lt;Content Include="MyPreloadedContent**" /&gt;&lt;/span&gt;&lt;/strong&gt;
</code></pre>

<p>Now you could open that folder and put in some content into that. For now I put in some image files and also a sub folder  as below</p>

<p><img src="/preloaded_content_explorer.png" alt="preloaded content explorer" /></p>

<p>You would need to reload the projects/solution in visual studio to see that those files are automatically included into the solution. If not in a Visual studio,  msbuild would automatically include all the files as Content.</p>

<p><img src="/preloaded_content_vs_refresh.png" alt="preloaded content visual studio refresh" /></p>

<p>Now that we have all the files copied into that folder to be automatically included into the solution you need to now need to copy out all these files onto the IsolatedStorage when the app starts for the first time. You would want to do this, so that if there are any updates onto the files that you copied(which would be delivered to you via a web service in a real scenario), you can overwrite the files in the IsolatedStorage so that the new content would be taken then on.</p>

<p>Now comes the next challenge of getting all the files that are under MyPreloadedContent folder, so that you can copy them over to IsolatedStorage. Since this files would be copied at a later point of time, say at the time of packaging, we would not be able to know all the file names and directory structure prior.</p>

<p>We can use <a href="http://msdn.microsoft.com/en-us/library/vstudio/bb126445.aspx">T4 ( Text Templating Transformation Toolkit) templates</a> to help us out here. Using T4 templates we can generate a class file that will have a property returning us all the file names in the MyPreloadedContent directory.</p>

<p>To create a T4 template, add a new item to the project <strong>MyFiles.tt. </strong>Select Ok if you get any warning message</p>

<p><img src="/preloaded_content_t4_template.jpg" alt="preloaded content t4 template" /></p>

<p>In a T4 template it would be a mix of text and code, that would be used to generate a new file that would be a class in our case which would expose a function to get all the file names under the folder . Below is the entire text/code that would go into the new file that we just created(<strong>MyFiles.tt</strong>)</p>

<pre><code class="csharp    ">    &lt;#@ template debug="false" hostspecific="true" language="C#" #&gt;
    &lt;#@ output extension=".gen.cs" #&gt;
    &lt;#@ import namespace="System.IO"#&gt;
    // &lt;auto-generated /&gt;

    namespace PreloadedContent
    {
        public class MyFiles
        {
            private static string[] MyPreloadedContentFiles()
            {
                return new[] {
    &lt;#
                DirectoryInfo directoryInfo = new DirectoryInfo(
                   Path.Combine(Path.GetDirectoryName(Host.TemplateFile),"MyPreloadedContent"));
            foreach(FileInfo file in directoryInfo.GetFiles("*.*", SearchOption.AllDirectories))
                {
                    if (!file.FullName.Contains(@"."))
                    {#&gt;
                          "&lt;#= file.FullName.Substring(
                          file.FullName.IndexOf("MyPreloadedContent")).Replace(@"", "/") #&gt;",
    &lt;#              }
                }
    #&gt;
                            };
            }
        }
    }
</code></pre>

<p>It just says to read the directory MyPreloadedContent and iterate to get all the files in that and writes it out by trimming of the absolute path and putting in only the relative path. Save the MyFiles.tt, and in Visual Studio right click on it and say “Run Custom Tool”. This would generate the cs file with an extension “.gen.cs” as we have mentioned in “<strong>&lt;#@ output extension=&ldquo;.gen.cs&rdquo; #>”.  </strong>The generated class would look like below</p>

<pre><code class="csharp">    namespace PreloadedContent
    {
        public class MyFiles
        {
            private static string[] MyPreloadedContentFiles()
            {
                return new[] {
                               "MyPreloadedContent/picfinity login.png",
                               "MyPreloadedContent/Search.png",
                               "MyPreloadedContent/Share.png",
                               "MyPreloadedContent/upload.png",
                               "MyPreloadedContent/Profile/profile info.png",
                               "MyPreloadedContent/Profile/Profile.png",
                            };
            }
        }
    }
</code></pre>

<p>The above class has all the file paths to the content and you could iterate that to copy out the files into the IsolatedStorage.</p>

<p>There are a couple of ways, by which you can ensure that the template file is run before the actual code gets compiled. This is to make sure that this generated class is going to be updated with the latest files that would be copied into the folder at build time i.e your templates are transformed at build time. This <a href="http://msdn.microsoft.com/en-us/library/ee847423.aspx">article</a> details out the methods to get that integrated into the build. On a build server where you dont have Visual Studio installed you would need to copy out these files mentioned <a href="http://msdn.microsoft.com/en-us/library/ee847423.aspx#buildserver">here</a> explicitly</p>

<p>With that integrated you are all set to go to build your app with preloaded content. You would not need to know anything about the file names/ structure of the content and it would just work as long as the metadata that drives it correct.</p>

<p>Hope it helps!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MVVM – Does it really matter?]]></title>
    <link href="http://rahulpnath.com/blog/mvvm-does-it-really-matter/"/>
    <updated>2013-04-08T05:12:07+00:00</updated>
    <id>http://rahulpnath.com/blog/mvvm-does-it-really-matter</id>
    <content type="html"><![CDATA[<p>MVVM (Model-View-ViewModel), is a popular architectural pattern since WPF/Silverlight. Separation of concerns(UI/code), testability etc are some of the key things that motivates one to go via the MVVM route. There are innumerous articles out there, just like this <a href="http://msdn.microsoft.com/en-in/library/hh848246.aspx">one</a>, that gets into the details of how and why one should use MVVM.</p>

<p>With Windows phone also embracing xaml and silverlight, any one who knew silverlight turned a phone developer overnight. MVVM did find its way into this space too. But most of the phone app developers, unlike those who developed for enterprise. would have never cared for MVVM , as they rarely would have written test cases for their apps, nor were they actually concerned on the UI/code separation. Since most of the apps were just out of a hobby, the only idea was just to have it up and available in the store as fast as possible. I might not be fully correct here, but I do know at least a dozen people,including me, who did this, so am good enough to put out that statement</p>

<p>With windows 8 too taking the store way and having the same development platform of silverlight/xaml, don’t be surprised MVVM  showed up there too. Now anyone who had an app on the phone, had to do a lot of copy pasting over the code to have the same application available in both the stores. This gives MVVM a totally new dimension for motivation that was not spoken  about earlier – <strong><em>Reusability. </em></strong></p>

<p>Having an application for phone and windows 8 app store with the minimum amount of rework is best possible by using MVVM and also a couple of other techniques. There is a detailed <a href="http://msdn.microsoft.com/en-us/library/windowsphone/develop/jj681693(v=vs.105">article</a>.aspx) on msdn on how how to maximize code reuse between Windows Phone 8 and Windows 8.</p>

<p>MVVM does really matter now, if we do not want to end up copy pasting code from phone app to the windows 8 store app. Also fixing and adding in new features would become more easier with following MVVM</p>

<p><a href="http://nuget.org/packages/Portable.MvvmLightLibs/">MVVM Toolkit</a> is a very popular helper library for implementing MVVM pattern, as is available on nuget as a PCL(Portable class library)</p>

<p><strong>MVVM<em>, It really does matter !!!</em></strong></p>
]]></content>
  </entry>
  
</feed>
