<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: JavaScript | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/tag/javascript/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2017-05-25T00:02:23+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[yo ko - A Yeoman Generator For KnockoutJS]]></title>
    <link href="http://rahulpnath.com/blog/yo-ko-a-yeoman-generator-for-knockoutjs/"/>
    <updated>2014-08-20T10:20:06+00:00</updated>
    <id>http://rahulpnath.com/blog/yo-ko-a-yeoman-generator-for-knockoutjs</id>
    <content type="html"><![CDATA[<p>Templates/Scaffolding is something that we are all used to nowadays, given that we use an IDE for development. Visual Studio is one popular IDE, that is very popular among people developing on the Microsoft platform. Visual studio comes with a lot of pre-installed templates and scaffolding templates and also has a rich extension support from the <a href="http://visualstudiogallery.msdn.microsoft.com/site/search?f%5B0%5D.Type=RootCategory&amp;f%5B0%5D.Value=templates&amp;f%5B0%5D.Text=Templates">community</a>. While developing on text editors(say like <a href="http://www.sublimetext.com/">Sublime Text</a> which is what I have been using), which are not for any specific technology you might not have all the templating and scaffolding supported right out of the box. You might find plugins for specific editors but not for all the frameworks that are available today.</p>

<p><a href="http://yeoman.io/">Yeoman</a> is the Web&rsquo;s scaffolding tool for Modern Web Apps. Yeoman is a command line tool that runs over <a href="http://nodejs.org/">Node.js</a>. Setting it up is pretty easy with the instructions <a href="http://yeoman.io/learning/index.html">here</a>. To scaffold web applications, which is the same as creating a new project in Visual Studio from a template, we need to install framework specific generators for Yeoman. There are some `<a href="http://yeoman.io/generators/official.html">officially maintained generators</a> and also ones that are <a href="http://yeoman.io/generators/community.html">maintained by the community</a>.</p>

<p>KnockoutJs helps you simplify dynamic JavaScript UIs using the Model-View-ViewModel (MVVM) pattern. If you are new to knockout and come from a XAML backgorund, <a href="http://www.rahulpnath.com/blog/knockoutjs-for-xaml-developers/">KnockoutJS For XAML Developers</a>, would help you.   For KnockoutJs, there is an awesome generator that is written by <a href="https://twitter.com/stevensanderson">Steve Sanderson</a>, the creator of knockout itself and is available <a href="https://www.npmjs.org/package/generator-ko">here</a>. You can install this as below</p>

<blockquote><p>$ npm install generator-ko</p></blockquote>

<p>Once installed you can generate your web app from the command prompt and running the command &lsquo;<strong>yo ko</strong>&rsquo;. This is will ask for the name of the project, whether to use JavaScript or TypeScript and also if you need to include automated tests using Jasmine and Karma. On giving your options your web app would be  scaffolded out.</p>

<p><img class="center" alt="hp_dv4" src="/images/yo_ko.png" /></p>

<p><strong>Project Structure</strong></p>

<p>The generated web app is a simple Single Page Application(SPA), using the components feature released with <a href="http://blog.stevensanderson.com/2014/08/18/knockout-3-2-0-released/">Knockout 3.2.0</a>, <a href="http://bower.io/">Bower</a> to manage packages and <a href="http://gulpjs.com/">Gulp</a> for the build</p>

<p><img class="left" alt="hp_dv4" src="/images/yo_ko_structure.png" /> The generator creates the folder structure as shown here and by default has setup the required packages. It uses the following packages:</p>

<ul>
<li><a href="http://getbootstrap.com/">Bootstrap</a>: Responsive UI framework</li>
<li><a href="http://millermedeiros.github.io/crossroads.js/">Crossroads</a>: Routing Library</li>
<li><a href="https://github.com/millermedeiros/hasher/">Hahser</a>: Browsing History Manager</li>
<li><a href="http://jquery.com/">Jquery</a>: Feature rich library</li>
<li><a href="http://millermedeiros.github.io/js-signals/">Js-Signals</a>: Custom/Event Messaging System</li>
<li><a href="http://www.rahulpnath.com/blog/knockoutjs-for-xaml-developers/">Knockout</a>: Simplifies dynamic Javascript UIs with <a href="http://www.rahulpnath.com/blog/tag/mvvm/">MVVM pattern</a></li>
<li><a href="http://requirejs.org/">Requirejs</a>: File and Module Loader</li>
<li><a href="https://github.com/requirejs/text">Requirejs-text</a>: AMD loader plugin for text resources</li>
</ul>


<p>There are three components: <em>about-page</em>, <em>home-page</em> and <em>nav-bar</em>. The main, <em>index.html</em> composes these components into the full blown view. The nav-bar component is referred as is and the home and about page are dynamically loaded based on the nav-bar menu interaction. As shown below the <em>div</em> binds to the component based on the selected route.We look further deep on how the view models bind and these components are tied together.<br style="clear:both;" />
<code>html
&lt;body&gt;
    &lt;nav-bar params="route: route"&gt;&lt;/nav-bar&gt;
    &lt;div id="page" class="container" data-bind="component: { name: route().page, params: route }"&gt;&lt;/div&gt;
&lt;/body&gt;
</code></p>

<p>The javascript modules are loaded using Requirejs and the startup class for this is <em>app/starup.js</em> as defined in the data-main attribute in index.html. The knockout components are registered here and view-bindings are setup.Registering a component can be in multiple ways and is well explained in the article <a href="http://www.knockmeout.net/2014/06/knockout-3-2-preview-components.html">here</a>. The <em>currentRoute</em> object is what gets binded to the page and is defined in the app/router.js where the crossroads is setup. To use any other routing library of your choice this is where you would need to update. Whenever a user clicks a menu item and navigates to a new route, the currentRoute is updated, which in turn triggers the corresponding component to get loaded. <a href="https://github.com/millermedeiros/hasher/">Hasher</a> library is used to listen to browser navigation events and update them to crossroads, where the input is parsed and dispatch matched signal for the first Route that matches the input.</p>

<p>The knockout components are defined in the <em>components</em> folder and has both the html and js parts in the same component folder. Whenever the component is loaded the viewmodel defined in the corresponding js file gets bounded to it. This way of developments helps to keep different components of the app well separated as modules and compose them into the view as required.</p>

<p>The build is managed is using <a href="http://gulpjs.com/">Gulp</a>, which can be installed using <a href="https://www.npmjs.org/package/gulp">npm</a>. To build the project, you need to run <em>gulp</em> at the root folder. The build packages all the javascript modules/files into a single file, replaces the required updates in the html file, minifies the html, js and css etc. If not for the build systems, the application would  have to make lots of file/scripts/css requests or would have to have it all in the same file while development which makes working as a team difficult. These build system are highly configurable and can be used to setup output as required. The build tasks are defined in the <em>gulpfile.js</em> and the &lsquo;<em>default</em>&rsquo; task runs when running the gulp command. This is will generate the optimized files in the <em>dist</em> folder, which can be hosted in the server of your choice. I use the <a href="https://www.npmjs.org/package/http-server">zero-configuration command-line http-server</a> available on nodejs.</p>

<p><img src="/yo_ko_app.png" alt="yo ko application " /></p>

<p><strong>Adding New Components</strong></p>

<p>To add new components the knockout generator provides a command which generated the html/css components in the appropriate folder. You would still need to add the registration of the component in the startup file.</p>

<blockquote><p>yo ko:component &lt;component name&gt;</p></blockquote>

<p>This is just a starting point on building Single Page Applications using knockoutjs. Start on from here to build great web applications.</p>

<p><strong>Additional Resources</strong></p>

<ul>
<li><a href="http://blog.stevensanderson.com/2014/06/11/architecting-large-single-page-applications-with-knockout-js/">Architecting large Single Page Applications with Knockout.js</a></li>
<li><a href="http://www.knockmeout.net/2014/06/knockout-3-2-preview-components.html">Knockout.js 3.2 Preview : Components</a></li>
<li><a href="http://www.scottlogic.com/blog/2014/02/28/developing-large-scale-knockoutjs-applications.html">Developing Large Scale Knockoutjs Applications</a></li>
<li><a href="http://www.scottlogic.com/blog/2014/07/30/spa-angular-knockout.html">Single Page Applications - Angular Vs Knockout</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KnockoutJS For XAML Developers]]></title>
    <link href="http://rahulpnath.com/blog/knockoutjs-for-xaml-developers/"/>
    <updated>2014-07-07T23:35:39+00:00</updated>
    <id>http://rahulpnath.com/blog/knockoutjs-for-xaml-developers</id>
    <content type="html"><![CDATA[<p>After a very long time since I have actually wanted to move out to web development, recently I have started developing a website as part of my personal project, along with a friend of mine. I have been into desktop/mobile development on Microsoft technologies, using XAML for a very long time. <a href="http://www.rahulpnath.com/blog/tag/mvvm/">Model-View-View Model (MVVM)</a> is a pattern that got popular because of the powerful binding engine in XAML. It is always comforting to see familiar patterns while moving into unexplored technology areas. Same is the reason I chose to explore <a href="http://knockoutjs.com/index.html">KnockoutJS</a>(KO), which simplifies dynamic JavaScript UIs with the MVVM pattern.</p>

<p><img src="/MVVM_Knockoutjs.jpg" alt="MVVM Knockout" /></p>

<p>KnockoutJS acts as the binding engine in XAML and binds your ViewModel(VM) with your View as shown in the figure. As you expect, like in XAML it provides a way to specify declarative-bindings on html using the <a href="http://knockoutjs.com/documentation/binding-syntax.html">data-bind</a> attribute and is also widely <a href="http://knockoutjs.com/documentation/browser-support.html">supported across different browsers</a>. The Model is the data that is populated from the server after your business logics applied,  mostly populated out of Ajax JSON calls from a web service/api. This Model data might mostly need some transformation to map to your View needs which is what exactly the ViewModel does. It transforms the Model data and wraps over it to provide features like 2-way-binding, client side validation, transformation of properties, UI specific state and a lot more</p>

<p>We will see below how some of the major constructs in XAML map over to KnockoutJS.</p>

<blockquote><p><em>I assume that you are a XAML developer and am not including detailed code samples for the XAML part and would be just mentioning them.</em></p></blockquote>

<p><strong>1. INotifyPropertyChanged</strong></p>

<p>Notifying data bounded clients on updates to the underlying bound data is a typical scenario in XAML, where we use <a href="http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged(v=vs.110).aspx">INotifyPropertyChanged</a> interface. This is also required on web pages and is handled by KO using <em><a href="http://knockoutjs.com/documentation/observables.html">observables</a></em></p>

<pre><code class="javascript">var personVM = {
    Name: ko.observable('Rahul'),
    Age: ko.observable(50)
};
</code></pre>

<p>Declaring the property as an observable, makes any changes to the property immediately reflect on the bound UI elements, just like it happens on a property of a class that implements INotifyPropertyChanged.</p>

<p><pre class="codepen" data-height="300" data-type="js" data-href="CuIfK" data-user="rahulpnath"><code> </code></pre>
<script async src="http://codepen.io:/assets/embed/ei.js"></script></p>

<p><strong>2. DataContext</strong></p>

<p>In XAML we set the DataContext as the ViewModel to start binding the data from the ViewModel on the UI. Similarly in KO we have to call on to <em>applyBindings </em>method, passing on the ViewModel object to bind. You can see this in the above sample. You can also pass in an additional parameter indicating the part of the document that you want to explicitly bind to.</p>

<p><strong>3. DataBinding</strong></p>

<p>Binding the data to the UI in XAML is done declaratively using the <a href="http://msdn.microsoft.com/en-us/library/system.windows.data.binding(v=vs.110).aspx">Binding</a> syntax. Similarly in KO we use the <a href="http://knockoutjs.com/documentation/binding-syntax.html">data-bind</a> attribute to bind to a registered, built-in or custom, binding handler. As opposed to XAML where we bind to different properties, in KO all bindings are mentioned in the same data-bind attribute, separated by comma. A binding in KO consists of a name value pair separated by a colon, where the name corresponds to the binding handler/the property that we are binding to and the value from the VM that we need it to be bound to. A simple example of binding to the text property of a label would be <em>data-bind=&ldquo;text: Name&rdquo; . </em>You can also use the <a href="http://knockoutjs.com/documentation/with-binding.html">with binding</a> to create binding contexts for descendant elements as in XAML</p>

<p><strong>4. INotifyCollectionChanged</strong></p>

<p>In XAML updates to a collection is usually handled using an <a href="http://msdn.microsoft.com/en-us/library/ms668604(v=vs.110).aspx">ObservableCollection</a>, which notifies the UI whenever an item is added/removed to the collection. Similarly in KO you can use <em>observableArray</em>, which behaves the same as ObservableCollection. It notifies the bound UI elements whenever an element is added/removed from the array. Updates or changes to individual properties on the actual objects in the array is notified to the UI only if the property is an <em>observable, </em>as in XAML. In the below sample, you can try adding an observable item or a non-observable item to the list. As soon as you add an item it reflects in the list. But selecting and editing an item will reflect in the list only if you are editing an observable item. </p>

<p><pre class="codepen" data-height="300" data-type="js" data-href="FreIv" data-user="rahulpnath"><code> </code></pre>
<script async src="http://codepen.io:/assets/embed/ei.js"></script></p>

<p><strong>5. Dependent Properties</strong></p>

<p>In XAML when there are properties dependent on others , to notify changes we have to explicitly call RaisePropertyChanged on all the dependent properties. A very common example is below</p>

<pre><code class="csharp">private string firstName;
public string FirstName
{
   get { return firstName; }
   set
   {
        if (firstName!= value)
        {
            firstName= value;
            OnPropertyChanged("FirstName");
            OnPropertyChanged("FullName");
        }
   }
}
public string FullName
{
    get { return FirstName +" " + LastName; }
}
</code></pre>

<p>Here whenever FirstName is updated to notify UI elements bound to FullName would be updated only if we explicitly call PropertyChanged on FullName property too. In KO this is handled using <a href="http://knockoutjs.com/documentation/computedObservables.html">computed observables</a> and is much more elegant.</p>

<pre><code class="javascript">this.fullName = ko.computed(function() {
    return this.firstName() + " " + this.lastName();
}, this);
</code></pre>

<p><strong>6. Commanding</strong></p>

<p>Commanding is how user interactions are bound to actions/functions on ViewModel, which will in turn perform something useful for the user. Like e.g. clicking a button. In KO this is handled using the same <a href="http://knockoutjs.com/documentation/click-binding.html">data-bind</a> attribute using key’s corresponding to event handlers. &#8220;</p>

<pre><code class="html">&lt;button data-bind="click: performSomeAction"&gt;Click me&lt;/button&gt;
</code></pre>

<p><strong>7. Value Converters </strong></p>

<p>The <a href="http://msdn.microsoft.com/en-us/library/system.windows.data.ivalueconverter(v=vs.110).aspx">IValueConverter</a> interface is to create a converter that can be applied on a Binding to provide custom logic on the data that gets bounded to the UI element. For a similar functionality in KO, there is <a href="http://knockoutjs.com/documentation/computedObservables.html">writable computed observable</a> to convert to and from a specific format of data. The read and write function on the computed observable, corresponds to the Convert and ConvertBack functions on IValueConverter on XAML.</p>

<p><pre class="codepen" data-height="300" data-type="js" data-href="dJhLm" data-user="rahulpnath"><code> </code></pre>
<script async src="http://codepen.io:/assets/embed/ei.js"></script></p>

<p>There are a lot of useful resources on the web that are freely available to get started with KnockoutJS. Some of them are listed below</p>

<ul>
<li><p><a href="http://knockoutjs.com/documentation/introduction.html">Official Documentation</a></p></li>
<li><p><a href="http://learn.knockoutjs.com/">Learn By Doing</a></p></li>
<li><p><a href="https://www.youtube.com/results?search_query=knockout+javascript">Videos</a></p></li>
<li><p><a href="http://channel9.msdn.com/Search?term=knockout#ch9Search">More Videos</a></p></li>
</ul>


<p>Hope you find this useful to easily understand KnockoutJS, re-applying your XAML knowledge . Do drop in a comment in case you find any other similarities with XAML that I have missed mentioning here and I would be happy to add it in. I am sure I have not covered it completely!
<a href="http://www.codeproject.com" style="display:none" rel="tag">CodeProject</a></p>
]]></content>
  </entry>
  
</feed>
