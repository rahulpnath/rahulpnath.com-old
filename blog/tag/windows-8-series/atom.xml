<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Windows 8 Series | Rahul Nath]]></title>
  <link href="http://rahulpnath.com/blog/tag/windows-8-series/atom.xml" rel="self"/>
  <link href="http://rahulpnath.com/"/>
  <updated>2016-12-05T03:50:45+00:00</updated>
  <id>http://rahulpnath.com/</id>
  <author>
    <name><![CDATA[Rahul Nath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MVVM – Does it really matter?]]></title>
    <link href="http://rahulpnath.com/blog/mvvm-does-it-really-matter/"/>
    <updated>2013-04-08T05:12:07+00:00</updated>
    <id>http://rahulpnath.com/blog/mvvm-does-it-really-matter</id>
    <content type="html"><![CDATA[<p>MVVM (Model-View-ViewModel), is a popular architectural pattern since WPF/Silverlight. Separation of concerns(UI/code), testability etc are some of the key things that motivates one to go via the MVVM route. There are innumerous articles out there, just like this <a href="http://msdn.microsoft.com/en-in/library/hh848246.aspx">one</a>, that gets into the details of how and why one should use MVVM.</p>

<p>With Windows phone also embracing xaml and silverlight, any one who knew silverlight turned a phone developer overnight. MVVM did find its way into this space too. But most of the phone app developers, unlike those who developed for enterprise. would have never cared for MVVM , as they rarely would have written test cases for their apps, nor were they actually concerned on the UI/code separation. Since most of the apps were just out of a hobby, the only idea was just to have it up and available in the store as fast as possible. I might not be fully correct here, but I do know at least a dozen people,including me, who did this, so am good enough to put out that statement</p>

<p>With windows 8 too taking the store way and having the same development platform of silverlight/xaml, don’t be surprised MVVM  showed up there too. Now anyone who had an app on the phone, had to do a lot of copy pasting over the code to have the same application available in both the stores. This gives MVVM a totally new dimension for motivation that was not spoken  about earlier – <strong><em>Reusability. </em></strong></p>

<p>Having an application for phone and windows 8 app store with the minimum amount of rework is best possible by using MVVM and also a couple of other techniques. There is a detailed <a href="http://msdn.microsoft.com/en-us/library/windowsphone/develop/jj681693(v=vs.105">article</a>.aspx) on msdn on how how to maximize code reuse between Windows Phone 8 and Windows 8.</p>

<p>MVVM does really matter now, if we do not want to end up copy pasting code from phone app to the windows 8 store app. Also fixing and adding in new features would become more easier with following MVVM</p>

<p><a href="http://nuget.org/packages/Portable.MvvmLightLibs/">MVVM Toolkit</a> is a very popular helper library for implementing MVVM pattern, as is available on nuget as a PCL(Portable class library)</p>

<p><strong>MVVM<em>, It really does matter !!!</em></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows 8 Series – Drop Down Button]]></title>
    <link href="http://rahulpnath.com/blog/windows-8-series-drop-down-button/"/>
    <updated>2013-01-04T09:36:48+00:00</updated>
    <id>http://rahulpnath.com/blog/windows-8-series-drop-down-button</id>
    <content type="html"><![CDATA[<p>While working on my Windows 8 Store application, <a href="http://apps.microsoft.com/windows/en-us/app/picfinity/33ba9249-a9f4-44df-973c-21962376c3ea">Picfinity</a> I came across a need for a drop-down button(which I thought was the correct term for this). A similar control is there on the start screen of Windows 8 that gives us options on clicking the logged in user’s image to Change Account picture, Lock, Sign Out etc.</p>

<p><img src="/windows8_dropdown_button.png" alt="windows8 dropdown button" /></p>

<p>I wanted this same behaviour in my application, to provide similar options for the logged in user. The easiest way to achieve this is to use a <a href="http://msdn.microsoft.com/en-us/library/system.windows.controls.primitives.popup.aspx">Popup</a>. The xaml snippet below shows how to get a similar look on your application</p>

<pre><code class="xml">    &lt;Grid Background="{StaticResource ApplicationPageBackgroundThemeBrush}"&gt;
        &lt;Grid.ColumnDefinitions&gt;
            &lt;ColumnDefinition /&gt;
            &lt;ColumnDefinition Width="Auto" /&gt;
        &lt;/Grid.ColumnDefinitions&gt;
        &lt;TextBlock Text="MY Content" FontSize="30" HorizontalAlignment="Center" 
             VerticalAlignment="Center" /&gt;
       &lt;span style="color:#000000;"&gt; &lt;StackPanel Grid.Column="1" Margin="0,10,30,0" &gt;
            &lt;Button Content="User Name" VerticalAlignment="Top" Click="Button_Click_1" /&gt;
            &lt;Popup IsLightDismissEnabled="True" Name="buttonDropDown"&gt;
                &lt;StackPanel Background="DarkGray"  Width="105"&gt;
                  &lt;Button BorderThickness="0" Content="Option1" HorizontalAlignment="Stretch" /&gt;
                  &lt;Button BorderThickness="0" Content="Option2" HorizontalAlignment="Stretch" /&gt;
                  &lt;Button BorderThickness="0" Content="Option3" HorizontalAlignment="Stretch" /&gt;
                &lt;/StackPanel&gt;
            &lt;/Popup&gt; 
        &lt;/StackPanel&gt;&lt;/span&gt;
    &lt;/Grid&gt;
</code></pre>

<p>On click of the button we need to set the popup’s <a href="http://msdn.microsoft.com/en-us/library/system.windows.controls.primitives.popup.isopen.aspx">IsOpen</a> to true. Setting the <a href="http://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.xaml.controls.primitives.popup.islightdismissenabled">IsLightDismissEnabled</a> to true the popup closes whenever the user taps outside of the popup.</p>

<p><img src="/windows8_dropdown_button_plain.png" alt="windows8 dropdown button" /></p>

<p>Style and color it the way you want it to look and there you have an easy drop-down button for Windows 8.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows 8 Series - Incremental Loading]]></title>
    <link href="http://rahulpnath.com/blog/windows-8-series-incremental-loading/"/>
    <updated>2012-10-28T14:41:31+00:00</updated>
    <id>http://rahulpnath.com/blog/windows-8-series-incremental-loading</id>
    <content type="html"><![CDATA[<p>Fast and fluid experience is one of the most important characteristics of a Windows 8 application. As the data becomes larger , it might not be always possible to get the entire data loaded before hand.We might want to have a incremental or sequential data loading so that the user has a better experience.
While developing windows 8 this can be easily achieved by using <a href="http://msdn.microsoft.com/en-us/library/windows/apps/Hh701916">ISupportIncrementalLoading</a>
interface which would load the data incrementally.The class that implements this should also implement the <a href="http://msdn.microsoft.com/en-us/library/system.collections.ilist.aspx">IList</a> and <a href="http://msdn.microsoft.com/en-us/library/system.collections.specialized.inotifycollectionchanged.aspx">INotifyColectionChanged</a>. A sample on how to implement this interface can be seen <a href="http://msdn.microsoft.com/en-us/library/windows/apps/Hh701916">here</a>.
Implementing these over and over for different data sources that you would want to load incrementally might soon become tedious and repetitive.So why not make up some generic classes that you could abstract away the task of loading the data incrementally. That&rsquo;s exactly what we would be looking into here.</p>

<p>First lets get the class that implements <a href="http://msdn.microsoft.com/en-us/library/windows/apps/Hh701916">ISupportIncrementalLoading</a>, IList and INotifyCollectionChanged. To keep things simple lets inherit from ObservableCollection,which in turn inherits the latter 2 interfaces</p>

<pre><code class="csharp">    public class IncrementalSource&lt;T, K&gt; : ObservableCollection&lt;K&gt;, ISupportIncrementalLoading
        where T: class
    {
        private string Query { get; set; }
        private int VirtualCount { get; set; }
        private int CurrentPage { get; set; }
        private IPagedSource&lt;T,K&gt; Source { get; set; }
        private int rpp { get; set; }

        public IncrementalSource(string query, Func&lt;T, IPagedResponse&lt;K&gt;&gt; GetPagedResponse)
        {
            this.Source = new PagedSourceLoader&lt;T, K&gt;(GetPagedResponse);
            this.VirtualCount = int.MaxValue;
            this.CurrentPage = 0;
            this.Query = query;
        }

        #region ISupportIncrementalLoading

        public bool HasMoreItems
        {
            get { return this.VirtualCount &gt; this.CurrentPage * (rpp == 0 ? 10 :rpp); }
        }

        public IAsyncOperation&lt;LoadMoreItemsResult&gt; LoadMoreItemsAsync(uint count)
        {
            CoreDispatcher dispatcher = Window.Current != null ? Window.Current.Dispatcher : Windows.ApplicationModel.Core.CoreApplication.MainView.CoreWindow.Dispatcher;
            if (count &gt; 50 || count &lt;= 0)
            {
                // default load count to be set to 50
                count = 50;
            }

            return Task.Run&lt;LoadMoreItemsResult&gt;(
                async () =&gt;
                {

                    IPagedResponse&lt;K&gt; result = await this.Source.GetPage(string.Format(this.Query,count), ++this.CurrentPage, (int)count);

                    this.VirtualCount = result.VirtualCount;
                    if (rpp == 0)
                    {
                        rpp = result.rpp;
                    }

                    await dispatcher.RunAsync(
                        CoreDispatcherPriority.Normal,
                        () =&gt;
                        {
                            foreach (K item in result.Items)
                                this.Add(item);
                        });

                    return new LoadMoreItemsResult() { Count = (uint)result.Items.Count() };

                }).AsAsyncOperation&lt;LoadMoreItemsResult&gt;();
        }

        #endregion
    }
</code></pre>

<p>Before going into the details of the code, lets understand what this class is going to do for us. We need to load data in a paged fashion from a large datasource. So we would generally be dealing with two types of object – one the type of object(<strong><em>K</em></strong>) whose list we are trying to load incrementally. Another one the type of object(<strong><em>T</em></strong>) that represents each paged request result. This object would ideally contain a property to hold list of objects of type K, the total number of items that the datasource would give us,so that we know how many pages we need to request for and also a property indicating the current page. Each datasource might return us these required properties in different property names and types. So we have a class to hold these data together for us, PagedResponse which implements IPagedResponse</p>

<pre><code class="csharp">    public interface IPagedResponse&lt;T&gt;
    {
        IEnumerable&lt;T&gt; Items { get; }
        int VirtualCount { get; }
        int rpp { get; set; } // rpp - requests per page
    }




    public class PagedResponse&lt;K&gt; : IPagedResponse&lt;K&gt;
    {
        public PagedResponse(IEnumerable&lt;K&gt; items, int virtualCount,int itemsPerPage)
        {
            this.Items = items;
            this.VirtualCount = virtualCount;
            rpp = itemsPerPage;
        }

        public int VirtualCount { get; private set; }
        public int rpp { get;  set; }
        public IEnumerable&lt;K&gt; Items { get; private set; }
    }
</code></pre>

<p>That said lets see the  <em>IncremetnalSource</em> class. It takes in the object type <strong><em>T </em></strong>and <strong><em>K.</em></strong>The constructor takes in the url where the datasource can be found.The Func&lt;T, IPagedResponse<K>> parameter represents a function that takes in the return type of the call to the url as a parameter and returns the PagedResponse type. In other words that function converts the paged request call type to the type that we use to represent it, IPagedResponse.See a sample below.</p>

<pre><code class="csharp">private PagedResponse&lt;Photo&gt; RootObjectResponse(RootObject rootObject)
{
    return new PagedResponse&lt;Photo&gt;(rootObject.photos, rootObject.total_items, rootObject.photos != null ? rootObject.photos.Count : 0);
}
</code></pre>

<p>Now we need to make the call to the datasource url. This might return us data in different formats, most popularly json or xml. So we would always want to abstract away the loading of data to another class so that we don’t get tied up with the data formats in <em>IncrementalSource.</em></p>

<p>IPagedSource&lt;T,K> will do this for us. A sample implementation of this is <em>PagedSourceLoader </em>that handles for json return type is below</p>

<pre><code class="csharp">    public interface IPagedSource&lt;R,K&gt;
    {
        Task&lt;IPagedResponse&lt;K&gt;&gt; GetPage(string query, int pageIndex, int pageSize);
    }




    public class PagedSourceLoader&lt;T,K&gt; : IPagedSource&lt;T,K&gt;
        where T:class 
    {
        private Func&lt;T, IPagedResponse&lt;K&gt;&gt; getPagedResponse;
        public PagedSourceLoader(Func&lt;T, IPagedResponse&lt;K&gt;&gt; GetPagedResponse)
        {
            getPagedResponse = GetPagedResponse;
        }

        #region IPagedSource

        public async Task&lt;IPagedResponse&lt;K&gt;&gt; GetPage(string query, int pageIndex, int pageSize)
        {
            query += "&amp;page="+pageIndex;
            HttpClient client = new HttpClient();
            HttpResponseMessage response = await client.GetAsync(query);
            var data = await response.Content.ReadAsStreamAsync();
            DataContractJsonSerializer json = new DataContractJsonSerializer(typeof(T));
            T dat = json.ReadObject(data) as T;
            return getPagedResponse(dat);
        }

        #endregion
    }
</code></pre>

<p>As you see above the <em>PagedSourceLoader</em> gets the json from the datasource url and converts to the type that we are interested in . You could always replace this class to use any other data format as you would want. Mostly you would just want one implementation for <em>IPagedSource&lt;T,K>, </em>as your data source would always return you the same data format. In case not you could inject that too into the <em>IncrementalSource</em> class.</p>

<p>I have a sample <a href="http://sdrv.ms/RdPtdL">here</a> that incrementally loads the photos from a photo site <a href="http://500px.com/flow">500px</a>. You would need to register for an to get the consumer key,which should hardly take some time <a href="http://500px.com/settings/applications?from=developers">here</a>.</p>

<p><img src="/windows8_incremental_loading.png" alt="windows8 incremental loading" /></p>

<p><a href="https://github.com/rahulpnath/Blog/tree/master/Windows8%20-%20IncrementalLoading">Download the sample source code</a></p>

<p>Keep a sample of the source code for yourself in case you wanted this specific version. I might refine this to a more usable library with couple of default <em>PagedSourceLoader.</em></p>

<p><strong>References:
</strong><a href="http://www.silverlightplayground.org/post/2012/06/10/Metro-Incrementally-load-GridView-and-ListView-with-ISupportIncrementalLoading.aspx">Metro: Incrementally load GridView and ListView with ISupportIncrementalLoading</a></p>

<p>Feel free to reuse it if you find it useful and drop a comment to refine it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows 8 Series - Exploring OAuth: c# and 500px]]></title>
    <link href="http://rahulpnath.com/blog/exploring-oauth-c-and-500px/"/>
    <updated>2012-10-05T12:00:27+00:00</updated>
    <id>http://rahulpnath.com/blog/exploring-oauth-c-and-500px</id>
    <content type="html"><![CDATA[<p>The days when we ourselves developed sites and application for our own services are long gone. Now it’s about building api’s, sharing data and going social that&rsquo;s the buzz. No more is it a feasible solution to build applications for the numerous devices, that varies in size,shape and by the software that runs in them. The best thing then would be to expose API’s so that anybody interested can build applications for you. In any case the last thing that you would want to share is your users credentials. This is where OAuth comes into picture. Put it simply OAuth is an open protocol that allows secure access to the data that you want to expose, usually the API.</p>

<p>Most of us would have seen OAuth in action. Whenever you logon to a site using any of the social network sites identity,be it Facebook or Twitter it’s OAuth that is behind the scenes that helps the site to get the required information from the social entity and you don’t have to disclose your social credentials to the site that you actually intended to visit. If you have never seen this now is a good time to. Try it <a href="http://500px.com/">here</a></p>

<p>Now that you have seen how it works lets dig deeper to see how to get this feature into the apps that you are building. There are a lot of c# libraries,so are for other languages, that will handle the OAuth part for you like some listed <a href="http://nuget.org/packages?q=oauth&amp;prerelease=&amp;sortOrder=package-download-count">here</a>, keeping the mystery unsolved.</p>

<p>I chose the web-api provided by <a href="http://developers.500px.com/">500px</a>, which does secure its data using OAuth. You can see the complete documentation of the api <a href="https://github.com/500px/api-documentation">here</a>. It is the Authentication part in that, that we would be concentrating here on, using OAuth 1.0</p>

<p><img src="/oauth_500px_authentication.png" alt="oauth_500px_authentication" /></p>

<p>On a high level as seen above,OAuth has 3 steps.    <br/>
1. Getting a request token     <br/>
2. Authorizing the user     <br/>
3. Getting the access token.</p>

<p>The access token is then used to access any protected resource.</p>

<p>The following definitions, as from the <a href="http://oauth.net/core/1.0/">OAuth specification</a> is worth knowing before we delve in</p>

<p><em>Service Provider:</em> A web application that allows access via OAuth.     <br/>
<em>User:</em> An individual who has an account with the Service Provider.     <br/>
<em>Consumer:</em> A website or application that uses OAuth to access the Service Provider on behalf of the User.     <br/>
<em>Protected Resource(s):</em> Data controlled by the Service Provider, which the Consumer can access through authentication.     <br/>
<em>Consumer Developer:</em> An individual or organization that implements a Consumer.     <br/>
<em>Consumer Key:</em> A value used by the Consumer to identify itself to the Service Provider.     <br/>
<em>Consumer Secret:</em> A secret used by the Consumer to establish ownership of the Consumer Key.     <br/>
<em>Request Token:</em> A value used by the Consumer to obtain authorization from the User, and exchanged for an Access Token.     <br/>
<em>Access Token:</em> A value used by the Consumer to gain access to the Protected Resources on behalf of the User, instead of using the User’s Service Provider credentials.     <br/>
<em>Token Secret:</em> A secret used by the Consumer to establish ownership of a given Token.     <br/>
<em>OAuth Protocol Parameters:</em> Parameters with names beginning with oauth_.</p>

<p>Before getting on to the steps we would need to register the application that is going to consume the web api, to get the Consumer Key and Consumer Secret required in OAuth.You can do that here for <a href="http://500px.com/settings/applications">500px</a>. All web-api’s supporting OAuth would have such a page, as registering provides us with the keys. If the application does not have a callback url, like in case you are developing for a phone or desktop application you can specify any url you want.</p>

<p><img src="/oauth_500px_application_details.png" alt="oauth_500px_application_details" /></p>

<p>The base URL for 500px web-api is ‘<a href="https://api.500px.com/v1/">https://api.500px.com/v1/</a>’. All further references to url’s would be relative to this</p>

<p><strong>Getting the Request Token</strong></p>

<p>To get the request token we need to make a POST request to <a href="https://github.com/500px/api-documentation/blob/master/authentication/POST_oauth_requesttoken.md"><em>oauth/request_token</em></a>, which expects the parameters <em>CallbackUrl,ConsumerKey,Nonce,SignatureMethod,Timestamp and OAuthVersion. </em>All these should be in the same order,i.e alphabetical. All these parameters needs to be signed using the consumer secret and the signature too needs to be attached in the request data. This data goes as part of the ‘<em>Authorization’</em> header of the request.</p>

<pre><code class="csharp">    public async Task&lt;OauthToken&gt; RequestToken() 
           { 
               AuthorizationParameters = new Dictionary&lt;string, string&gt;(){                                
                                 {OauthParameter.OauthCallback, OAuthCallbackUrl}, 
                                 {OauthParameter.OauthConsumerKey, consumerKey}, 
                                 {OauthParameter.OauthNonce, Nonce()}, 
                                 {OauthParameter.OauthSignatureMethod,OAuthSignatureMethod}, 
                                 {OauthParameter.OauthTimestamp, TimeStamp()}, 
                                 {OauthParameter.OauthVersion, OAuthVersion} 
                                   }; 
               string response = await this.MakeRequest(RequestType.POST) 
                   .Sign(OAuthRequestUrl, String.Empty) 
                   .ExecuteRequest(OAuthRequestUrl); 

    ……… 
</code></pre>

<p>The above function handles adding the parameters required and executing the request.</p>

<p>The <em>MakeRequest</em> call specifies the kind of HTTP call that you want to make, here it being a POST. The call to the function <em>Sign, </em>signs the parameters and adds the signature details to the parameter list. It uses the same signature method as specified in the parameter list, <em>HMAC-SHA1</em></p>

<pre><code class="csharp    ">    private Oauth500px Sign(string Url, string tokenSecret) 
           { 
               String SigBaseStringParams = String.Join("&amp;", AuthorizationParameters.Select(key =&gt; key.Key + "=" + Uri.EscapeDataString(key.Value))); 
               String SigBaseString = requestType.ToString() + "&amp;"; 
               SigBaseString += Uri.EscapeDataString(Url) + "&amp;" + Uri.EscapeDataString(SigBaseStringParams);

               IBuffer KeyMaterial = CryptographicBuffer.ConvertStringToBinary(consumerSecret + "&amp;" + tokenSecret, BinaryStringEncoding.Utf8); 
               MacAlgorithmProvider HmacSha1Provider = MacAlgorithmProvider.OpenAlgorithm(OAuthSignatureMethodName); 
               CryptographicKey MacKey = HmacSha1Provider.CreateKey(KeyMaterial); 
               IBuffer DataToBeSigned = CryptographicBuffer.ConvertStringToBinary(SigBaseString, BinaryStringEncoding.Utf8); 
               IBuffer SignatureBuffer = CryptographicEngine.Sign(MacKey, DataToBeSigned); 
               String Signature = CryptographicBuffer.EncodeToBase64String(SignatureBuffer); 
               AuthorizationParameters.Add(OauthParameter.OauthSignature, Signature); 
               return this; 
           } 
</code></pre>

<p>The <em>ExecueRequest</em> handles adding the details to the authorization header and making the request and returning the response.</p>

<p>A successful call to request token will return <em>Request Token</em> and a <em>token secret </em>which is to be used in the subsequent call to Authorize</p>

<p><strong>Authorize</strong></p>

<p>The call to authorize brings up the login page of the Service Provider(500px),if the user is not already logged in and is used to authorize the request token that has been just obtained. The request to authorize is to be made at <a href="https://github.com/500px/api-documentation/blob/master/authentication/POST_oauth_authorize.md">oauth/authorize</a>, with the request token received in the previous call.</p>

<pre><code class="csharp    ">    public async Task&lt;OauthToken&gt; AuthorizeToken() 
           { 
               var tempAuthorizeUrl = OAuthAuthorizeUrl + "?oauth_token=" + Token.Token;
               System.Uri StartUri = new Uri(tempAuthorizeUrl); 
               System.Uri EndUri = new Uri(OAuthCallbackUrl);
               var auth = 
                   await 
                   WebAuthenticationBroker.AuthenticateAsync(WebAuthenticationOptions.None, StartUri, EndUri);
               var responseData = auth.ResponseData;
</code></pre>

<p>Since this is for Windows8 I use the WebAuthenticationBroker to issue the request to authorize the user, which will open up a nice UI asking the user credentials. On entering the login details and getting successfully authorized, we would get the <em>request token</em> and the <em>oauth_verifier</em> code.</p>

<p><strong>Access Token</strong></p>

<p>This final step gives you the access token, that is used for any request to a protected resource. A POST request it to made to the url <a href="https://github.com/500px/api-documentation/blob/master/authentication/POST_oauth_accesstoken.md">oauth/access_token</a>, with the parameters <em>ConsumerKey, Nonce, SignatureMethod, Timestamp, RequestToken, VerifierCode and OAuthVersion, </em>again all alphabetical sorted and signed using the consumer key and token secret that we got in the call to request token.</p>

<pre><code class="csharp    ">    public async Task&lt;OauthToken&gt; AccessToken() 
           { 
               AuthorizationParameters = new Dictionary&lt;string, string&gt;() 
                       { 
                           {OauthParameter.OauthConsumerKey, consumerKey}, 
                           {OauthParameter.OauthNonce, Nonce()}, 
                           {OauthParameter.OauthSignatureMethod,OAuthSignatureMethod}, 
                           {OauthParameter.OauthTimestamp, TimeStamp()}, 
                           {OauthParameter.OauthToken,Token.Token}, 
                           {OauthParameter.OauthVerifier,Token.Verifier}, 
                           {OauthParameter.OauthVersion, OAuthVersion} 
                       }; 
               var response = await this.MakeRequest(RequestType.POST) 
                   .Sign(OAuthAccessUrl, Token.SecretCode) 
                   .ExecuteRequest(OAuthAccessUrl);

    ……. 
</code></pre>

<p>The SecretCode, that was obtained from the call to Requesttoken is also passed to the function <em>Sign</em>.</p>

<p>A successful call would return you the AccessToken and the Access token’s secret code for that. All subsequent request to any protected resource needs the AccessToken and should be signed using ConsumerKey and the access token’s secret code.</p>

<p>From now on any request to a protected resource should be made with the following parameters: <em>ConsumerKey,Nonce,SignatureMethod,Timestamp,OAuthToken and OAuthVersion</em> along with any additional parameters<em>. </em>This should be signed using the consumer secret and the access token secret code.</p>

<p>The ExecuteRequest handles for this and is a genenric function that would allow you to specify the return type that you are expecting and the Url of the protected resource</p>

<pre><code class="csharp ">
    public async Task&lt;T&gt; ExecuteRequest&lt;T&gt;(string Url, Dictionary&lt;string, string&gt; Parameters) where T : class 
         { 
             AuthorizationParameters = new Dictionary&lt;string, string&gt;() 
                                           { 
                                               {OauthParameter.OauthConsumerKey, consumerKey}, 
                                               {OauthParameter.OauthNonce, Nonce()}, 
                                               {OauthParameter.OauthSignatureMethod, OAuthSignatureMethod}, 
                                               {OauthParameter.OauthTimestamp, TimeStamp()}, 
                                               {OauthParameter.OauthToken, Token.Token}, 
                                               {OauthParameter.OauthVersion, OAuthVersion} 
                                           };

             string RequestUrl; 
             if (Parameters != null &amp;&amp; Parameters.Count &gt; 0) 
             { 
                 RequestUrl = Url + "?" + 
                              String.Join("&amp;", 
                              Parameters.Select(a =&gt; a.Key + (string.IsNullOrEmpty(a.Value) ? string.Empty : "=" + Uri.EscapeDataString(a.Value))).ToArray()); 
                 foreach (var parameter in Parameters) 
                 { 
                     AuthorizationParameters.Add(parameter.Key, parameter.Value); 
                 } 
             } 
             else 
                 RequestUrl = Url; 
             var response = await this.MakeRequest(requestType).Sign(Url, Token.SecretCode).ExecuteRequest(RequestUrl); 
             if (string.IsNullOrEmpty(response)) 
                 return null; 
             DataContractJsonSerializer json = new DataContractJsonSerializer(typeof(T)); 
             T dat = json.ReadObject(new MemoryStream(Encoding.UTF8.GetBytes(response))) as T; 
             return dat; 
         }
</code></pre>

<p>A sample way to use this would be as below</p>

<pre><code class="csharp ">Oauth500Px.MakeRequest(Oauth500px.RequestType.GET).ExecuteRequest&amp;lt;PhotoDetails&amp;gt;( 
                    photoDetails, null);
</code></pre>

<p>The code for the OAuth wrapper for 500px specific toWindows8 is available <a href="https://github.com/rahulpnath/Blog/blob/master/Oauth500px.cs">here</a> for download. Feel free to modify it and use it. I will be refactoring the code out a bit more and also add a few functionalities. So in case you wanted this specific version do keep a copy for yourself.</p>

<p>PS: Incorporating an offline comment that I had got, on putting a space after each full stop and hope I have not missed any.</p>
]]></content>
  </entry>
  
</feed>
